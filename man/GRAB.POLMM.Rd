% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/POLMM.R
\name{GRAB.POLMM}
\alias{GRAB.POLMM}
\title{POLMM method in GRAB package}
\usage{
GRAB.POLMM()
}
\description{
POLMM method is to analyze ordinal categorical data for related samples in a large-scale biobank.
}
\details{
Please check \code{?GRAB.control} for the generic list of \code{control} in \code{GRAB.NullModel()} and \code{GRAB.Marker()}.

Additional list of \code{control} in \code{GRAB.NullModel()} function
\itemize{
\item{range: a two-element numeric vector [default=c(-100,100)] to specify the domain of the empirical CGF.}
\item{length.out: a positive integer [default=10000] for empirical CGF. Larger length.out corresponds to longer calculation time and more accurate estimated empirical CGF.}
}
Additional list of \code{control} in \code{GRAB.Marker()} function
\itemize{
\item{impute_method: a character string [default="fixed"] to specify the method to impute missing genotypes. "fixed" imputes missing genotypes (NA) by assigning the mean genotype value (i.e. 2p where p is MAF).}
}
Additional list of \code{control} in \code{GRAB.Region()} function
\itemize{
\item{xxx: xxx}
}
}
\examples{
# Step 1(a): fit a null model using a dense (full) GRM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
                           data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
                           GenoFile = GenoFile,
                           control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))

names(obj.POLMM)
obj.POLMM$tau    # 1.820102

# Step 1(b): fit a null model using a sparse GRM
# First use getSparseGRM() function and plink file to get a sparse GRM file
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
                           data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
                           GenoFile = GenoFile,
                           SparseGRMFile = SparseGRMFile,
                           control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))

names(obj.POLMM)
obj.POLMM$tau    # 1.870175

# Step 2(a): perform marker-level score test
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMMMarkers.txt")
GRAB.Marker(obj.POLMM, GenoFile = GenoFile,
            OutputFile = OutputFile)
            
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")

# Step 2(b): perform region-level score test
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")

SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")

# To be continued
# OUTPUT = GRAB.Region(objNull, AnnoFile, GenoFile, GenoFileIndex = NULL, OutputFile, 
                      SparseGRM, chrom, POLMM.control = list(max_maf_region = 0.5))
           
}
