formula  = outcome ~ Cova1 + Cova2
data = POLMM_data
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
if(missing(subjData))
stop("Argument 'subjData' is required to specify the subjects IDs in 'formula' and/or 'data'.")
# Call = match.call()
control = GRAB:::checkControl.NullModel(control, method, traitType)
genoList = GRAB:::setGenoInput(GenoFile)
names(genoList)
genoList$genoType
dim(genoList$markerInfo)
head(genoList$markerInfo)
length(genoList$SampleIDs)
head(genoList$SampleIDs)
dim(data)
genoList$anyQueue
subset = NULL
objFormula = GRAB:::handleFormula(formula, data, subset)
names(objFormula)
objFormula$response
class(objFormula$response)
formula  = as.factor(outcome) ~ Cova1 + Cova2
objFormula = GRAB:::handleFormula(formula, data, subset)
summary(objFormula)
head(objFormula$pos)
head(objFormula$designMat)
head(objFormula$response)
response = objFormula$response
pos = objFormula$pos
designMat = objFormula$designMat
length(subjData)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data
subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile)
objNull = GRAB.NullModel(formula,
data,
subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile)
dim(data)
length(subjData)
objFormula = GRAB:::handleFormula(formula, data, subset)  # check formula.R for more details
response = objFormula$response
designMat = objFormula$designMat   # note that the intercept column is not included
pos = objFormula$pos
range(pos)
length(subjData)
max(pos)
any(pos > length(subjData))
?library
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile)
objNull = GRAB.NullModel(formula,
data,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile)
objNull = GRAB.NullModel(formula,
data,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
names(objNull)
all(objNull$subjData == objNull$subjGeno)
objNull$Call
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
POLMM_data = POLMM_data[c(1,4,2),]
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
all(objNull$subjData == objNull$subjGeno)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"), stringsAsFactors = F)
POLMM_data = POLMM_data[c(1,4,2),]
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"), stringsAsFactors = F)
POLMM_data = POLMM_data[c(1,4,2),]
POLMM_data
objFormula = GRAB:::handleFormula(formula, data, subset)  # check formula.R for more details
response = objFormula$response
designMat = objFormula$designMat   # note that the intercept column is not included
pos = objFormula$pos
pos
formula
data
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
objFormula = handleFormula(formula, data, subset)  # check formula.R for more details
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
print(response)
print(designMat)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
objFormula = handleFormula(formula, data, subset)  # check formula.R for more details
?model.matrix
?model.response
a <- model.frame(ncases/(ncases+ncontrols) ~ agegp + tobgp + alcgp,
data = esoph, weights = ncases+ncontrols)
dim(esoph)
length(model.response(a))
a
head(a)
?model.frame
source('~/Github/GRAB/R/formula.R')
objFormula = handleFormula(formula, data, subset)  # check formula.R for more details
class(a)
attr(a)
attr(a,1)
?attr
a <- model.frame(ncases/(ncases+ncontrols) ~ agegp + tobgp + alcgp,
data = esoph, weights = ncases+ncontrols)
n = 20
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.5)
mf = matrix.frame(event~x1*x2+as.factor(x3))
mf = model.frame(event~x1*x2+as.factor(x3))
dim(mf)
mf
mf = model.frame(event~x1+x2+as.factor(x3))
mf
mf = model.frame(event~x1*x2+as.factor(x3))
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
head(designMat)
mt
mf = model.frame(event~x1*x2+as.factor(x3), subset= x2>=(-1))
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
response
designMat
mt
mf
?glm
glm
handleFormula = function(formula, data, subset, subjData)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
print(m)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
print(mf)
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
print(response)
print(designMat)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
designMat = designMat,
subjData = subjData))
}
n = 20
subjData = paste0("abc",1:n)
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.5)
a = handleFormula(event ~ x1+x2*x3, subset = x2>0, subjData = subjData)
a$response
a$designMat
a$subjData
n = 20
subjData = paste0("abc",1:(n+1))
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.5)
a = handleFormula(event ~ x1+x2*x3, subset = x2>0, subjData = subjData)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull$subjData
objNull$subjGeno
summary(data)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subset = Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull$subjGeno
head(data)
subset = Cova1 < (-3)
objNull = GRAB.NullModel(formula,
data,
subset = Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subset = Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
?glm
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull$subjGeno
objNull$subjData
?model.frame
x2 = rnorm(n)
n = 20
x2 = rnorm(n)
x2>0
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull$subjGeno
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
subset = data$Cova1 < (-3)
GRAB:::handleFormula(formula, data, subset, subjData)
GRAB:::handleFormula(formula, data, subset = data$Cova1 < (-3), subjData)
subset
objNull = GRAB.NullModel(formula,
data,
subset,
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = data$Cova1 < (-3)
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
# GRAB:::handleFormula(formula, data, subset = data$Cova1 < (-3), subjData)
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-3),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-2),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
objNull$subjGeno
subset = NULL
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-2),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
GRAB:::handleFormula(formula, data, subset = data$Cova1 < (-3), subjData)
GRAB:::handleFormula(formula, data, subset = data$Cova1 < (-2), subjData)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GRAB:::handleFormula(formula, data, subset = data$Cova1 < (-2), subjData)
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-2),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
POLMM_data = read.csv(system.file("extdata", "POLMM_data.csv", package = "GRAB"))
formula  = as.factor(outcome) ~ Cova1 + Cova2
data = POLMM_data
subset = NULL
subjData = data$IID
method = "POLMM"
traitType = "ordinal"
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GRAB:::handleFormula(formula, data, subset = data$Cova1 < (-2), subjData)
objNull = GRAB.NullModel(formula,
data,
subset = data$Cova1 < (-2),
subjData = subjData,
method = "SPACox",
traitType = "time-to-event",  # "binary", "ordinal", "quantitative", "time-to-event"
GenoFile = GenoFile)
remove.packages("GRAB", lib="~/R/win-library/4.0")
