OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMMMarkers.txt")
GRAB.Marker(obj.GRAB, GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
OutputFile
file.remove(OutputFile)
GRAB.Marker(obj.GRAB, GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
outPOLMM = POLMM(obj.POLMM, GenoMat)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
# save(obj.GRAB, file = "C:/Users/wenji/OneDrive/Documents/Github/objGRAB.RData")
load("C:/Users/wenji/OneDrive/Documents/Github/objGRAB.RData")
library(POLMM)
library(GRAB)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "IDsToInclude.txt", package = "GRAB")
GenoList = GRAB::GRAB.ReadGeno(GenoFile, control=list(IDsToIncludeFile = IDsToIncludeFile))
GenoMat = GenoList$GenoMat
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMMMarkers.txt")
file.remove(OutputFile)
GRAB.Marker(obj.GRAB, GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
outPOLMM = POLMM(obj.POLMM, GenoMat)
remove.packages("POLMM", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
load("C:/Users/wenji/OneDrive/Documents/Github/objGRAB.RData")
library(POLMM)
library(GRAB)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "IDsToInclude.txt", package = "GRAB")
GenoList = GRAB::GRAB.ReadGeno(GenoFile, control=list(IDsToIncludeFile = IDsToIncludeFile))
GenoMat = GenoList$GenoMat
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMMMarkers.txt")
file.remove(OutputFile)
GRAB.Marker(obj.GRAB, GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
outPOLMM = POLMM(obj.POLMM, GenoMat)
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("POLMM", lib="~/R/win-library/4.0")
library(GRAB)
load("C:/Users/wenji/OneDrive/Documents/Github/objGRAB.RData")
library(POLMM)
library(GRAB)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "IDsToInclude.txt", package = "GRAB")
GenoList = GRAB::GRAB.ReadGeno(GenoFile, control=list(IDsToIncludeFile = IDsToIncludeFile))
GenoMat = GenoList$GenoMat
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMMMarkers.txt")
file.remove(OutputFile)
GRAB.Marker(obj.GRAB, GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
outPOLMM = POLMM(obj.POLMM, GenoMat)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
load("C:/Users/wenji/OneDrive/Documents/Github/objGRAB.RData")
library(POLMM)
library(GRAB)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "IDsToInclude.txt", package = "GRAB")
GenoList = GRAB::GRAB.ReadGeno(GenoFile, control=list(IDsToIncludeFile = IDsToIncludeFile))
GenoMat = GenoList$GenoMat
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMMMarkers.txt")
file.remove(OutputFile)
GRAB.Marker(obj.GRAB, GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
outPOLMM = POLMM(obj.POLMM, GenoMat)
read.table(OutputFile, header = T)
outPOLMM
Rcpp::sourceCpp('C:/Users/wenji/OneDrive/Desktop/test.cpp')
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
?GRAB.Region
?GRAB.SimubVec
regionData = read.table("AnnoFile.txt")
setwd("C:/Users/wenji/OneDrive/Documents/Github/GRAB/inst/extdata")
regionData = read.table("AnnoFile.txt")
head(regionData)
regionData = read.table("AnnoFile.txt", header = T)
regionData
setwd("C:/Users/wenji/OneDrive/Documents/Github/GRAB/inst/extdata")
regionData = read.table("AnnoFile.txt", header = T)
regionData
regionData$ANNO2 = regionData$
# POLMM.plink(
#   obj.POLMM,
#   PlinkFile,
#   output.file,
#   "1",
#   memory.chunk = 4,
#   SPAcutoff = 2,
#   minMAF = 1e-04,
#   maxMissing = 0.15,
#   impute.method = "fixed",
#   G.model = "Add"
# )
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
regionData$ANNO2 = regionData$ANNO
head(regionData)
colnames(regionData)[c(3,4)] = c("ANNO1", "ANNO2")
regionData
bimData = read.table("nSNPs-10000-nsubj-1000-ext.bim")
bimData = read.table("nSNPs-10000-nsubj-1000-ext.bim", header = T)
head(bimData)
bimData = read.table("nSNPs-10000-nsubj-1000-ext.bim")
head(bimData,20)
regionData$SNP = bimData$V2[1:20]
regionData$ANNO1 = runif(20)
regionData$ANNO2 = runif(20)
regionData
colnames(regionData)[1] = "REGION"
write.table(regionData, "example.RegionFile.txt", row.names = F, col.names = T, quote = F)
colnames(regionData)[2] = "MARKER"
write.table(regionData, "example.RegionFile.txt", row.names = F, col.names = T, quote = F)
?GRAB.Region
?GRAB.Marker
?GRAB.POLMM
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.Marker
?GRAB.Marker
library(GRAB)
?GRAB.POLMM
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFile
RegionFile
?getSparseGRM
?getSparseGRM
## Input data:
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GenoFile
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
PlinkFile = gsub(".fam", "", famFile)   # fam/bim/bed files should have the same prefix
nPartsGRM = 2;   # nPartsGRM = 250 for UK Biobank data analysis
## Step 1:
## We strongly suggest parallel computing in high performance clusters (HPC) for different pairs of (chrParallel, partParallel).
for(partParallel in 1:nPartsGRM){
getTempFilesFullGRM(PlinkFile, nPartsGRM, partParallel)
}
basename(GenoFile)
GenoFile
tools::file_path_sans_ext(GenoFile)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
PlinkFile = tools::file_path_sans_ext(GenoFile)   # fam/bim/bed files should have the same prefix
nPartsGRM = 2;   # nPartsGRM = 250 for UK Biobank data analysis
for(partParallel in 1:nPartsGRM){
getTempFilesFullGRM(PlinkFile, nPartsGRM, partParallel)
}
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"))
library(GRAB)
sessionInfo()
setwd("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/SAINT")
Data1 = read.csv("GFP-N SP.csv")
Data2 = read.csv("GFP-N-DKO SP.csv")
Data3 = read.csv("GFP-N-F17A.csv")
head(Data1)
head(Data2)
head(Data3)
setwd("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/SAINT")
Data1 = read.csv("GFP-N SP.csv")
Data2 = read.csv("GFP-N-DKO SP.csv")
Data3 = read.csv("GFP-N-F17A.csv")
colnames(Data1)[2] = "GFP-N SP"
colnames(Data2)[2] = "GFP-N-DKO SP"
colnames(Data3)[2] = "GFP-N-F17A"
Data12 = merge(Data1, Data2, all = T)
Data123 = merge(Data12, Data3, all = T)
dim(Data123)
head(Data123)
write.csv(Data123, "merge.csv", row.names = F)
rm(list=ls())
library(GRAB)
?GRAB::getSparseGRM
library(GRAB)
?getSparseGRM
?getSparseGRM
setwd("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/SAINT")
Data1 = read.csv("GFP-N SP.csv")
Data2 = read.csv("GFP-N-DKO SP.csv")
Data3 = read.csv("GFP-N-F17A.csv")
colnames(Data1)[2] = "GFP-N SP"
colnames(Data2)[2] = "GFP-N-DKO SP"
colnames(Data3)[2] = "GFP-N-F17A"
Data12 = merge(Data1, Data2, all = T)
Data123 = merge(Data12, Data3, all = T)
write.csv(Data123, "merge.csv", row.names = F)
setwd("C:/Users/wenji/OneDrive/Documents/Github/GRAB/inst/SparseGRM")
SparseGRM = read.csv("SparseGRM.csv")
head(SparseGRM)
write.table(SparseGRM, "SparseGRM.txt", row.names = F, quote = F)
?GRAB.POLMM
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.ReadGeno
?GRAB.SPACox
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
head(PhenoData)
?GRAB.POLMM
?GRAB.control
?GRAB.Marker
?GRAB.NullModel
?GRAB.NullModel
?glm
?GRAB.NullModel
?GRAB.Marker
?GRAB.Marker
?GRAB.NullModel
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.NullModel
?GRAB.control
?GRAB.NullModel
library(GRAB)
?GRAB.NullModel
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
system.file("extdata", "example_bgen_1.2_8bits.bgen.samples", package = "GRAB")
head(read.table(system.file("extdata", "example_bgen_1.2_8bits.bgen.samples", package = "GRAB")))
head(read.table(system.file("extdata", "example_bgen_1.2_8bits.bgen.samples", package = "GRAB"),header=T))
?checkIfSampleIDsExist
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
checkIfSampleIDsExist(BGENFile)
?GRAB.ReadGeno
?GRAB.control
library(GRAB)
?GRAB.ReadGeno
?glm
?GRAB.ReadGeno
?GRAB.NullMode
?GRAB.NullModel
library(GRAB)
library(GRAB)
?GRAB.NullModel
library(GRAB)
?GRAB.NullModel
system.file("SparseGRM","SparseGRMFile",package="GRAB")
system.file("SparseGRM",package="GRAB")
system.file("SparseGRM","SparseGRM.txt",package="GRAB")
?GRAB.control
library(GRAB)
?GRAB.control
library(GRAB)
?GRAB.control
?GRAB.Region
?GRAB.Marker
?GRAB.Region
?GRAB.POLMM
?GRAB.SPACox
library(GRAB)
?GRAB.control
?GRAB.Marker
?GRAB.NullModel
?GRAB.Marker
library(GRAB)
?GRAB.control
?GRAB.Marker
?GRAB.POLMM
?GRAB.SPACox
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
obj.SPACox = GRAB.NullModel(survival::Surv(time,event) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID,
method = "SPACox", traitType = "time-to-event")
# Step 2: perform score test
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/SPACoxMarkers.txt")
GRAB.Marker(obj.SPACox, GenoFile = GenoFile,
OutputFile = OutputFile)
head(read.table(OutputFile, header=T))
?GRAB.control
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.control
?GRAB.Marker
?GRAB.NullModel
?GRAB.SPACox
?GRAB.POLMM
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
SparseGRMFile
library(GRAB)
library(GRAB)
?GRAB.POLMM
?GRAB.NullModel
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.File", package = "GRAB")
SparseGRMFile
system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
library(GRAB)
?GRAB.NullModel
?GRAB.POLMM
SparseGRM = data.table::fread(SparseGRMFile)
SparseGRMFile
SparseGRMFile = system.file("SparseGRM","SparseGRM.txt",package="GRAB")
SparseGRM = data.table::fread(SparseGRMFile)
SparseGRM
SparseGRM = as.data.frame(SparseGRM)
head(SparseGRM)
subjData = c("f1_1","f1_2","f1_3")
subjData
colnames(SparseGRM) != c("ID1", "ID2", "VALUE")
toupper(colnames(SparseGRM)) != c("ID1", "ID2", "VALUE")
if(any(toupper(colnames(SparseGRM)) != c("ID1", "ID2", "VALUE")))
stop("The header in 'SparseGRMFile' should be c('ID1','ID2','Value')")
colnames(SparseGRM) = toupper(colnames(SparseGRM))
tempGRM1 = SparseGRM;
tempGRM2 = data.frame(ID1=tempGRM1$ID2,
ID2=tempGRM1$ID1,
value=tempGRM1$VALUE)
tempGRM = rbind(tempGRM1, tempGRM2)
tempGRM = tempGRM[-1*which(duplicated(tempGRM)),]
ID1 = tempGRM$ID1;
ID2 = tempGRM$ID2;
value = tempGRM$value;
if(any(!is.element(subjData, ID1)))
stop("At least one of subjects is not in SparseGRM.")
location1 = match(ID1, subjData);
location2 = match(ID2, subjData);
pos = which(!is.na(location1) & !is.na(location2))
locations = rbind(location1[pos]-1,  # -1 is to convert R to C++
location2[pos]-1)
value = value[pos];
nSubj = length(subjData);
KinMatListR = list(locations = locations,
values = value,
nSubj = nSubj)
colnames(SparseGRM) = toupper(colnames(SparseGRM))
tempGRM1 = SparseGRM;
tempGRM2 = data.frame(ID1=tempGRM1$ID2,
ID2=tempGRM1$ID1,
VALUE=tempGRM1$VALUE)
tempGRM = rbind(tempGRM1, tempGRM2)
tempGRM = tempGRM[-1*which(duplicated(tempGRM)),]
ID1 = tempGRM$ID1;
ID2 = tempGRM$ID2;
value = tempGRM$value;
if(any(!is.element(subjData, ID1)))
stop("At least one of subjects is not in SparseGRM.")
location1 = match(ID1, subjData);
location2 = match(ID2, subjData);
pos = which(!is.na(location1) & !is.na(location2))
locations = rbind(location1[pos]-1,  # -1 is to convert R to C++
location2[pos]-1)
value = value[pos];
nSubj = length(subjData);
KinMatListR = list(locations = locations,
values = value,
nSubj = nSubj)
return(KinMatListR)
KinMatListR
tempGRM1 = SparseGRM;
tempGRM2 = data.frame(ID1=tempGRM1$ID2,
ID2=tempGRM1$ID1,
VALUE=tempGRM1$VALUE)
tempGRM = rbind(tempGRM1, tempGRM2)
tempGRM = tempGRM[-1*which(duplicated(tempGRM)),]
ID1 = tempGRM$ID1;
ID2 = tempGRM$ID2;
value = tempGRM$VALUE;
if(any(!is.element(subjData, ID1)))
stop("At least one of subjects is not in SparseGRM.")
location1 = match(ID1, subjData);
location2 = match(ID2, subjData);
pos = which(!is.na(location1) & !is.na(location2))
locations = rbind(location1[pos]-1,  # -1 is to convert R to C++
location2[pos]-1)
value = value[pos];
nSubj = length(subjData);
KinMatListR = list(locations = locations,
values = value,
nSubj = nSubj)
KinMatListR
Rcpp::sourceCpp('src/POLMM.cpp')
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
rm(list=ls())
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.NullModel
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.870175
?devtools::document
library(devtools)
?build_manual
getwd()
build_manual()
remove.packages("GRAB", lib="~/R/win-library/4.0")
