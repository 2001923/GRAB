head(PairwiseIBD)
PairwiseIBD->test1
GenoInfoMat
GenoInfoMat$MAF=1-GenoInfoMat$MAF
# metrics used in pairwise IBD calculation.
altFreq = GenoInfoMat$MAF
pro_var = 2 * (altFreq * (1 - altFreq))^2 # 2*pi^2*(1-pi)^2, where pi comes from Binom(2, pi).
wi = sqrt(pro_var/(1 - pro_var)) # weights of each SNP
# write the passed SNPIDs into IDsToInclude.
IDsToIncludeFile = paste0(tempDir, "/IDsToInclude.txt")
data.table::fwrite(data.table::data.table(GenoInfoMat$SNP), IDsToIncludeFile,
row.names = F, col.names = F, quote = F, sep = "\t")
edges = t(SparseGRMData[, c("ID1", "ID2")])
graph_GRM = make_graph(edges, directed = F)
graph_list_all = graph_GRM %>% decompose()
graph_length = lapply(graph_list_all, length)
graph_list = graph_list_all[graph_length > 1]
graph_length = lapply(graph_list, length) %>% unlist
# initialize parameters
PairwiseIBD = c();
tSampleNums = 0;
tSampleIDs = c();
nParts = 1;
for(i in 1:250)
{
tSampleNums = tSampleNums + graph_length[i];
tSampleIDs = c(tSampleIDs, V(graph_list[[i]])$name);
if(tSampleNums >= maxSampleNums | i == length(graph_list))
{
cat("\nProcessing the", nParts, "block(s) of Samples.\n")
GenoList = GRAB.ReadGeno(bedFile,
SampleIDs = tSampleIDs,
control = list(IDsToIncludeFile = IDsToIncludeFile,
ImputeMethod = "mean"))
tempGRM = SparseGRMData %>%
filter(ID1 %in% tSampleIDs & ID2 %in% tSampleIDs) %>%
filter(ID1 != ID2) %>%
mutate(idxID1 = match(ID1, rownames(GenoList$GenoMat))) %>%
mutate(idxID2 = match(ID2, rownames(GenoList$GenoMat)))
for(j in 1:nrow(tempGRM))
{
tempmetrics = GenoList$GenoMat[tempGRM$idxID1[j],] - GenoList$GenoMat[tempGRM$idxID2[j],]
pc = 0.5 * weighted.mean(((abs(tempmetrics - 1) + abs(tempmetrics + 1)- 2)/pro_var), wi, na.rm = T)
pc = ifelse(pc > (1-tempGRM$Value[j])^2, (1-tempGRM$Value[j])^2-1e-10, ifelse(pc < 1-2*tempGRM$Value[j], 1-2*tempGRM$Value[j], pc))
pb = 2 - 2*pc - 2*tempGRM$Value[j]
pa = 2*tempGRM$Value[j] + pc - 1
PairwiseIBD = rbind(PairwiseIBD,
c(ID1 = tempGRM$ID1[j], ID2 = tempGRM$ID2[j], pa = pa, pb = pb, pc = pc))
}
cat("Completed analyzing the", nParts, "block(s) of Samples.\n")
tSampleNums = 0;
tSampleIDs = c();
nParts = nParts + 1;
}
}
PairwiseIBD->test2
head(test1)
head(test2)
all(test[,5]==test2[,5])
which(test[,5]!=test2[,5])
test1[,3:5]=as.numeric(test1[,3:5])
test2[,3:5]=as.numeric(test2[,3:5])
head(test1)
test2[,5]=as.numeric(test2[,5])
test1[,5]=as.numeric(test1[,5])
head(test1)
test1=as.data.frame(test1)
test2=as.data.frame(test2)
head(test1)
class(test1$pa)
test1 = test1%>%mutate(across(pa:pc, as.numeric))
head(test1)
test2 = test2%>%mutate(across(pa:pc, as.numeric))
all(test1$pa==test2$pa)
all(abs(test1$pa-test2$pa)<1e-6)
all(abs(test1$pb-test2$pb)<1e-6)
library(GRAB)
PlinkFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK"
PairwiseIBDFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/SparseGRM.txt"
ResidMatFile = "C:/Users/XH/Desktop/ResidMat.txt"
GenoFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK.bed"
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
getPairwiseIBD(PlinkFile,SparseGRMFile,PairwiseIBDFile,rm.tempFile = T)
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
library(GRAB)
library(GRAB)
PlinkFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK"
PairwiseIBDFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/SparseGRM.txt"
ResidMatFile = "C:/Users/XH/Desktop/ResidMat.txt"
GenoFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK.bed"
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
getPairwiseIBD(PlinkFile,SparseGRMFile,PairwiseIBDFile,rm.tempFile = T)
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
PlinkFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK"
PairwiseIBDFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/SparseGRM.txt"
ResidMatFile = "C:/Users/XH/Desktop/ResidMat.txt"
GenoFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK.bed"
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
getPairwiseIBD(PlinkFile,SparseGRMFile,PairwiseIBDFile,rm.tempFile = T)
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
library(GRAB)
PlinkFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK"
PairwiseIBDFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/SparseGRM.txt"
ResidMatFile = "C:/Users/XH/Desktop/ResidMat.txt"
GenoFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK.bed"
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
getPairwiseIBD(PlinkFile,SparseGRMFile,PairwiseIBDFile,rm.tempFile = T)
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
library(GRAB)
PlinkFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK"
PairwiseIBDFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/SparseGRM.txt"
ResidMatFile = "C:/Users/XH/Desktop/ResidMat.txt"
GenoFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK.bed"
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
getPairwiseIBD(PlinkFile,SparseGRMFile,PairwiseIBDFile,rm.tempFile = T)
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
library(GRAB)
PlinkFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK"
PairwiseIBDFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/SparseGRM.txt"
ResidMatFile = "C:/Users/XH/Desktop/ResidMat.txt"
GenoFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/extdata/simuPLINK.bed"
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
getPairwiseIBD(PlinkFile,SparseGRMFile,PairwiseIBDFile,rm.tempFile = T)
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
PlinkFile = "C:/Users/XH/Desktop/test/nSub_25000_nFam_2500"
PairwiseIBDFile = "C:/Users/XH/Desktop/test/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/Desktop/test/SparseGRM_0.05.txt"
ResidMatFile = "C:/Users/XH/Desktop/test/ResidMat.txt"
GenoFile = "C:/Users/XH/Desktop/test/nSub_25000_nFam_2500.bed"
OutputFile = "C:/Users/XH/Desktop/test/Output.txt"
resid=data.table::fread(ResidMatFile)
resid=resid%>%select(SubjID,R_tau)%>%rename(Resid=R_tau)
resid=data.table::fread("C:/Users/XH/Desktop/test/ResidB-1.txt")
resid=resid%>%select(SubjID,R_tau)%>%rename(Resid=R_tau)
write.table(resid,ResidMatFile,col.names = T,row.names = F,quote = F,sep="\t")
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile)
test1=data.table::fread(OutputFile)
test2=data.table::fread("C:/Users/XH/Desktop/test/taucommonpvalB-1.txt")
test=full_join(test1,test2,by=c('Marker' = 'SNPID'))
head(test)
SPAGRM$R_GRM_R
5209.0007/sqrt(2*0.22475876*(1-0.22475876)*57521219)
plot(-log10(test$Pvalue),-og10(test$p.value.spa.G.GRM))+abline(0,1)
plot(-log10(test$Pvalue),-log10(test$p.value.spa.G.GRM))+abline(0,1)
test%>%filter(AltFreq>0.5)
test%>%filter(AltFreq>=0.5)
test%>%filter(MAF>=0.5)
all(test$AltFreq==test$MAF)
test1
test2
OutputFile = "C:/Users/XH/AppData/Local/R/win-library/4.2/GRAB/SparseGRM/temp/Output.txt"
test3=data.table::fread(OutputFile)
test3
test3%>%filter(AltFreq>=0.5)
library(remotes)  # remotes library requires less dependency packages than devtools
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="main")  # The INSTALL_opts is required in Windows OS.
warnings()
library(GRAB)
library(GRAB)
PlinkFile = "C:/Users/XH/Desktop/test/nSub_25000_nFam_2500"
PairwiseIBDFile = "C:/Users/XH/Desktop/test/PairwiseIBD.txt"
SparseGRMFile = "C:/Users/XH/Desktop/test/SparseGRM_0.05.txt"
ResidMatFile = "C:/Users/XH/Desktop/test/ResidMat.txt"
GenoFile = "C:/Users/XH/Desktop/test/nSub_25000_nFam_2500.bed"
OutputFile = "C:/Users/XH/Desktop/test/Output.txt"
SPAGRM = SPAGRM.NullModel(ResidMatFile,SparseGRMFile,PairwiseIBDFile)
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile,control=list(min_maf_marker=0.0001))
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile,control=list(min_maf_marker=0.00001))
GRAB.Marker(objNull = SPAGRM,GenoFile = GenoFile, OutputFile = OutputFile,control=list(min_maf_marker=0.001))
AncestryVec_Top10PCs <- read.csv("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/AncestryVec_Top10PCs.csv")
View(AncestryVec_Top10PCs)
data0 <- read.csv("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/AncestryVec_Top10PCs.csv")
library(ggplot2)
library(tidyr)
library(dplyr)
head(data0)
ggplot(data0, aes(Comp.1, Comp.2)) + geom_point()
ggplot(data0, aes(Comp.3, Comp.2)) + geom_point()
ggplot(data0, aes(Comp.3, Comp.4)) + geom_point()
ggplot(data0, aes(Comp.2, Comp.3)) + geom_point()
ggplot(data0, aes(Comp.1, a_EUR)) + geom_point()
ggplot(data0, aes(Comp.1, a_AFR)) + geom_point()
ggplot(data0, aes(Comp.1, a_EAS)) + geom_point()
ggplot(data0, aes(Comp.2, a_EAS)) + geom_point()
ggplot(data0, aes(Comp.1, a_AFR)) + geom_point()
ggplot(data0, aes(Comp.2, a_EAS)) + geom_point()
cor(data0[,c("a_EUR", "a_AFR", "Comp.1", "Comp.2", "Comp.3")])
res.lm = lm(a_EUR ~ Comp.1 + Comp.2 + Comp.3 + a_AFR, data0)
res.lm$coefficients
data1 = data0 %>% mutate(fitted.a.EUR = data0[,c("Comp.1", "Comp.2", "Comp.3", "a_AFR")] %*% res.lm$coefficients)
data0[,c("Comp.1", "Comp.2", "Comp.3", "a_AFR")]
class(data0[,c("Comp.1", "Comp.2", "Comp.3", "a_AFR")])
data1 = data0 %>% mutate(fitted.a.EUR = res.lm$fitted.values)
ggplot(data1, aes(a_EUR, fitted.a.EUR)) + geom_point()
data1 %>% select(a_EUR, fitted.a.EUR) %>% head()
res.lm = lm(a_EUR ~ Comp.1 + Comp.2 + a_AFR, data0)
res.lm$coefficients
data1 = data0 %>% mutate(fitted.a.EUR = res.lm$fitted.values)
head(data1)
ggplot(data1, aes(a_EUR, fitted.a.EUR)) + geom_point()
res.lm = lm(a_EUR ~ Comp.1 + Comp.2 + Comp.3 + a_AFR, data0)
res.lm$coefficients
res.lm = lm(a_EUR ~ Comp.1 + Comp.2 + a_AFR, data0)
res.lm$coefficients
data1 = data0 %>% mutate(fitted.a.EUR = res.lm$fitted.values)
ggplot(data1, aes(a_EUR, fitted.a.EUR)) + geom_point()
ggplot(data0, aes(Comp.1, a_EUR)) + geom_point()
gplot(data0, aes(Comp.1, a_AFR)) + geom_point()
ggplot(data0, aes(Comp.1, a_AFR)) + geom_point()
ggplot(data0, aes(Comp.1, a_EUR)) + geom_point()
library(GRAB)
load("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/obj.null.SPACox.RData")
load("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/obj.null.SPACox.RData")
rm(list=ls())
load("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/obj.null.SPACox.RData")
ls()
obj.null.SPACox$resid
hist(obj.null.SPACox$resid)
load("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/Phen.mtx.RData")
head(Phen.mtx)
data0 <- read.csv("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/AncestryVec_Top10PCs.csv")
head(data0)
data1 = cbind(data0, Resid = obj.null.SPACox$resid)
head(data1)
library(ggplot2)
library(tidyr)
library(dplyr)
ggplot(data1, aes(a_EUR, Resid)) + geom_point()
ggplot(data1, aes(a_AFR, Resid)) + geom_point()
ggplot(data1, aes(a_EUR, Resid)) + geom_point()
ggplot(data1, aes(a_AFR, Resid)) + geom_point()
ggplot(data1, aes(a_EAS, Resid)) + geom_point()
ggplot(data1, aes(a_EUR, Resid)) + geom_point()
ggplot(data1, aes(a_AFR, Resid)) + geom_point()
ggplot(data1, aes(a_EAS, Resid)) + geom_point()
load("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/MAF_Vec.RData")
head(MAF_Vec)
class(MAF_Vec)
data1 = cbind(data0,
Resid = obj.null.SPACox$resid,
MAF = MAF_Vec[,1])
ggplot(data1, aes(MAF, Resid)) + geom_point()
obj.lm = lm(Resid ~ MAF)
obj.lm = lm(Resid ~ MAF, data=data1)
obj.lm
summary(obj.lm)
obj.lm = lm(Resid ~ a_EUR, data=data1)
summary(obj.lm)
obj.lm = lm(Resid ~ a_AFR, data=data1)
summary(obj.lm)
obj.lm = lm(Resid ~ a_EAS, data=data1)
summary(obj.lm)
obj.lm = lm(a_EUR ~ Resid, data=data1)
summary(obj.lm)
obj.lm = lm(a_AFR ~ Resid, data=data1)
summary(obj.lm)
ggplot(data1, aes(a_EUR, Resid)) + geom_point()
ggplot(data1, aes(a_AFR, Resid)) + geom_point()
ggplot(data1, aes(a_EAS, Resid)) + geom_point()
obj.lm = lm(a_EUR ~ Resid, data=data1)
summary(obj.lm)
obj.lm = lm(Resid ~ a_EUR, data=data1)
summary(obj.lm)
obj.lm = lm(Resid ~ a_AFR, data=data1)
summary(obj.lm)
obj.lm = lm(Resid ~ a_EAS, data=data1)
summary(obj.lm)
load("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-05-22-3-ancestries/PvalData.RData")
head(PvalData)
PvalData %>% select(ER) %>% table()
PvalData %>% select(Method) %>% table()
PvalData %>% filter(Method == "SPAmix") %>% head()
PvalData %>% filter(Method == "Wald") %>% head()
PvalData %>% filter(Method == "SPACox") %>% head()
ggplot(data1, aes(a_EUR, Resid)) + geom_point()
obj.lm = lm(Resid ~ MAF, data=data1)
summary(obj.lm)
obj.lm = lm(Resid ~ a_EUR, data=data1)
summary(obj.lm)
?GRAB
library(GRAB)
?GRAB.NullModel
?GRAB.NullModel
?GRAB.NullModel
?SPAGRM.NullModel
library(GRAB)
library(GRAB)
data0 <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL.txt")
View(data0)
library(tidyr)
library(dplyr)
library(data.table)
library(tidyr)
library(dplyr)
library(data.table)
data0 <- data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL.txt")
dim(data0)
head(data0)
table(data0$UNRELATED_ALL)
data1 = data0 %>% filter(UNRELATED_ALL == TRUE) %>% select(eid, PC1:PC10) %>% unique()
dim(data1)
head(data1)
any'(duplicated(data1$eid))
''
any(duplicated(data1$eid))
LDL_UNRELATED_ALL_beta_resid <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL_UNRELATED_ALL_beta_resid.txt")
View(LDL_UNRELATED_ALL_beta_resid)
LDL_UNRELATED_ALL_tau_resid <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL_UNRELATED_ALL_tau_resid.txt")
View(LDL_UNRELATED_ALL_tau_resid)
dim(data1)
dim(LDL_UNRELATED_ALL_beta_resid)
dim(LDL_UNRELATED_ALL_tau_resid)
head(LDL_UNRELATED_ALL_beta_resid)
colnames(LDL_UNRELATED_ALL_beta_resid)[2] = "Resid_LDL_beta"
colnames(LDL_UNRELATED_ALL_tau_resid)[2] = "Resid_LDL_tau"
data2 = merge(LDL_UNRELATED_ALL_beta_resid, LDL_UNRELATED_ALL_tau_resid)
dim(data2)
head(data2)
data3 = merge(data2, data1)
dim(data1)
head(data1)
head(data2)
colnames(data2)[1] = "eid"
data3 = merge(data2, data1)
dim(data3)
dim(data2)
head(data3)
library(GRAB)
?GRAB.NullModel
library(GRAB)
rm(list=ls())
library(tidyr)
library(dplyr)
library(data.table)
library(GRAB)
data0 = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL.txt")
data1 = data0 %>% filter(UNRELATED_ALL == TRUE) %>% select(eid, PC1:PC10) %>% unique()
any(duplicated(data1$eid))
dim(data1)
UNRELATED_ALL_beta_resid <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL_UNRELATED_ALL_beta_resid.txt")
UNRELATED_ALL_tau_resid <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL_UNRELATED_ALL_tau_resid.txt")
dim(UNRELATED_ALL_beta_resid)
dim(UNRELATED_ALL_tau_resid)
colnames(UNRELATED_ALL_beta_resid)[2] = "Resid_beta"
colnames(UNRELATED_ALL_tau_resid)[2] = "Resid_tau"
data2 = merge(UNRELATED_ALL_beta_resid, UNRELATED_ALL_tau_resid)
colnames(data2)[1] = "eid"
data3 = merge(data2, data1)
obj_LDL_beta = GRAB.NullModel(Resid_beta ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = data3, subjData = data3$eid, method = "SPAmix", traitType = "Residual")
library(GRAB)
# rm(list=ls())
library(tidyr)
library(dplyr)
library(data.table)
library(GRAB)
data0 = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL.txt")
data1 = data0 %>% filter(UNRELATED_ALL == TRUE) %>% select(eid, PC1:PC10) %>% unique()
any(duplicated(data1$eid))
dim(data1)
UNRELATED_ALL_beta_resid <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL_UNRELATED_ALL_beta_resid.txt")
UNRELATED_ALL_tau_resid <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/data/trajGWAS/LDL_UNRELATED_ALL_tau_resid.txt")
dim(UNRELATED_ALL_beta_resid)
dim(UNRELATED_ALL_tau_resid)
colnames(UNRELATED_ALL_beta_resid)[2] = "Resid_beta"
colnames(UNRELATED_ALL_tau_resid)[2] = "Resid_tau"
data2 = merge(UNRELATED_ALL_beta_resid, UNRELATED_ALL_tau_resid)
colnames(data2)[1] = "eid"
data3 = merge(data2, data1)
obj_LDL_beta = GRAB.NullModel(Resid_beta ~ PC1 + PC2 + PC3 + PC4 + PC5 + PC6 + PC7 + PC8 + PC9 + PC10,
data = data3, subjData = data3$eid, method = "SPAmix", traitType = "Residual",
control = list(PC_columns = "PC1,PC2,PC3,PC4,PC5,PC6,PC7,PC8,PC9,PC10"))
library(GRAB)
library(remotes)
library(survival)
?survival::Surv()
system.file("results", package = "GRAB")
library(GRAB)
sessionInfo()
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs
obj.SPACox = GRAB.NullModel(Surv(SurvTime, SurvEvent)~AGE+GENDER, data = PhenoData, subjData = IID, method = "SPAmix", traitType = "time-to-event")
obj.SPACox = GRAB.NullModel(Surv(SurvTime, SurvEvent)~AGE+GENDER, data = PhenoData, subjData = IID, method = "SPAmix", traitType = "time-to-event", control = list(PC_columns = "PC1,PC2"))
obj.SPAmix = GRAB.NullModel(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData, subjData = IID, method = "SPAmix", traitType = "time-to-event", control = list(PC_columns = "PC1,PC2"))
or fit the null model using model residuals
```
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPACox = GRAB.NullModel(obj.coxph$residuals~AGE+GENDER+PC1+PC2, data = PhenoData, subjData = IID, method = "SPAmix", traitType = "Residual", control = list(PC_columns = "PC1,PC2"))
```
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPACox = GRAB.NullModel(obj.coxph$residuals~AGE+GENDER+PC1+PC2, data = PhenoData, subjData = IID, method = "SPAmix", traitType = "Residual", control = list(PC_columns = "PC1,PC2"))
```
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/Results_SPACox.txt")
GRAB.Marker(obj.SPACox, GenoFile = GenoFile, OutputFile = OutputFile)
#
OutputFile = paste0(OutputDir, "/Results_SPAmix.txt")
GRAB.Marker(obj.SPACox, GenoFile = GenoFile, OutputFile = OutputFile)
```
OutputFile = paste0(OutputDir, "/Results_SPAmix.txt")
OutputFile
GRAB.Marker(obj.SPAmix, GenoFile = GenoFile, OutputFile = OutputFile)
OutputFile
?GRAB.NullModel
?GRAB.NullModel
library(GRAB)
?GRAB.NullModel
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
obj.SPACox = GRAB.NullModel(Surv(SurvTime, SurvEvent)~AGE+GENDER,
data = PhenoData,
subjData = IID,
method = "SPACox",
traitType = "time-to-event")
# Using model residuals performs exactly the same as the above. Note that confounding factors are still required in the right of the formula.
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER, data = PhenoData, x=T)
obj.SPACox = GRAB.NullModel(obj.coxph$residuals~AGE+GENDER,
data = PhenoData,
subjData = IID,
method = "SPACox",
traitType = "Residual")
# Step 2: conduct score test
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/Results_SPACox.txt")
GRAB.Marker(obj.SPACox, GenoFile = GenoFile, OutputFile = OutputFile, control = list(outputColumns = "zScore"))
data.table::fread(OutputFile)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs
obj.SPAmix = GRAB.NullModel(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = "PC1,PC2"))
# Using model residuals performs exactly the same as the above. Note that confounding factors are still required in the right of the formula.
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData, x=T)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals~AGE+GENDER+PC1+PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
# Step 2: conduct score test
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/Results_SPAmix.txt")
GRAB.Marker(obj.SPAmix, GenoFile = GenoFile, OutputFile = OutputFile, control = list(outputColumns = "zScore"))
data.table::fread(OutputFile)
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs
obj.SPAmix = GRAB.NullModel(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = "PC1,PC2"))
# Using model residuals performs exactly the same as the above. Note that confounding factors are still required in the right of the formula.
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData, x=T)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals~AGE+GENDER+PC1+PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
# Step 2: conduct score test
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/Results_SPAmix.txt")
GRAB.Marker(obj.SPAmix, GenoFile = GenoFile, OutputFile = OutputFile, control = list(outputColumns = "zScore"))
data.table::fread(OutputFile)
?GRAB.NullModel
system.file("extdata", "simuPheno.txt", package = "GRAB")
system.file("extdata", "example.pheno", package = "GRAB")
PhenoData = read.table(system.file("extdata", "simuPheno.txt", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
PhenoData
head(PhenoData)
PhenoData = read.table(system.file("extdata", "simuPheno.txt", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
head(PhenoData)
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
SparseGRMFile
?GRAB.SPACox
