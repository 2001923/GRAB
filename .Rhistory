mf
mf
mt
?model.matrix
mf
class(mf)
attr(mf)
?attr
attr(x = mf, which="response")
model.response(mf)
response = model.response(mf)
names(response)
as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
dim(designMat)
designMat
colnames(designMat)
designMat = designMat[,-1,drop=F]
designMat
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] = "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
n = 20
y = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.3)
handleFormula(y~x1*x2+as.factor(x3), subset = x2>0)
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
n = 20
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.3)
handleFormula(event~x1*x2+as.factor(x3), subset = x2>0)
handleFormula(time~x1*x2+as.factor(x3), subset = x2>0)
handleFormula(survival::coxph(time,event)~x1*x2+as.factor(x3), subset = x2>0)
survival::coxph(time,event)
handleFormula(survival::Surv(time,event)~x1*x2+as.factor(x3), subset = x2>0)
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
n = 20
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.5)
handleFormula(event~x1*x2+as.factor(x3), subset = x2>=(-1))
handleFormula(time~x1*x2+as.factor(x3), subset = x2>=(-1))
handleFormula(survival::Surv(time,event)~x1*x2+as.factor(x3), subset = x2>=(-1))
survival::coxph(out$response ~ out$designMat)
out = handleFormula(survival::Surv(time,event)~x1*x2+as.factor(x3), subset = x2>=(-1))
survival::coxph(out$response ~ out$designMat)
?coxph
GFP.N.for.SAINT.3 <- read.csv("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/GFP-N for SAINT-3.csv", header=FALSE)
View(GFP.N.for.SAINT.3)
data=GFP.N.for.SAINT.3
duplicated(data[,1:3])
any(duplicated(data[,1:3]))
any(duplicated(data[,c(1,3)]))
any(duplicated(data[,c(1)]))
2442 / 22
N <- read.table("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N.csv", quote="\"", comment.char="")
View(N)
N.nature <- read.table("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N-nature.csv", quote="\"", comment.char="")
View(N.nature)
intersect(N$V1, N.nature$V1)
write.csv(intersect(N$V1, N.nature$V1), "C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/overlap.csv")
N <- read.csv("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N.csv", header=FALSE)
View(N)
N.nature <- read.csv("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N-nature.csv", header=FALSE)
View(N.nature)
colnames(N)=c("UniqName","NameInN")
colnames(N.nature)=c("UniqName","NameInNature")
overlap = merge(N, N.nature)
overlap
write.csv(overlap,"C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/overlap.csv",row.names = F)
Y:\POLMM-Gene\UKBB\2021-01-30-WES-200k-anno\combine
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
library(GRAB)
?GRAB.ReadGeno
?GRAB.SPACox
?GRAB.Marker
?GRAB.NullModel
library(GRAB)
?GRAB.ReadGeno
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(GenoFile)
head(GenoMat)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GenoFile
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
dim(GenoMat)
head(GenoMat[,1:15])
?GRAB::GRAB.ReadGeno
library(GRAB)
?GRAB::GRAB.ReadGeno
library(GRAB)
?GRAB::GRAB.ReadGeno
library(GRAB)
?GRAB::GRAB.ReadGeno
library(GRAB)
?GRAB::GRAB.ReadGeno
library(GRAB)
library(GRAB)
?GRAB::GRAB.ReadGeno
library(GRAB)
?GRAB::GRAB.ReadGeno
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(PlinkFile)
head(GenoMat)
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
library(GRAB)
?GRAB.ReadGeno
bimFile = system.file("example.bim", "GRAB")
bimFile
bimFile = system.file("extdata", "example.bim", package = "GRAB")
bimFile
markerInfo = data.table::fread(bimFile)
head(markerInfo)
class(markerInfo)
markerInfo = data.table::fread(bimFile)
markerInfo = as.data.frame(markerInfo)
markerInfo = markerInfo[,-3]
colnames(markerInfo) = c("CHROM", "POS", "ID", "REF", "ALT")
head(markerInfo)
2^8
2^16
a=matrix(1:12,3,4)
a[1,drop=F]
a[1,,drop=F]
library(GRAB)
?GRAB.ReadGeno
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(PlinkFile)
library(GRAB)
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(PlinkFile)
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoMat = GRAB:::setGenoInput(PlinkFile)
GenoMat
GenoMat$markerInfo
markerInfo = GenoMat$markerInfo
markerInfo
markerInfo = markerInfo[1:min(10,nrow(markerInfo)),]
markerInfo
MarkerIDs = markerInfo$ID
bimFile
markerInfo = data.table::fread(bimFile)
markerInfo = as.data.frame(markerInfo)
head(markerInfo)
library(GRAB)
?GRAB.ReadGeno
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(PlinkFile)
head(GenoMat)
bgiFile = system.file("extdata", "example_bgen_1.2_8bits.bgen.bgi", package = "GRAB")
bgiFile
db_con <- RSQLite::dbConnect(RSQLite::SQLite(), bgiFile)
on.exit(RSQLite::dbDisconnect(db_con), add = TRUE)
bgiData = dplyr::tbl(db_con, "Variant")
bgiData
bgiData = as.data.frame(bgiData)
head(bgiData)
bimData = system.file("extdata", "example.bim", "GRAB")
head(bimData)
bimData = system.file("extdata", "example.bim", package="GRAB")
bimData
data.table::fread(bimData)
bgenFile
bgiFile
bgenFile = "C:/Users/wenji/OneDrive/Documents/R/win-library/3.6/GRAB/extdata/example_bgen_1.2_8bits.bgen"
bgenFile
con = file(bgenFile, "rb")
seek(con, 4)
LH = readBin(con, n = 1, what = "integer", size = 4)
seek(con, 4 + LH + 4)
N = readBin(con, n = 1, what = "integer", size = 4)  # number of samples
LH
N
LS = readBin(con, n = 1, what = "integer", size = 2)
LS
sample = readChar(con, nchars = LS)
sample
library(GRAB)
?GRAB.ReadGeno
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(PlinkFile)
head(GenoMat)
library(GRAB)
library(BH)
?BH
devtools::install_github("zhanxw/seqminer")
Rcpp::sourceCpp('src/BGEN.cpp')
Rcpp::sourceCpp('src/BGEN.cpp')
library(GRAB)
library(GRAB)
?GRAB.ReadGeno
## The below is raw data
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
?GRAB.ReadGeno
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoFile = BGENFile
# If 'GenoFileIndex' is not given, we use the same prefix for 'bgen.bgi' file
GenoFileIndex = gsub("bgen$", "bgen.bgi", GenoFile)
bgiFile = GenoFileIndex[1]
db_con <- RSQLite::dbConnect(RSQLite::SQLite(), bgiFile)
on.exit(RSQLite::dbDisconnect(db_con), add = TRUE)
bgiData = dplyr::tbl(db_con, "Variant")
bgiData = as.data.frame(bgiData)
head(bgiData)
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
Rcpp::sourceCpp('~/test_DataFrame.cpp')
Rcpp::sourceCpp('~/test_DataFrame.cpp')
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
install.packages("rlang")
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
install.packages("glue")
install.packages("glue")
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("digest")
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("testthat")
install.packages("testthat")
library(devtools)
install_github("GeneticAnalysisinBiobanks/GRAB")
install.packages("fansi")
install.packages("fansi")
install_github("GeneticAnalysisinBiobanks/GRAB")
library(devtools)
install_github("GeneticAnalysisinBiobanks/GRAB")
library(GRAB)
library(GRAB)
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
q()
q()
q()
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is for Plink format
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
## The below is for BGEN format
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
install.packages("~/Github/GRAB_0.0.1.tar.gz", repos = NULL, type = "source")
