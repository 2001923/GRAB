i = indexChunk+1
region = RegionList[[i]]
regionID = region$regionID
regionInfo = region$regionInfo
print(regionID)
print(head(regionInfo))
print(head(markerInfo))
regionInfo = markerInfo %>%
select(ID, genoIndex) %>%
merge(regionInfo, by = "ID") %>%
arrange(genoIndex) %>%
filter(Annos %in% allAnno)
nMarkers = nrow(regionInfo)
if(nMarkers == 0)
stop("nrow(regionInfo) == 0: no markers are found for region '", regionID, "'.")
genoIndex = regionInfo$genoIndex
weightVec = regionInfo$Weights
if(all(is.na(weightVec))){
weightExists = F
weightVec = rep(1, nMarkers)
}else{
if(any(is.na(weightVec) | weightVec <= 0))
stop("The provided marker weights cannot be non-positive (<= 0) or NA.")
}
print(paste0("Analyzing Region of ", regionID, " (",i,"/",nRegions,")."))
print(paste(regionInfo$ID, collapse = ", "))
with(control,
setRegion_GlobalVarsInCPP(impute_method,
missing_cutoff,
max_maf_region,
min_mac_region,
max_markers_region,
omp_num_threads))
# textToParse = paste0("obj.setRegion = setRegion.", method, "(objNull, control, chrom, SparseGRMFile)")
# eval(parse(text = textToParse))
subjLabel = rep(0, n)  # 2022-04-27: give labels to each subject (e.g. 0 for control and 1 for case), to be extended later. Start from 0.
nLabel = max(subjLabel) + 1
obj.mainRegionInCPP = mainRegionInCPPcheck(method, genoType, genoIndex, weightVec, OutputFile, subjLabel, nLabel)
print(summary(obj.mainRegionInCPP))
# table(obj.mainRegionInCPP$GVecURV)
table(obj.mainRegionInCPP$MACVec)
summary(obj.mainRegionInCPP$MAFVec)
table(obj.mainRegionInCPP$indicatorVec)
?table
# table(obj.mainRegionInCPP$GVecURV)
table(obj.mainRegionInCPP$MACVec, useNA = "always")
table(obj.mainRegionInCPP$indicatorVec, useNA = "always")
table(obj.mainRegionInCPP$GVecURV, useNA = "always")
# table(obj.mainRegionInCPP$GVecURV)
table(obj.mainRegionInCPP$MACVec, useNA = "always")
which(is.na(obj.mainRegionInCPP$MACVec))
posNA = which(is.na(obj.mainRegionInCPP$MACVec))
obj.mainRegionInCPP$infoVec[posNA]
obj.mainRegionInCPP$missingRateVec[posNA]
IDsToIncludeFile = system.file("extdata", "example.IDsToIncludeFile.txt", package = "GRAB")
IDsToInclude = data.frame(IDs = c("4:56343643:D:2","4:56354102:D:1"))
data.table::fwrite(IDsToInclude, IDsToIncludeFile,
quote = F, col.names = F, row.names = F, sep = "\t")
GenoFile = "/data1/UK_Biobank/ukb23155_b0_v1_s200604/SimulationUsingWES/Relatedness/nSub_50000_nFam_5000.bed"
Geno = GRAB.ReadGeno(GenoFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
# GenoFile = "/data1/UK_Biobank/ukb23155_b0_v1_s200604/SimulationUsingWES/Relatedness/nSub_50000_nFam_5000.bed"
GenoFile = "nSub_50000_nFam_5000.bed"
Geno = GRAB.ReadGeno(GenoFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
summary(Geno)
Geno$markerInfo
summary(Geno$GenoMat)
head(Geno$GenoMat)
summary(obj.mainRegionInCPP$missingRateVec)
summary(obj.mainRegionInCPP$MAFVec)
# table(obj.mainRegionInCPP$GVecURV)
table(obj.mainRegionInCPP$MACVec, useNA = "always")
table(obj.mainRegionInCPP$GVecURV, useNA = "always")
with(obj.mainRegionInCPP,
cbind(MAFVec, MACVec))
with(obj.mainRegionInCPP,
cbind(MAFVec, MACVec)) %>% head()
with(obj.mainRegionInCPP,
cbind(MAF = MAFVec, MAC = MACVec)) %>% head()
with(obj.mainRegionInCPP,
data.frame(MAF = MAFVec, MAC = MACVec)) %>% head()
with(obj.mainRegionInCPP,
data.frame(MAF = MAFVec, MAC = MACVec)) %>% filter(MAF > 0.3)
library(GRAB)
# install.packages("/home/wenjianb/POLMM-GENE/POLMM-package/GRAB_0.0.2.7.tar.gz", repos = NULL, type = "source")
library(GRAB)
# source("/home/wenjianb/POLMM-GENE/Simulation-T1E/check-step2-subfunc.R")
setwd("Y:/POLMM-GENE/Simulation-T1E/testData")
# load("/data1/users/wenjianb/POLMM-GENE/Simulation-T1E/step1_2022-04-20/nSub_50000_nFam_5000_sigma_1_pEachGroup_1,1,1/rep-1.RData")
load("rep-1.RData")
objNull = objNULL;
# GenoFile = "/data1/UK_Biobank/ukb23155_b0_v1_s200604/SimulationUsingWES/Relatedness/nSub_50000_nFam_5000.bed"
GenoFile = "nSub_50000_nFam_5000.bed"
GenoFileIndex = NULL
# GroupFile = "/data1/UK_Biobank/ukb23155_b0_v1_s200604/SimulationUsingWES/GeneLevelGenotype.group"
GroupFile = "GeneLevelGenotype.group"
OutputFile = "/data1/users/wenjianb/POLMM-GENE/Simulation-T1E/step2_2022-04-25/nSub_50000_nFam_5000_sigma_1_pEachGroup_1,1,1/rep-1.txt"
OutputFile = "rep-1.txt"
OutputFileIndex = NULL
control = NULL
MaxMAFVec = c(0.01, 0.001)
annoVec = c("stoploss:nonframeshift insertion:nonsynonymous SNV",
"stoploss:nonframeshift insertion:nonsynonymous SNV:synonymous SNV:frameshift deletion:nonframeshift deletion:frameshift insertion:stopgain:splicing:startloss")
chrom = "LOCO=F"
# SparseGRMFile = "/data1/Related_Subjects/Merged_150K_Members/SparseGRM/SparseGRM_0.05.txt";
SparseGRMFile = "SparseGRM_0.05.txt";
##############
NullModelClass = checkObjNull(objNull);  # Check "Util.R"
method = gsub("_NULL_Model", "", NullModelClass)
if(is.null(OutputFileIndex))
OutputFileIndex = paste0(OutputFile, ".index")
outList = checkOutputFile(OutputFile, OutputFileIndex, "Region",
nEachChunk = 1) # Check 'Util.R'
indexChunk = outList$indexChunk
Start = outList$Start
End = outList$End
if(End)
{
message = paste0("The analysis has been completed in earlier analysis. Results have been saved in '", OutputFile, "'. ",
"If you want to change parameters and restart the analysis, please use another 'OutputFile'.")
cat(message)
return(message)
}
if(!Start){
message = paste0("Parts of analysis have been conducted based on the index file:\n",
OutputFileIndex,"\n",
"The analysis will be restarted from chunk:\t",indexChunk+1,"\n");
cat(message)
}
## Check "control.R": if the setting of control is not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
MaxMAF = max(MaxMAFVec)
if(MaxMAF > 0.05)
stop("Maximal value of 'MaxMAFVec' should be <= 0.05.")
control$max_maf_region = MaxMAF
allAnno = annoVec %>%
strsplit(split = ":") %>%
unlist() %>%
unique()
subjData = as.character(objNull$subjData);
n = length(subjData)
# note on 2022-04-26: check it later
# Group = makeGroup(objNull$yVec)
# ifOutGroup = any(c("AltFreqInGroup", "AltCountsInGroup") %in% control$outputColumns)
## set up an object for genotype data
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # Check 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
## annotation in region
# RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
RegionList = getInfoGroupFile(GroupFile)
nRegions = length(RegionList)
i = indexChunk+1
region = RegionList[[i]]
regionID = region$regionID
regionInfo = region$regionInfo
print(regionID)
print(head(regionInfo))
print(head(markerInfo))
regionInfo = markerInfo %>%
select(ID, genoIndex) %>%
merge(regionInfo, by = "ID") %>%
arrange(genoIndex) %>%
filter(Annos %in% allAnno)
nMarkers = nrow(regionInfo)
if(nMarkers == 0)
stop("nrow(regionInfo) == 0: no markers are found for region '", regionID, "'.")
genoIndex = regionInfo$genoIndex
weightVec = regionInfo$Weights
if(all(is.na(weightVec))){
weightExists = F
weightVec = rep(1, nMarkers)
}else{
if(any(is.na(weightVec) | weightVec <= 0))
stop("The provided marker weights cannot be non-positive (<= 0) or NA.")
}
print(paste0("Analyzing Region of ", regionID, " (",i,"/",nRegions,")."))
print(paste(regionInfo$ID, collapse = ", "))
with(control,
setRegion_GlobalVarsInCPP(impute_method,
missing_cutoff,
max_maf_region,
min_mac_region,
max_markers_region,
omp_num_threads))
textToParse = paste0("obj.setRegion = setRegion.", method, "(objNull, control, chrom, SparseGRMFile)")
eval(parse(text = textToParse))
subjLabel = rep(0, n)  # 2022-04-27: give labels to each subject (e.g. 0 for control and 1 for case), to be extended later. Start from 0.
nLabel = max(subjLabel) + 1
obj.mainRegionInCPP = mainRegionInCPPcheck(method, genoType, genoIndex, weightVec, OutputFile, subjLabel, nLabel)
print(summary(obj.mainRegionInCPP))
data0 = with(obj.mainRegionInCPP,
data.frame(infoVec = infoVec,
missingRateVec = missingRateVec,
altFreqVec = altFreqVec,
MACVec = MACVec,
MAFVec = MAFVec,
altBetaVec = altBetaVec,
seBetaVec = seBetaVec,
pval0Vec = pval0Vec,
pval1Vec = pval1Vec,
indicatorVec = indicatorVec))
data0
data0 = with(obj.mainRegionInCPP,
data.table::data.table(infoVec = infoVec,
missingRateVec = missingRateVec,
altFreqVec = altFreqVec,
MACVec = MACVec,
MAFVec = MAFVec,
altBetaVec = altBetaVec,
seBetaVec = seBetaVec,
pval0Vec = pval0Vec,
pval1Vec = pval1Vec,
indicatorVec = indicatorVec))
data0
obj.mainRegionInCPP$VarMat[1:10,1:10]
print(summary(obj.mainRegionInCPP))
sqrt(9409)
print(dim(VarMat))
VarMat = obj.mainRegionInCPP$VarMat
print(dim(VarMat))
table(data0$indicatorVec.V1)
GVecURV = obj.mainRegionInCPP$GVecURV
table(GVecURV)
?GRAB.Region
control
# control = NULL
control = list(max_markers_region = 10)
with(control,
setRegion_GlobalVarsInCPP(impute_method,
missing_cutoff,
max_maf_region,
min_mac_region,
max_markers_region,
omp_num_threads))
control = checkControl.Region(control, NullModelClass)
MaxMAF = max(MaxMAFVec)
if(MaxMAF > 0.05)
stop("Maximal value of 'MaxMAFVec' should be <= 0.05.")
control$max_maf_region = MaxMAF
library(GRAB)
library(GRAB)
# source("/home/wenjianb/POLMM-GENE/Simulation-T1E/check-step2-subfunc.R")
setwd("Y:/POLMM-GENE/Simulation-T1E/testData")
# load("/data1/users/wenjianb/POLMM-GENE/Simulation-T1E/step1_2022-04-20/nSub_50000_nFam_5000_sigma_1_pEachGroup_1,1,1/rep-1.RData")
load("rep-1.RData")
objNull = objNULL;
# GenoFile = "/data1/UK_Biobank/ukb23155_b0_v1_s200604/SimulationUsingWES/Relatedness/nSub_50000_nFam_5000.bed"
GenoFile = "nSub_50000_nFam_5000.bed"
GenoFileIndex = NULL
# GroupFile = "/data1/UK_Biobank/ukb23155_b0_v1_s200604/SimulationUsingWES/GeneLevelGenotype.group"
GroupFile = "GeneLevelGenotype.group"
OutputFile = "/data1/users/wenjianb/POLMM-GENE/Simulation-T1E/step2_2022-04-25/nSub_50000_nFam_5000_sigma_1_pEachGroup_1,1,1/rep-1.txt"
OutputFile = "rep-1.txt"
OutputFileIndex = NULL
MaxMAFVec = c(0.01, 0.001)
annoVec = c("stoploss:nonframeshift insertion:nonsynonymous SNV",
"stoploss:nonframeshift insertion:nonsynonymous SNV:synonymous SNV:frameshift deletion:nonframeshift deletion:frameshift insertion:stopgain:splicing:startloss")
chrom = "LOCO=F"
# SparseGRMFile = "/data1/Related_Subjects/Merged_150K_Members/SparseGRM/SparseGRM_0.05.txt";
SparseGRMFile = "SparseGRM_0.05.txt";
# control = NULL
control = list(max_markers_region = 50)
##############
NullModelClass = checkObjNull(objNull);  # Check "Util.R"
method = gsub("_NULL_Model", "", NullModelClass)
if(is.null(OutputFileIndex))
OutputFileIndex = paste0(OutputFile, ".index")
outList = checkOutputFile(OutputFile, OutputFileIndex, "Region",
nEachChunk = 1) # Check 'Util.R'
indexChunk = outList$indexChunk
Start = outList$Start
End = outList$End
if(End)
{
message = paste0("The analysis has been completed in earlier analysis. Results have been saved in '", OutputFile, "'. ",
"If you want to change parameters and restart the analysis, please use another 'OutputFile'.")
cat(message)
return(message)
}
if(!Start){
message = paste0("Parts of analysis have been conducted based on the index file:\n",
OutputFileIndex,"\n",
"The analysis will be restarted from chunk:\t",indexChunk+1,"\n");
cat(message)
}
## Check "control.R": if the setting of control is not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
MaxMAF = max(MaxMAFVec)
if(MaxMAF > 0.05)
stop("Maximal value of 'MaxMAFVec' should be <= 0.05.")
control$max_maf_region = MaxMAF
allAnno = annoVec %>%
strsplit(split = ":") %>%
unlist() %>%
unique()
subjData = as.character(objNull$subjData);
n = length(subjData)
# note on 2022-04-26: check it later
# Group = makeGroup(objNull$yVec)
# ifOutGroup = any(c("AltFreqInGroup", "AltCountsInGroup") %in% control$outputColumns)
## set up an object for genotype data
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # Check 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
RegionList = getInfoGroupFile(GroupFile)
nRegions = length(RegionList)
i = indexChunk+1
region = RegionList[[i]]
regionID = region$regionID
regionInfo = region$regionInfo
print(regionID)
print(head(regionInfo))
print(head(markerInfo))
regionInfo = markerInfo %>%
select(ID, genoIndex) %>%
merge(regionInfo, by = "ID") %>%
arrange(genoIndex) %>%
filter(Annos %in% allAnno)
nMarkers = nrow(regionInfo)
if(nMarkers == 0)
stop("nrow(regionInfo) == 0: no markers are found for region '", regionID, "'.")
genoIndex = regionInfo$genoIndex
weightVec = regionInfo$Weights
if(all(is.na(weightVec))){
weightExists = F
weightVec = rep(1, nMarkers)
}else{
if(any(is.na(weightVec) | weightVec <= 0))
stop("The provided marker weights cannot be non-positive (<= 0) or NA.")
}
print(paste0("Analyzing Region of ", regionID, " (",i,"/",nRegions,")."))
print(paste(regionInfo$ID, collapse = ", "))
with(control,
setRegion_GlobalVarsInCPP(impute_method,
missing_cutoff,
max_maf_region,
min_mac_region,
max_markers_region,
omp_num_threads))
textToParse = paste0("obj.setRegion = setRegion.", method, "(objNull, control, chrom, SparseGRMFile)")
eval(parse(text = textToParse))
subjLabel = rep(0, n)  # 2022-04-27: give labels to each subject (e.g. 0 for control and 1 for case), to be extended later. Start from 0.
nLabel = max(subjLabel) + 1
RegionList = getInfoGroupFile(GroupFile)
nRegions = length(RegionList)
i = indexChunk+1
region = RegionList[[i]]
regionID = region$regionID
regionInfo = region$regionInfo
print(regionID)
print(head(regionInfo))
print(head(markerInfo))
regionInfo = markerInfo %>%
select(ID, genoIndex) %>%
merge(regionInfo, by = "ID") %>%
arrange(genoIndex) %>%
filter(Annos %in% allAnno)
nMarkers = nrow(regionInfo)
if(nMarkers == 0)
stop("nrow(regionInfo) == 0: no markers are found for region '", regionID, "'.")
genoIndex = regionInfo$genoIndex
weightVec = regionInfo$Weights
if(all(is.na(weightVec))){
weightExists = F
weightVec = rep(1, nMarkers)
}else{
if(any(is.na(weightVec) | weightVec <= 0))
stop("The provided marker weights cannot be non-positive (<= 0) or NA.")
}
print(paste0("Analyzing Region of ", regionID, " (",i,"/",nRegions,")."))
print(paste(regionInfo$ID, collapse = ", "))
with(control,
setRegion_GlobalVarsInCPP(impute_method,
missing_cutoff,
max_maf_region,
min_mac_region,
max_markers_region,
omp_num_threads))
textToParse = paste0("obj.setRegion = setRegion.", method, "(objNull, control, chrom, SparseGRMFile)")
eval(parse(text = textToParse))
subjLabel = rep(0, n)  # 2022-04-27: give labels to each subject (e.g. 0 for control and 1 for case), to be extended later. Start from 0.
nLabel = max(subjLabel) + 1
obj.mainRegionInCPP = mainRegionInCPPcheck(method, genoType, genoIndex, weightVec, OutputFile, subjLabel, nLabel)
print(summary(obj.mainRegionInCPP))
data0 = with(obj.mainRegionInCPP,
data.frame(infoVec = infoVec,
missingRateVec = missingRateVec,
MACVec = MACVec,
MAFVec = MAFVec,
BetaVec = BetaVec,
seBetaVec = seBetaVec,
pval0Vec = pval0Vec,
pval1Vec = pval1Vec,
indicatorVec = indicatorVec))
data0 = with(obj.mainRegionInCPP,
data.frame(infoVec = infoVec,
missingRateVec = missingRateVec,
altFreqVec = altFreqVec,
MACVec = MACVec,
MAFVec = MAFVec,
StatVec = StatVec,
altBetaVec = altBetaVec,
seBetaVec = seBetaVec,
pval0Vec = pval0Vec,
pval1Vec = pval1Vec,
indicatorVec = indicatorVec))
data.table::as.data.table(data0)
print(summary(obj.mainRegionInCPP))
VarMat1 = obj.mainRegionInCPP$VarMat
# VarMat1 = obj.mainRegionInCPP$VarMat
obj1 = obj.mainRegionInCPP
source("Y:/POLMM-GENE/Simulation-T1E/check-step2.R")
all(obj1$VarMat == obj2$VarMat)
summary(obj1$VarMat - obj2$VarMat)
summary(as.numeric(obj1$VarMat - obj2$VarMat))
obj1$VarMat[1:10,1:10]
obj2$VarMat[1:10,1:10]
obj1$VarMat[90:98,90:98]
obj2$VarMat[90:98,90:98]
summary(as.numeric(obj1$VarMat - obj2$VarMat))
plot(as.numeric(obj1$VarMat - obj2$VarMat))
which(as.numeric(obj1$VarMat - obj2$VarMat) > 0.01)
print(dim(obj1$VarMat))
which(as.numeric(obj1$VarMat - obj2$VarMat) > 0.01) %% 98
which(as.numeric(obj1$VarMat - obj2$VarMat) > 0.01) %/% 98
source("Y:/POLMM-GENE/Simulation-T1E/check-step2.R")
plot(as.numeric(obj1$VarMat - obj2$VarMat))
plot(as.numeric(obj1$VarMat - obj3$VarMat))
plot(as.numeric(obj2$VarMat - obj3$VarMat))
#
which(abs(as.numeric(obj1$VarMat - obj2$VarMat)) > 0.01)
data.table::as.data.table(data0)
plot(as.numeric(obj1$VarMat - obj2$VarMat))
plot(as.numeric(obj1$VarMat - obj3$VarMat))
plot(as.numeric(obj2$VarMat - obj3$VarMat))
plot(as.numeric(obj1$VarMat - obj3$VarMat))
plot(as.numeric(obj2$VarMat - obj3$VarMat))
#
which(abs(as.numeric(obj1$VarMat - obj2$VarMat)) > 0.01)
#
pos = which(abs(as.numeric(obj1$VarMat - obj2$VarMat)) > 0.01)
obj1VarMat[pos]
obj1$VarMat[pos]
obj2$VarMat[pos]
oba1$VarMat[1:10,1:10]
obj1$VarMat[1:10,1:10]
obj2$VarMat[1:10,97:98]
obj3$VarMat[1:10,97:98]
plot(obj2$VarMat[1:10,97] - obj3$VarMat[1:10,97] )
summary(obj2$VarMat[1:10,97] - obj3$VarMat[1:10,97] )
summary(obj2$VarMat[1:10,98] - obj3$VarMat[1:10,98] )
plot(obj2$VarMat[1:10,98] - obj3$VarMat[1:10,98] )
plot(obj2$VarMat[,97] - obj3$VarMat[,97] )
plot(obj2$VarMat[,98] - obj3$VarMat[,98] )
summary(obj2$VarMat[,97] - obj3$VarMat[,97] )
summary(obj2$VarMat[,98] - obj3$VarMat[,98] )
obj2$VarMat[98,98]
obj3$VarMat[98,98]
summary(abs(obj2$VarMat[,98] - obj3$VarMat[,98]) )
source("Y:/POLMM-GENE/Simulation-T1E/check-step2.R")
plot(obj2$VarMat[,98] - obj4$VarMat[,98])
plot(obj3$VarMat[,98] - obj4$VarMat[,98])
plot(obj2$VarMat[,98] - obj4$VarMat[,98])
source("Y:/POLMM-GENE/Simulation-T1E/check-step2.R")
plot(obj3$VarMat[,98] - obj4$VarMat[,98])
plot(obj3$VarMat[,97] - obj4$VarMat[,97])
plot(obj3$VarMat[,98] - obj4$VarMat[,98])
plot(obj3$VarMat[,97] - obj4$VarMat[,97])
plot(obj3$VarMat[,96] - obj4$VarMat[,96])
plot(obj3$VarMat[1:96,96] - obj4$VarMat[1:96,96])
plot(obj3$VarMat[,96] - obj4$VarMat[,96])
plot(obj3$VarMat[,97] - obj4$VarMat[,97])
plot(obj3$VarMat[,98] - obj4$VarMat[,98])
plot(obj3$VarMat[,97] - obj4$VarMat[,97])
obj3$VarMat[3,97]
obj4$VarMat[3,97]
c(obj3$VarMat[3,97], obj4$VarMat[3,97])
c(obj3$VarMat[3,3], obj4$VarMat[3,3])
c(obj3$VarMat[97,97], obj4$VarMat[97,97])
c(obj3$VarMat[3,95], obj4$VarMat[3,95])
plot(c(obj3$VarMat[1:95,1:95], obj4$VarMat[1:95,1:95]))
plot(c(obj3$VarMat[1:95,1:95] - obj4$VarMat[1:95,1:95]))
plot(c(obj3$VarMat[1:95,96:97] - obj4$VarMat[1:95,96:97]))
plot(c(obj3$VarMat[3,96:97] - obj4$VarMat[3,96:97]))
plot(c(obj3$VarMat[3,96:97] - obj4$VarMat[3,96:97]))
plot(obj3$VarMat[1:97,1:97])
plot(as.numeric(obj3$VarMat[1:97,1:97]))
plot(diag(obj3$VarMat[1:97,1:97]))
plot(offdiag(obj3$VarMat[1:97,1:97]))
c(obj3$VarMat[3,95], obj4$VarMat[3,95])
c(obj3$VarMat[3,97], obj4$VarMat[3,97])
c(obj3$VarMat[97,3], obj4$VarMat[97,3])
data.table::as.data.table(data0)
50e4 * 50e4 * 8 /1024^3
50e4 * 50e4 * 4 /1024^3
library(GRAB)
library(GRAB)
225768/38192
2257。68/38192
2257.68/38192
2257.68/(38192-2298)
2257.68/(38192-10000)
2257.68/(26667)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
