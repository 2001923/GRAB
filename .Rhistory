GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
?GRAB.Marker
# Simulation phenotype and genotype
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
names(obj.SPACox)
library(GRAB)
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
GRAB.Marker()
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
library(GRAB)
?GRAB.Marker
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
out = GRAB.Marker(obj.SPACox, GenoFile, chrom=1)
head(out)
dim(out)
range(out$Freq)
obj.SPACox$Call
obj.SPACox$control
?GRAB.Marker
?data.frame
?coxph
library(GRAB)
?SPACox
library(survival)
?coxph.object
coxph.object
?coxph.object
?data.frame
?factor
?`survival-internal`
?gbsg
library(roxygen2)
?roxygen2::rd_section
rd_roclet()
library(GRAB)
?GRAB.SPACox
GRAB.SPACox()
library(GRAB)
?GRAB.SPACox
?GRAB.Marker
?GRAB.NullModel
?GRAB.Marker
library(GRAB)
?GRAB.Marker
library(GRAB)
?GRAB.Marker
?GRAB.NullModel
?GRAB.NullModel
?coxph
library(GRAB)
?GRAB.NullModel
?GRAB.SPACox
?SPACox::SPACox_Null_Model
library(GRAB)
?GRAB.SPACox
?SPACox::SPACox
library(GRAB)
?GRAB.SPACox
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
res.SPACox = GRAB.Marker(obj.SPACox, GenoFile)
head(res.SPACox)
library(GRAB)
?GRAB.SPACox
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
res.SPACox = GRAB.Marker(obj.SPACox, GenoFile)
head(res.SPACox)
library(GRAB)
?GRAB.SPACox
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
res.SPACox = GRAB.Marker(obj.SPACox, GenoFile)
head(res.SPACox)
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
library(GRAB)
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
library(GRAB)
?GRAB.ReadGeno
?GRAB.SPACox
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
library(GRAB)
?GRAB.ReadGeno
?GRAB.SPACox
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
N = 100
Pheno = data.frame(ID = paste0("f",1:N,"_1"),
event=rbinom(N,1,0.5),
time=runif(N),
Cov1=rnorm(N),
Cov2=rbinom(N,1,0.5))
obj.SPACox = GRAB.NullModel(survival::Surv(time,event)~Cov1+Cov2,
data=Pheno, subjData = Pheno$ID, method = "SPACox", GenoFile = GenoFile)
res.SPACox = GRAB.Marker(obj.SPACox, GenoFile)
head(res.SPACox)
library(GRAB)
n = rnorm(10)
y = rnorm(10)
x = rbinom(10)
x = rbinom(10,1)
x = rbinom(10,1,0.5)
formula = y~x
formula
?formula
data.matrix(formula)
?coxph
test1 <- list(time=c(4,3,1,1,2,2,3),
status=c(1,1,1,0,1,1,0),
x=c(0,2,1,1,1,0,0),
sex=c(0,0,0,0,1,1,1))
# Fit a stratified model
coxph(Surv(time, status) ~ x + strata(sex), test1)
library(survival)
y = Surv(time, status)
y = Surv(test1$time, test1$status)
head(y)
a=coxph(Surv(time, status) ~ x + strata(sex), test1)
a=model.frame(Surv(time, status) ~ x + strata(sex), test1)
a
class(a)
head(test1)
test1$time[3]=NA
a=model.frame(Surv(time, status) ~ x + strata(sex), test1)
a
a$na.action
?model.frame
as.numeric(rownames(a))
?model.frame
a$`strata(sex)`
a=get_all_vars(Surv(time, status) ~ x + strata(sex), test1)
a
model.frame
a=model.matrix(Surv(time, status) ~ x + strata(sex), test1)
a
names(a)
class(a)
?model.matrix
terms(a)
a=model.frame(Surv(time, status) ~ x + strata(sex), test1)
class(a)
a
?model.frame
formula="Surv(time, status) ~ x + strata(sex)"
formula
formula = Surv(time, status) ~ x + strata(sex)
names(formula)
formula.tools::get.vars(formula)
test2=model.frame(Surv(time, status) ~ x + strata(sex), test1)
test3=model.frame(Surv(time, status) ~ x + strata(sex), test2)
head(test2)
colnames(test2)
coxph
?model.response
test2
model.response(test2)
?model.response
model.extract(test2, "subset")
model.extract(test2, "data")
model.offset(test2)
?na.exclude
test2=model.matrix(Surv(time, status) ~ x + strata(sex), test1)
test2
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
}
n = 10
data = data.frame(y = rbinom(n, 1, 0.4),
x = rnorm(n))
handleFormula(y~x, data, x > 0)
source('~/Github/GRAB/R/formula.R', echo=TRUE)
?model.frame
?offset
source('~/Github/GRAB/R/formula.R', echo=TRUE)
data1$terms
mf = handleFormula(y~x, data, x > 0)
mt = attr(x = mf, which = "terms")
mt
x <- model.matrix(object = mt, data = mf, contrasts.arg = contrasts)
x
?model.matrix
x <- model.matrix(object = mt, data = mf)
x
mf
mf
mf
mt
?model.matrix
mf
class(mf)
attr(mf)
?attr
attr(x = mf, which="response")
model.response(mf)
response = model.response(mf)
names(response)
as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
dim(designMat)
designMat
colnames(designMat)
designMat = designMat[,-1,drop=F]
designMat
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] = "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
n = 20
y = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.3)
handleFormula(y~x1*x2+as.factor(x3), subset = x2>0)
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
n = 20
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.3)
handleFormula(event~x1*x2+as.factor(x3), subset = x2>0)
handleFormula(time~x1*x2+as.factor(x3), subset = x2>0)
handleFormula(survival::coxph(time,event)~x1*x2+as.factor(x3), subset = x2>0)
survival::coxph(time,event)
handleFormula(survival::Surv(time,event)~x1*x2+as.factor(x3), subset = x2>0)
handleFormula = function (formula, data, subset)  {
cl <- match.call()
mf <- match.call(expand.dots = FALSE)
m <- match(x = c("formula", "data", "subset"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
x <- model.matrix(object = mt, data = mf)
response = model.response(mf)
pos = as.numeric(names(response))
designMat = model.matrix(object = mt, data = mf)
if(colnames(designMat)[1] == "(Intercept)")
designMat = designMat[,-1,drop=F]
return(list(response = response,
pos = pos,
designMat = designMat))
}
n = 20
time = runif(n)
event = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.5)
handleFormula(event~x1*x2+as.factor(x3), subset = x2>=(-1))
handleFormula(time~x1*x2+as.factor(x3), subset = x2>=(-1))
handleFormula(survival::Surv(time,event)~x1*x2+as.factor(x3), subset = x2>=(-1))
survival::coxph(out$response ~ out$designMat)
out = handleFormula(survival::Surv(time,event)~x1*x2+as.factor(x3), subset = x2>=(-1))
survival::coxph(out$response ~ out$designMat)
?coxph
GFP.N.for.SAINT.3 <- read.csv("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/GFP-N for SAINT-3.csv", header=FALSE)
View(GFP.N.for.SAINT.3)
data=GFP.N.for.SAINT.3
duplicated(data[,1:3])
any(duplicated(data[,1:3]))
any(duplicated(data[,c(1,3)]))
any(duplicated(data[,c(1)]))
2442 / 22
N <- read.table("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N.csv", quote="\"", comment.char="")
View(N)
N.nature <- read.table("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N-nature.csv", quote="\"", comment.char="")
View(N.nature)
intersect(N$V1, N.nature$V1)
write.csv(intersect(N$V1, N.nature$V1), "C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/overlap.csv")
N <- read.csv("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N.csv", header=FALSE)
View(N)
N.nature <- read.csv("C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/N-nature.csv", header=FALSE)
View(N.nature)
colnames(N)=c("UniqName","NameInN")
colnames(N.nature)=c("UniqName","NameInNature")
overlap = merge(N, N.nature)
overlap
write.csv(overlap,"C:/Users/wenji/Dropbox/Wenjian-Peipei/N project 2021-1/overlap.csv",row.names = F)
Y:\POLMM-Gene\UKBB\2021-01-30-WES-200k-anno\combine
library(devtools)  # author version: 2.3.0
install_github("GeneticAnalysisinBiobanks/GRAB")
library(GRAB)
?GRAB.ReadGeno
?GRAB.SPACox
?GRAB.Marker
?GRAB.NullModel
library(GRAB)
?GRAB.ReadGeno
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoMat = GRAB.ReadGeno(GenoFile)
head(GenoMat)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GenoFile
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
dim(GenoMat)
head(GenoMat[,1:15])
