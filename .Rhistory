makePlink(GenoMat, outputPrefix)
indexMissing = sample(n*m, 0.1*n*m)
GenoMat[indexMissing] = -9
makePlink(GenoMat, outputPrefix)
?makePlink
?GRAB.ReadGeno
?makePlink
library(GRAB)
?makePlink
n = 1000
m = 20
MAF = 0.3
GenoMat = matrix(rbinom(n*m, 2, MAF), n, m)
rownames(GenoMat) = paste0("Subj-",1:n)
colnames(GenoMat) = paste0("SNP-",1:m)
outputDir = system.file("results", package = "GRAB")
outputPrefix = paste0(outputDir, "/simuPLINK")
### Step 2(a): make PLINK files without missing genotype
makePlink(GenoMat, outputPrefix)
indexMissing = sample(n*m, 0.1*n*m)
GenoMat[indexMissing] = -9
makePlink(GenoMat, outputPrefix)
set.seed(123)
n = 20
subjData = paste0("ID-",1:n)
pheno = rbinom(n, 1, 0.5)
x1 = rnorm(n)
x2 = rnorm(n)
x3 = rbinom(n, 2, 0.5)
objFormula = handleFormula(pheno ~ x1+x2*x3, subset = x2>0, subjData = subjData)
objFormula
library(GRAB)
?GRAB.ReadGeno
?makePlink
Null
NULL
?makePlink
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
getVersionFromBGEN(BGENFile)
?getTempFilesFullGRM
?GRAB.Marker
?GRAB.Marker
?GRAB.NullModel
?SKAT
?GRAB.Marker
?GRAB.NullModel
?GRAB.Marker
library(GRAB)
?GRAB.Marker
library(GRAB)
library(GRAB)
?GRAB.Marker
library(GRAB)
?GRAB.Marker
library(GRAB)
library(GRAB)
?GRAB.Marker
?GRAB.Marker
library(GRAB)
?GRAB.Marker
library(GRAB)
?GRAB.Marker
library(GRAB)
?GRAB.Marker
?GRAB.Region
?GRAB.Region
library(GRAB)
?GRAB.Region
?GRAB.Region
library(GRAB)
?GRAB.Region
?SKAT
?GRAB.Region
12899+680+260+1299
sum(c(14499.00, 999.00, 299.00, 1399.00))
16299 * 0.97
library(GRAB)
?GRAB.Region
library(GRAB)
?GRAB.Region
library(GRAB)
?GRAB.Region
sum(c(12899.00, 680.00, 260.00, 1299.00))
sum(c(12249.00, 680.00, 260.00, 1299.00))
12.5*7
14300+2680
14300 + 2680
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
?GRAB.Marker
?GRAB.ReadGeno
?GRAB.ReadGeno
?GRAB.ReadGeno
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
?GRAB.ReadGeno
?GRAB.Marker
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 2500
nFam = 250
FamMode = "10-members"
nSNP = 20
GenoMat = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
Sys.time()
cat(Sys.time())
print(Sys.time())
Sys.time()
example.fam.20.members = function(n.fam)           # family numbers
{
m = 20  # family members in each family
fam.mat = c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",8),
rep("Offspring",12))
Source1 = c(paste0("haplo-",c.h+1:8),
IID[c(1,1,3,3,4,4,5,5,6,7,8,8)])
Source2 = c(paste0("haplo-",c.h+9:16),
IID[c(2,2,9,9,10,10,11,11,12,13,14,14)])
c.h = c.h+16
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
### an example of family structure including 10 memebers in each family
## 1+2->5+6; 3+5->7+8; 4+6->9+10
example.fam.10.members = function(n.fam)           # family numbers
{
m = 10  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",4),
rep("Offspring",6))
Source1 = c(paste0("haplo-",c.h+1:4),
IID[c(1,1,3,3,4,4)])
Source2 = c(paste0("haplo-",c.h+5:8),
IID[c(2,2,5,5,6,6)])
c.h = c.h+8
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.10.members()
example.fam.10.members(1)
?runif
nFam=2
fam.mat = example.fam.10.members(nFam)
head(fam.mat)
fam.mat
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 2500
nFam = 250
FamMode = "10-members"
nSNP = 20
GenoMat = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
dim(GenoMat)
head(GenoMat)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 2500
nFam = 250
FamMode = "10-members"
nSNP = 20
GenoMat = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
SNP.info = make.SNP.info(nSNP, MAF)
MAF = runif(nSNP, MinMAF, MaxMAF)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 2500
nFam = 250
FamMode = "10-members"
nSNP = 20
GenoMat = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
dim(GenoMat)
head(GenoMat)
tail(GenoMat)
dim(GenoMat)
apply(GenoMat, 2, mean)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 2500
nFam = 250
FamMode = "10-members"
nSNP = 20
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
MAF = apply(GenoMat, 2, mean)/2
head(MAF)
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD)
dim(GRM)
GRM1 = GenoMat[1:10, 1:10];
GRM2 = GenoMat[2500+1:10, 2500+1:10];
GRM1
GRM2
library(GRAB)
?GRAB.SimuGMatCommon
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 250
nFam = 25
FamMode = "10-members"
nSNP = 1000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[2500+1:10, 2500+1:10];
GRM1
GRM2
GRM2 = GRM[250+1:10, 250+1:10];
GRM2
nSNP = 5000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
## The following is to calculate GRM
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[250+1:10, 250+1:10]
GRM1
GRM2
dim(GenoMat)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 100
nFam = 10
FamMode = "10-members"
nSNP = 10000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
## The following is to calculate GRM
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[100+1:10, 100+1:10];
GRM1
GRM2
example.fam.10.members = function(n.fam)           # family numbers
{
m = 10  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",4),
rep("Offspring",6))
Source1 = c(paste0("haplo-",c.h+1:4),
IID[c(1,1,3,3,4,4)])
Source2 = c(paste0("haplo-",c.h+5:8),
IID[c(2,2,5,5,6,6)])
c.h = c.h+8
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.10.members(1)
example.fam.10.members = function(n.fam)           # family numbers
{
m = 4  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",2),
rep("Offspring",2))
Source1 = c(paste0("haplo-",c.h+1:2),
IID[c(1,1)])
Source2 = c(paste0("haplo-",c.h+3:4),
IID[c(2,2)])
c.h = c.h+4
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.4.members = function(n.fam)           # family numbers
{
m = 4  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",2),
rep("Offspring",2))
Source1 = c(paste0("haplo-",c.h+1:2),
IID[c(1,1)])
Source2 = c(paste0("haplo-",c.h+3:4),
IID[c(2,2)])
c.h = c.h+4
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.4.members(1)
example.fam.4.members(2)
example.fam.4.members(1)
example.fam.10.members(1)
example.fam.20.members(1)
example.fam.10.members(1)
source("D:/Github/GRAB/R/GRAB_Simu.R")
example.fam.10.members(1)
example.fam.20.members(1)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 100
nFam = 10
FamMode = "10-members"
nSNP = 10000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
## The following is to calculate GRM
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[100+1:10, 100+1:10];
GRM1
GRM2
library(GRAB)
?GRAB.SimuGMatCommon
?makePlink
library(GRAB)
?GRAB.SimuGMatCommon
?glm
library(GRAB)
?GRAB.SimuGMatCommon
?GRAB.SimuGMatCommon
?GRAB.SimuGMatCommon
?GRAB.ReadGeno
?GRAB.ReadGeno
?makePlink
?makePlink
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "simuRAW", package = "GRAB")
RawFile
system.file("extdata", package = "GRAB")
RawFile = system.file("extdata", "simuRAW.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
dim(GenoMat)
GenoMat[1:10,1:10]
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE)) # If include/exclude files are not specified, then control$AllMarker should be TRUE
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat[,1:6])
head(markerInfo)
benchmark = read.table("D:/DepNet/ew12.PubMed.gene_bcscore_noNA.tsv")
rm(list=ls())
benchmark = read.table("D:/DepNet/ew12.PubMed.gene_bcscore_noNA.tsv")
HotNet2Mentha = read.table("D:/DepNet/HotNet2/mentha")
HotNet2Mentha
head(HotNet2Mentha)
plot(HotNet2Mentha$V2)
range(HotNet2Mentha$V2)
head(benchmark)
colnames(benchmark) = c("GENE", "ID", "ORDER", "Score.benchmark", "Pvalue.benchmark")
colnames(HotNet2Mentha) = c("GENE", "Score.HotNet2Mentha")
merged = merge(benchmark, HotNet2Mentha)
head(merged)
layout(matrix(1:4,2,2))
plot(merged$Score.benchmark, merged$Score.HotNet2Mentha)
plot(merged$Pvalue.benchmark, merged$Score.HotNet2Mentha)
merged$zScore.benchmark = qnorm(pValues$Pvalue.benchmark / 2) * (-1) / 100
plot(merged$Score.benchmark, merged$zScore.benchmark)
merged$zScore.benchmark = qnorm(merged$Pvalue.benchmark / 2) * (-1) / 100
layout(matrix(1:4,2,2))
plot(merged$Score.benchmark, merged$Score.HotNet2Mentha)
plot(merged$Score.benchmark, merged$zScore.benchmark)
plot(merged$Score.benchmark, merged$Score.HotNet2Mentha)
plot(merged$zScore.benchmark, merged$Score.HotNet2Mentha)
plot(merged$Pvalue.benchmark, merged$Score.HotNet2Mentha)
head(merged)
merged = merged[order(merged$ORDER),]
head(merged)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1)
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1)
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep="\t ")
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep="[\t ]")
?fread
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep=" ")
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep2=" ")
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 2, sep=" ")
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 3, sep=" ")
head(network)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 3, sep=" ", header = F)
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 2, sep=" ", header = F)
network
network = gsub("\t", "", network)
network
head(merged)
merged1 = subset(merged, GENE %in% network)
plot(merged1$Score.benchmark, merged1$Pvalue.benchmark)
plot(merged1$Score.benchmark, -log10(merged1$Pvalue.benchmark))
library(ggplot2)
ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark)))
ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark))) + geom_point()
library(ggrepel)
ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
setwd("D:/DepNet/HotNet2/figures")
for(i in 1:500){
print(i)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv",
nrows = 1, skip = i+1, sep=" ", header = F)
network = gsub("\t", "", network)
merged1 = subset(merged, GENE %in% network)
p = ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
ggsave(paste0("network-",i), p, width = 5, height = 5)
}
for(i in 1:500){
print(i)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv",
nrows = 1, skip = i+1, sep=" ", header = F)
network = gsub("\t", "", network)
merged1 = subset(merged, GENE %in% network)
p = ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
ggsave(paste0("network-",i,".jpeg"), p, width = 5, height = 5)
}
setwd("D:/DepNet/HotNet2/figures")
for(i in 1:500){
print(i)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv",
nrows = 1, skip = i+1, sep=" ", header = F)
network = gsub("\t", "", network)
merged1 = subset(merged, GENE %in% network)
p = ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
# ggsave(paste0("network-",i,".jpeg"), p, width = 5, height = 5)
if(length(network) > 5)
ggsave(paste0("../figures-more-than-5/network-",i,".jpeg"), p, width = 5, height = 5)
}
head(benchmark)
plot(benchmark$Score.benchmark, -log10(benchmark$Pvalue.benchmark))
dev.off()
plot(benchmark$Score.benchmark, -log10(benchmark$Pvalue.benchmark))
table(benchmark$Score.benchmark > 0)
# FALSE  TRUE
# 6472 11596
subset(benchmark, GENE %in% c("TP53","PIK3CA","NOTCH"))
head(benchmark)
HotNet2Mentha = read.table("D:/DepNet/HotNet2/mentha")
dim(HotNet2Mentha)
head(HotNet2Mentha)
plot(merged$zScore.benchmark, merged$Score.HotNet2Mentha)
merged = merged[order(merged$ORDER),]
write.csv(merged, "merged.csv", row.names = F)
getwd()
library(devtools)  # author version: 0.0.9
install_github("YZ-Ma/EmpSPA")
sessionInfo()
library(EmpSPA)
?EmpSPA  # manual of EmpSPA package
?EmpSPA::EmpSPA_R_Null_Model
library(GRAB)
?GRAB.control
?getSparseGRM
SparseGRMFile = gsub("temp", "SparseGRM.txt", tempDir)
tempDir = system.file("SparseGRM", "temp", package = "GRAB")
SparseGRMFile = gsub("temp", "SparseGRM.txt", tempDir)
SparseGRMFile
data.table::fread(SparseGRMFile)
?GRAB.NullModel
?getSparseGRM
?GRAB.NullModel
?getSparseGRM
