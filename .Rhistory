GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
?GRAB.Region
library(GRAB)
?GRAB.POLMM
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
TRUE | FALSE | TRUE
TRUE | FALSE | TRUE
TRUE | FALSE |
TRUE
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
getwd()
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
OutputFile, quote = F, sep = "\t", append = F, col.names = F)
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile", quote = F, sep = "\t", append = F, col.names = F)
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile")
c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk")
Sys.getlocale()
Sys.setenv(LANG = "en_US")
Sys.getlocale()
a
b
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile")
write.table(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile")
write.table(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile", quote = F, sep = "\t", append = F, col.names = F, row.names = F)
getwd()
write.table(1,
"OutputFile", quote = F, sep = "\t", append = T, col.names = F, row.names = F)
write.table(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile", quote = F, sep = "\t", append = F, col.names = F, row.names = F)
write.table(1,
"OutputFile", quote = F, sep = "\t", append = T, col.names = F, row.names = F)
12:11
checkOutputFile = function(OutputFile,
OutputFileIndex,
AnalysisType,      ## "Marker" or "Region"
nEachChunk)
{
if(missing(OutputFile))
stop("Argument of 'OutputFile' is required.")
if(file.exists(OutputFile)){
if(!file.exists(OutputFileIndex)){
stop(paste0("'OutputFile' of '", OutputFile,
"' has existed. Please use another 'OutputFile' or remove the existing one."))
}
else{
outIndexData = read.table(OutputFileIndex)
if(outIndexData[1,1] != "GRAB.outIndex" |
outIndexData[2,1] != "Please_do_not_modify_this_file" |
outIndexData[3,1] != AnalysisType |
outIndexData[4,1] != nEachChunk)
stop(paste0("'OutputFileIndex' of '", OutputFileIndex,
"' is not as expected. Probably, it has been modified, which is not permitted. Please remove the existing file of 'OutputFileIndex'."))
outIndex = outIndexData[nrow(outIndexData), 1] + 1
warning(paste0("Based on 'OutputFile' and 'OutputFileIndex', we restart the analysis from the ", outIndex, "-th chunks."))
}
}else{
outIndex = 1;
}
return(outIndex)
}
checkOutputFile("OutputFile",
"OutputFileIndex",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
checkOutputFile("OutputFile",
"OutputFile",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
outIndexData = read.table("OutputFile")
outIndexData
outIndexData[1,1]
outIndexData[2,1]
checkOutputFile("OutputFile",
"OutputFile",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
checkOutputFile = function(OutputFile,
OutputFileIndex,
AnalysisType,      ## "Marker" or "Region"
nEachChunk)
{
if(missing(OutputFile))
stop("Argument of 'OutputFile' is required.")
if(file.exists(OutputFile)){
if(!file.exists(OutputFileIndex)){
stop(paste0("'OutputFile' of '", OutputFile,
"' has existed. Please use another 'OutputFile' or remove the existing one."))
}
else{
outIndexData = read.table(OutputFileIndex)
if(outIndexData[1,1] != "GRAB.outIndex" |
outIndexData[2,1] != "Please_do_not_modify_this_file" |
outIndexData[3,1] != AnalysisType |
outIndexData[4,1] != nEachChunk)
stop(paste0("'OutputFileIndex' of '", OutputFileIndex,
"' is not as expected. Probably, it has been modified, which is not permitted. Please remove the existing file of 'OutputFileIndex'."))
outIndex = as.numeric(outIndexData[nrow(outIndexData), 1]) + 1
warning(paste0("Based on 'OutputFile' and 'OutputFileIndex', we restart the analysis from the ", outIndex, "-th chunks."))
}
}else{
outIndex = 1;
}
return(outIndex)
}
checkOutputFile("OutputFile",
"OutputFile",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
library(GRAB)
library(GRAB)
1:10
as.data.frame(1:10)
data.frame(a=1,b=2)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
sessionInfo()
library(RcppArmadillo)
sessionInfo()
install.packages("Rcpp")
install.packages("RcppArmadillo")
library(GRAB)
remove.packages("GRAB", lib="~/R/win-library/4.1")
library(devtools)  # author version: 2.3.0, use install.packages("devtools") first
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"))  # The INSTALL_opts is required in Windows OS.
library(GRAB)
library(GRAB)
2661/8277
library(GRAB)
sessionInfo()
remove.packages("GRAB", lib="~/R/win-library/4.1")
library(GRAB)
library(SKAT)
?SKAT
is.numeric(c(0,2,3))
library(SKAT)
?SKAT
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
?SKAT
library(SKAT)
?SKAT
library(GRAB)
?SKAT
library(SKAT)
library(SKAT)
?SKAT
?rbeta
fmin(c(1,2,3),c(2,3,4))
fmax(c(1,2,3),c(2,3,4))
rmax(c(1,2,3),c(2,3,4))
pmax(c(1,2,3),c(2,3,4))
pmin(c(1,2,3),c(2,3,4))
?SKAT
?dbeta
dbeta(c(0.01), 1, 25)
dbeta(c(0.0001), 1, 25)
dbeta(c(0.01,0.0001), 1, 25)
pval.Region = data.frame(pval.SKATO = NULL,
pval.SKAT = NULL,
pval.Burden = NULL)
pval.Region
pval.Region = data.frame(Anno.Type = NULL
pval.SKATO = NULL,
pval.SKAT = NULL,
pval.Burden = NULL)
pval.Region = data.frame(Anno.Type = NULL,
pval.SKATO = NULL,
pval.SKAT = NULL,
pval.Burden = NULL)
pval.Region
colnames(pval.Region)
pval.Region = data.frame()
pval.Region
pval.Region = rbind.data.frame(pval.Region,data.frame(a=1,b=2))
pval.Region = rbind.data.frame(pval.Region,data.frame(a=1,b=2))
pval.Region = rbind.data.frame(pval.Region,data.frame(a=1,b=2))
pval.Region
info.Region = data.frame(c=3,d=4)
cbind.data.frame(pval.Region, info.Region)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
matrix(1:10,2,5)
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
insertVector(matrix(1:10,2,5), 0, c(0,0))
insertVector(matrix(1:10,2,5), 1, c(0,0))
insertVector(matrix(1:10,2,5), 2, c(0,0))
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
library(GRAB)
library(GRAB)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
objNull = obj.POLMM
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1")
# RegionAnnoHeader = NULL
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
# control = NULL
control = list(max_maf_region = 0.3)
GRAB.Region(objNull,
GenoFile,
GenoFileIndex,
OutputFile,
OutputFileIndex,
RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
RegionAnnoHeader,
SparseGRMFile,
control)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
objNull = obj.POLMM
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1")
# RegionAnnoHeader = NULL
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
# control = NULL
control = list(max_maf_region = 0.3)
GRAB.Region(objNull,
GenoFile,
GenoFileIndex,
OutputFile,
OutputFileIndex,
RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
RegionAnnoHeader,
SparseGRMFile,
control)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
objNull = obj.POLMM
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1")
# RegionAnnoHeader = NULL
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
# control = NULL
control = list(max_maf_region = 0.3)
GRAB.Region(objNull,
GenoFile,
GenoFileIndex,
OutputFile,
OutputFileIndex,
RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
RegionAnnoHeader,
SparseGRMFile,
control)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
objNull = obj.POLMM
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1")
# RegionAnnoHeader = NULL
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
# control = NULL
control = list(max_maf_region = 0.3)
GRAB.Region(objNull,
GenoFile,
GenoFileIndex,
OutputFile,
OutputFileIndex,
RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
RegionAnnoHeader,
SparseGRMFile,
control)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
objNull = obj.POLMM
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1")
# RegionAnnoHeader = NULL
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
# control = NULL
control = list(max_maf_region = 0.3)
GRAB.Region(objNull,
GenoFile,
GenoFileIndex,
OutputFile,
OutputFileIndex,
RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
RegionAnnoHeader,
SparseGRMFile,
control)
?GRAB.POLMM
library(GRAB)
?GRAB.POLMM
library(GRAB)
?GRAB.POLMM
library(GRAB)
?GRAB.POLMM
? GRAB.NullModel
data.table::fread(system.file("SparseGRM","SparseGRM.txt",package="GRAB"))
?GRAB.POLMM
?GRAB.POLMM
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
data.table::fread(RegionFile)
25000*12
?merge
data.table::merge()
data.table::merge.data.table()
?merge
library(data.table)
merge.data.table()
?duplicated
?merge
a=data.table(ID=1:10,ID2="a")
b=data.table(ID=2:11,ID3="b")
a
b
merge(a,b)
merge(a,b,by="ID",all.x=T)
285450.00 * 1.05
64*8
64*6
64*12
12*166937
14*166937
625099885568 / 1024^3
12522496 / 1024^3
setwd("D:/POLMM-GENE/UK Biobank")
output = data.table::fread("chr-1-anno.txt")
output$Region[1]
OR4F5.markers = output$pval1[1]
OR4F5.markers
colnames(output)
OR4F5.Info = output$Info[1]
OR4F5.AltFreq = output$AltFreq[1]
OR4F5.MissingRate = output$MissingRate[1]
OR4F5.Info
OR4F5.AltFreq
strsplit(output$Info[1], split = ",")
strsplit(output$AltFreq[1], split = ",")
OR4F5.AltFreq = as.numeric(strsplit(output$AltFreq[1], split = ","))
strsplit(output$AltFreq[1], split = ",")
as.numeric(unlist(strsplit(output$AltFreq[1], split = ",")))
OR4F5.MissingRate = as.numeric(unlist(output$MissingRate[1], split = ",")))
OR4F5.MissingRate = as.numeric(unlist(strsplit(output$MissingRate[1], split = ",")))
colnames(output)
OR4F5.Info = unlist(strsplit(output$Info[1], split = ","))
OR4F5.AltFreq = as.numeric(unlist(strsplit(output$AltFreq[1], split = ",")))
OR4F5.MissingRate = as.numeric(unlist(strsplit(output$MissingRate[1], split = ",")))
OR4F5.pval0 = as.numeric(unlist(strsplit(output$pval0[1], split = ",")))
OR4F5.pval1 = as.numeric(unlist(strsplit(output$pval1[1], split = ",")))
OR4F5 = cbind(OR4F5.Info,
OR4F5.AltFreq,
OR4F5.MissingRate,
OR4F5.pval0,
OR4F5.pval1)
head(OR4F5)
OR4F5 = cbind.data.frame(OR4F5.Info,
OR4F5.AltFreq,
OR4F5.MissingRate,
OR4F5.pval0,
OR4F5.pval1)
head(OR4F5)
hist(OR4F5$OR4F5.pval0)
hist(OR4F5$OR4F5.pval1)
hist(OR4F5$OR4F5.pval``)
hist(OR4F5$OR4F5.pval``)
hist(OR4F5$OR4F5.pval1)
plot(OR4F5$OR4F5.pval0, OR4F5$OR4F5.pval1)
line(x = c(0,1), y=c(0,1), col="red")
line(x = c(0,1), y=c(0,1), color="red")
line(x = c(0,1), y=c(0,1))
?lines
lines(x = c(0,1), y=c(0,1))
lines(x = c(0,1), y=c(0,1), color="red")
lines(x = c(0,1), y=c(0,1), color=2)
lines(x = c(0,1), y=c(0,1), color=1)
lines(x = c(0,1), y=c(0,1), color=3)
lines(x = c(0,1), y=c(0,1), col = 3)
?lines
?lines
lines(x = c(0,1), y=c(0,1), col = "red")
hist(OR4F5$OR4F5.pval0)
hist(OR4F5$OR4F5.pval0)
head(OR4F5)
OR4F5$OR4F5.pval0
OR4F5[which(is.na(OR4F5$OR4F5.pval0)),]
plot(OR4F5$OR4F5.pval0, OR4F5$OR4F5.pval1)
lines(x = c(0,1), y=c(0,1), col = "red")
table(is.na(OR4F5$OR4F5.pval1))
plot(OR4F5.AltFreq)
range(OR4F5.AltFreq)
table(OR4F5.AltFreq)
library(GRAB)
print(dim(matrix(0,2,2)))
library(GRAB)
?rbeta
is.null(list())
a=list()
length(a)
2*68288+9070+58069
(2*68288+9070+58069) * 1.05
(2*68288+9070+58069) / 0.95
12*16
2305964 / 1024
a=data.frame(aa=NULL, bb=NULL)
a
colnames(a)
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
44798500864 / 1024 / 1024
44798500864 / 1024 / 1024 / 1024
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
16099 / 1024
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testMemory.cpp")
gc();rm(list=ls());gc()
