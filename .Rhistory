GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
GenoFile
objNull = obj.POLMM
OutputFile = gsub(".bed$", ".region.output", GenoFile)
OutputFileIndex = NULL
NullModelClass = checkObjNull(objNull);  # this function is in "Util.R"
if(is.null(OutputFileIndex))
OutputFileIndex = paste0(OutputFile, ".index")
OutputFileIndex
OutputFile
checkOutputFile(OutputFile)              # this function is in 'Util.R'
NullModelClass
## check the setting of control, if not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
control = NULL
## check the setting of control, if not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
checkOutputFile(OutputFile)              # this function is in 'Util.R'
## check the setting of control, if not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
SampleIDs = as.character(objNull$SampleIDs);
SampleIDs
objNull$SampleIDs
nm = names(objNull)
nm
any(c("subjData", "N") %in% nm)
any(!c("subjData", "N") %in% nm)
subjData = as.character(objNull$subjData);
subjData
?GRAB.Marker
?GRAB.POLMM
## set up an object for genotype
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # this function is in 'Geno.R'
GenoFileIndex = NULL
## set up an object for genotype
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # this function is in 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
head(markerInfo)
dim(markerInfo)
genoType
RegionFile
?GRAB.Region
?GRAB.POLMM
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionFile
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = NULL
## annotation
RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(RegionList)
nRegions
RegionList
i=1
region = RegionList[[i]]
region
regionName = names(region)
SNP = region$SNP
regionMat = region$regionMat  # annotation values
genoIndex = region$genoIndex
chrom = region$chrom
head(genoIndex)
chrom
SNP
regionMat
regionName
print(paste0("Analyzing Region of ", regionName, "......"))
regionName
region
RegionList
region
RegionList[1]
region = RegionList[i]
names(region)
region = RegionList[i]
regionName = names(region)
SNP = region$SNP
regionMat = region$regionMat  # annotation values
genoIndex = region$genoIndex
chrom = region$chrom
regionName
SNP
region = RegionList[[i]]
regionName = names(RegionList)[i]
regionName
region
region = RegionList[[i]]
regionName = names(RegionList)[i]
SNP = region$SNP
regionMat = region$regionMat  # annotation values
genoIndex = region$genoIndex
chrom = region$chrom
print(paste0("Analyzing Region of ", regionName, "......"))
print(paste(SNP, collapse = ","))
print("This region includes ",paste(SNP, collapse = ","))
print(paste(SNP, collapse = ", "))
setRegion(NullModelClass, objNull, control, chrom)
control
NullModelClass
setRegion(NullModelClass, objNull, control, chrom)
control$omp_num_threads
control$max_mem_region
control$max_maf_region
setRegion_GlobalVarsInCPP(control$impute_method,
control$missing_cutoff,
control$max_maf_region,
control$max_mem_region,
control$omp_num_threads)
obj.setRegion = setRegion.POLMM(objNull, control, chrom)
chrom
control
objNull
if(objNull$control$LOCO){
if(!chrom %in% names(objNull$LOCOList))
stop("'chrom' should be in names(objNull$LOCOList).")
objCHR = objNull$LOCOList[[chrom]]
}else{
objCHR = objNull$LOCOList[["LOCO=F"]]
}
objNull$control$LOCO
flagSparseGRM = FALSE;
SPmatR.CHR = list(locations = matrix(c(0,0), 2, 1), values = 1)
printPCGInfo = FALSE
tolPCG = 0.001
maxiterPCG = 100;
setPOLMMobjInCPP(objCHR$muMat,
objCHR$iRMat,
objNull$Cova,
objNull$yVec,          # 0 to J-1
SPmatR.CHR,
objNull$tau,
printPCGInfo,
tolPCG,
maxiterPCG,
objCHR$VarRatio,
control$SPA_Cutoff,
flagSparseGRM)
names(objCHR)
names(objNull)
SPmatR.CHR
objNull$tau
printPCGInfo
tolPCG
maxiterPCG
objCHR$VarRatio
control$SPA_Cutoff
flagSparseGRM
control
## check the setting of control, if not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
library(GRAB)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
# GenoFile,
# GenoFileIndex = NULL,
# OutputFile,
# OutputFileIndex = NULL,
# RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
# RegionAnnoHeader = NULL,
objNull = obj.POLMM
OutputFile = gsub(".bed$", ".region.output", GenoFile)
OutputFileIndex = NULL
control = NULL
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = NULL
NullModelClass = checkObjNull(objNull);  # this function is in "Util.R"
if(is.null(OutputFileIndex))
OutputFileIndex = paste0(OutputFile, ".index")
checkOutputFile(OutputFile)              # this function is in 'Util.R'
## check the setting of control, if not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
subjData = as.character(objNull$subjData);
## set up an object for genotype
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # this function is in 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
## annotation
RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(RegionList)
# for(i in 1:nRegions){
i = 1
region = RegionList[[i]]
regionName = names(RegionList)[i]
SNP = region$SNP
regionMat = region$regionMat  # annotation values
genoIndex = region$genoIndex
chrom = region$chrom
print(paste0("Analyzing Region of ", regionName, "......"))
print(paste(SNP, collapse = ", "))
setRegion_GlobalVarsInCPP(control$impute_method,
control$missing_cutoff,
control$max_maf_region,
control$max_mem_region,
control$omp_num_threads)
obj.setRegion = setRegion.POLMM(objNull, control, chrom)
setRegion(NullModelClass, objNull, control, chrom)
system.file("SparseGRM","SparseGRM.txt",package="GRAB")
data.table::fread(system.file("SparseGRM","SparseGRM.txt",package="GRAB"))
library(GRAB)
install.packages("seqminer")
library(seqminer)
?seqminer::readPlinkToMatrixByIndex
fileName = system.file("plink/all.anno.filtered.extract.bed", package = "seqminer")
fileName = sub(fileName, pattern = ".bed", replacement = "")
sampleIndex = seq(3)
markerIndex =c(14, 36)
cfh <- readPlinkToMatrixByIndex(fileName, sampleIndex, markerIndex)
dim(cfh)
chf
cfh
fileName
sessionInfo()
gMat = GRAB::GRAB.ReadGeno(fileName, SampleIDs = c("NA12286","NA12341","NA12342"))
gMat = GRAB::GRAB.ReadGeno(paste0(fileName,".bed"), SampleIDs = c("NA12286","NA12341","NA12342"))
dim(gMat)
head(gMat$GenoMat)
gMat$markerInfo
cfh
?GRAB.ReadGeno
?GRAB.control
system.file("extdata", "IDsToInclude.txt", package = "GRAB")
system.file("extdata", "IDsToInclude.txt1", package = "GRAB")
system.file("extdata", "IDsToInclude1.txt", package = "GRAB")
system.file("extdata", "example.IDsToInclude1.txt", package = "GRAB")
system.file("extdata", "example.IDsToIncludeFile1.txt", package = "GRAB")
gMat = GRAB::GRAB.ReadGeno(paste0(fileName,".bed"), SampleIDs = c("NA12286","NA12341","NA12342"),control = list(IDsToIncludeFile="C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/extdata/example.IDsToIncludeFile1.txt"))
cfh
gMat
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
PlinkFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PlinkFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
?GRAB.Region
library(GRAB)
?GRAB.POLMM
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
TRUE | FALSE | TRUE
TRUE | FALSE | TRUE
TRUE | FALSE |
TRUE
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
getwd()
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
OutputFile, quote = F, sep = "\t", append = F, col.names = F)
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile", quote = F, sep = "\t", append = F, col.names = F)
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile")
c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk")
Sys.getlocale()
Sys.setenv(LANG = "en_US")
Sys.getlocale()
a
b
data.table::fwrite(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile")
write.table(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile")
write.table(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile", quote = F, sep = "\t", append = F, col.names = F, row.names = F)
getwd()
write.table(1,
"OutputFile", quote = F, sep = "\t", append = T, col.names = F, row.names = F)
write.table(c("GRAB.outIndex", "Please_do_not_modify_this_file.", "AnalysisType", "nEachChunk"),
"OutputFile", quote = F, sep = "\t", append = F, col.names = F, row.names = F)
write.table(1,
"OutputFile", quote = F, sep = "\t", append = T, col.names = F, row.names = F)
12:11
checkOutputFile = function(OutputFile,
OutputFileIndex,
AnalysisType,      ## "Marker" or "Region"
nEachChunk)
{
if(missing(OutputFile))
stop("Argument of 'OutputFile' is required.")
if(file.exists(OutputFile)){
if(!file.exists(OutputFileIndex)){
stop(paste0("'OutputFile' of '", OutputFile,
"' has existed. Please use another 'OutputFile' or remove the existing one."))
}
else{
outIndexData = read.table(OutputFileIndex)
if(outIndexData[1,1] != "GRAB.outIndex" |
outIndexData[2,1] != "Please_do_not_modify_this_file" |
outIndexData[3,1] != AnalysisType |
outIndexData[4,1] != nEachChunk)
stop(paste0("'OutputFileIndex' of '", OutputFileIndex,
"' is not as expected. Probably, it has been modified, which is not permitted. Please remove the existing file of 'OutputFileIndex'."))
outIndex = outIndexData[nrow(outIndexData), 1] + 1
warning(paste0("Based on 'OutputFile' and 'OutputFileIndex', we restart the analysis from the ", outIndex, "-th chunks."))
}
}else{
outIndex = 1;
}
return(outIndex)
}
checkOutputFile("OutputFile",
"OutputFileIndex",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
checkOutputFile("OutputFile",
"OutputFile",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
outIndexData = read.table("OutputFile")
outIndexData
outIndexData[1,1]
outIndexData[2,1]
checkOutputFile("OutputFile",
"OutputFile",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
checkOutputFile = function(OutputFile,
OutputFileIndex,
AnalysisType,      ## "Marker" or "Region"
nEachChunk)
{
if(missing(OutputFile))
stop("Argument of 'OutputFile' is required.")
if(file.exists(OutputFile)){
if(!file.exists(OutputFileIndex)){
stop(paste0("'OutputFile' of '", OutputFile,
"' has existed. Please use another 'OutputFile' or remove the existing one."))
}
else{
outIndexData = read.table(OutputFileIndex)
if(outIndexData[1,1] != "GRAB.outIndex" |
outIndexData[2,1] != "Please_do_not_modify_this_file" |
outIndexData[3,1] != AnalysisType |
outIndexData[4,1] != nEachChunk)
stop(paste0("'OutputFileIndex' of '", OutputFileIndex,
"' is not as expected. Probably, it has been modified, which is not permitted. Please remove the existing file of 'OutputFileIndex'."))
outIndex = as.numeric(outIndexData[nrow(outIndexData), 1]) + 1
warning(paste0("Based on 'OutputFile' and 'OutputFileIndex', we restart the analysis from the ", outIndex, "-th chunks."))
}
}else{
outIndex = 1;
}
return(outIndex)
}
checkOutputFile("OutputFile",
"OutputFile",
"AnalysisType",      ## "Marker" or "Region"
"nEachChunk")
library(GRAB)
library(GRAB)
1:10
as.data.frame(1:10)
data.frame(a=1,b=2)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
sessionInfo()
library(RcppArmadillo)
sessionInfo()
install.packages("Rcpp")
install.packages("RcppArmadillo")
library(GRAB)
remove.packages("GRAB", lib="~/R/win-library/4.1")
library(devtools)  # author version: 2.3.0, use install.packages("devtools") first
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"))  # The INSTALL_opts is required in Windows OS.
library(GRAB)
library(GRAB)
2661/8277
library(GRAB)
sessionInfo()
remove.packages("GRAB", lib="~/R/win-library/4.1")
library(GRAB)
library(SKAT)
?SKAT
is.numeric(c(0,2,3))
library(SKAT)
?SKAT
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
?SKAT
library(SKAT)
?SKAT
library(GRAB)
?SKAT
library(SKAT)
library(SKAT)
?SKAT
?rbeta
fmin(c(1,2,3),c(2,3,4))
fmax(c(1,2,3),c(2,3,4))
rmax(c(1,2,3),c(2,3,4))
pmax(c(1,2,3),c(2,3,4))
pmin(c(1,2,3),c(2,3,4))
?SKAT
?dbeta
dbeta(c(0.01), 1, 25)
dbeta(c(0.0001), 1, 25)
dbeta(c(0.01,0.0001), 1, 25)
pval.Region = data.frame(pval.SKATO = NULL,
pval.SKAT = NULL,
pval.Burden = NULL)
pval.Region
pval.Region = data.frame(Anno.Type = NULL
pval.SKATO = NULL,
pval.SKAT = NULL,
pval.Burden = NULL)
pval.Region = data.frame(Anno.Type = NULL,
pval.SKATO = NULL,
pval.SKAT = NULL,
pval.Burden = NULL)
pval.Region
colnames(pval.Region)
pval.Region = data.frame()
pval.Region
pval.Region = rbind.data.frame(pval.Region,data.frame(a=1,b=2))
pval.Region = rbind.data.frame(pval.Region,data.frame(a=1,b=2))
pval.Region = rbind.data.frame(pval.Region,data.frame(a=1,b=2))
pval.Region
info.Region = data.frame(c=3,d=4)
cbind.data.frame(pval.Region, info.Region)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
matrix(1:10,2,5)
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
insertVector(matrix(1:10,2,5), 0, c(0,0))
insertVector(matrix(1:10,2,5), 1, c(0,0))
insertVector(matrix(1:10,2,5), 2, c(0,0))
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testInsert.cpp")
library(GRAB)
library(GRAB)
remove.packages("GRAB", lib="~/R/win-library/4.1")
library(GRAB)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
### check step 2
objNull = obj.POLMM
GenoFile = system.file("extdata", "nSNPs-10000-nsubj-1000-ext.bed", package = "GRAB")
GenoFileIndex = NULL
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1")
# RegionAnnoHeader = NULL
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
# control = NULL
control = list(max_maf_region = 0.3)
GRAB.Region(objNull,
GenoFile,
GenoFileIndex,
OutputFile,
OutputFileIndex,
RegionFile,              # column 1: marker Set ID, column 2: SNP ID, columns 3-n: Annotations similar as in STAAR
RegionAnnoHeader,
SparseGRMFile,
control)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
library(GRAB)
