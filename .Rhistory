OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
Sys.time()
library(GRAB)
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
library(GRAB)
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
library(GRAB)
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
rm(list=ls())
library(devtools)  # author version: 2.3.0, use install.packages("devtools") first
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
library(rtools)
install.packages(rtools)
install.packages("rtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
library(devtools)  # author version: 2.3.0, use install.packages("devtools") first
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
library(devtools)  # author version: 2.3.0, use install.packages("devtools") first
install_github("GeneticAnalysisinBiobanks/GRAB",ref="dev1")
library(devtools)  # author version: 2.3.0, use install.packages("devtools") first
install_github("GeneticAnalysisinBiobanks/GRAB",ref="dev1")
sessionInfo()
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"))
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
install_github("GeneticAnalysisinBiobanks/GRAB", INSTALL_opts=c("--no-multiarch"), ref="dev1")
install.packages("ordinal")
sessionInfo()
install.packages("installr")
library(installr)
updateR()
library(roxygen2)
library(devtools)
128189/3600
4600/128189
library(GRAB)
?GRAB.Region
library(GRAB)
?GRAB.Region
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
library(GRAB)
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
0.0001 * 10e4
0.0001 * 20e4
0.0005 * 20e4
data.table::getDTthreads()
?data.table::getDTthreads
library(GRAB)
?GRAB.Region
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GroupFile = system.file("extdata", "example.GroupFile.txt", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = objNull,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile)
gc()
rm(list=ls())
gc()
source("D:/Github/GRAB/R/GRAB_Simu.R", echo=TRUE)
nSub = 100
nFam = 50
FamMode = "10-members"
inputList = checkInput(nSub, nFam, FamMode)
inputList
nSubInEachFam = inputList$nSubInEachFam
fam.mat = inputList$fam.mat
n = nSub + nFam * nSubInEachFam
if(n == 0){
stop("Please give at least one of 'nSub' and 'nFam'.")
}
cat("Number of unrelated subjects:\t", nSub, "\n")
cat("Number of families:\t", nFam, "\n")
cat("Number of subjects in each family:\t", nSubInEachFam, "\n")
cat("Number of all subjects:\t", n, "\n")
fam.mat
library(GRAB)
?GRAB.SimubVec
system.file("extdata", "example_10members.kin.txt", package = "GRAB")
?GRAB.SimuGMat
GenoList = GRAB.SimuGMat(nFam=1, FamMode="20-members", nSNP = 100000)
GenoList = GRAB.SimuGMat(nSub = 0, nFam = 1, FamMode = "20-members", nSNP = 100000)
head(GenoList$markerInfo)
dim(GenoList$GenoMat)
tildeG = (t(GenoList$GenoMat) - GenoList$markerInfo$MAF * 2) / (2*GenoList$markerInfo$MAF*(1-GenoList$markerInfo$MAF))
dim(tildeG)
t(tildeG) %*% tildeG
t(tildeG) %*% tildeG / 100000
history()
GenoMat = GenoList$GenoMat
dim(GenoMat)
GenoMat = GenoList$GenoMat
MAF = GenoList$markerInfo$MAF
tildeG = (t(GenoMat) - MAF * 2) / (2*MAF*(1-MAF))
t(tildeG) %*% tildeG / length(MAF)
tildeG = (t(GenoMat) - MAF * 2) / sqrt(2*MAF*(1-MAF))
t(tildeG) %*% tildeG / length(MAF)
GRM = t(tildeG) %*% tildeG / length(MAF)
GRM
?round
GRM = round(GRM * 8) / 8
GRM
table(GRM)
GRM * 8
GRM1 = t(tildeG) %*% tildeG / length(MAF)
GRM1 * 8
plot(GRM1 * 8)
plot(as.numeric(GRM1 * 8))
plot(as.numeric(GRM1 * 16))
?GRAB.SimuGMat
GenoList = GRAB.SimuGMat(nSub = 0, nFam = 1, FamMode = "20-members", nSNP = 1000000
MaxMAF = 0.5, MinMAF = 0.3)
GenoMat = GenoList$GenoMat
MAF = GenoList$markerInfo$MAF
tildeG = (t(GenoMat) - MAF * 2) / sqrt(2*MAF*(1-MAF))
GRM1 = t(tildeG) %*% tildeG / length(MAF)
GenoList = GRAB.SimuGMat(nSub = 0, nFam = 1, FamMode = "20-members", nSNP = 1000000,
MaxMAF = 0.5, MinMAF = 0.3)
GenoMat = GenoList$GenoMat
MAF = GenoList$markerInfo$MAF
tildeG = (t(GenoMat) - MAF * 2) / sqrt(2*MAF*(1-MAF))
GRM1 = t(tildeG) %*% tildeG / length(MAF)
GRM1
plot(as.numeric(GRM1))
plot(as.numeric(GRM1 * 16))
value = as.numeric(GRM1 * 16)
value[value >= 2] = 2
plot(value)
value = as.numeric(GRM1 * 32)
value[value >= 2] = 2
plot(value)
GRM = round(GRM1 * 32) / 32
table(GRM)
data.table::fwrite(GRM, "D:/Github/GRAB/inst/extdata/example_20-members.kin.txt",
row.names = F, col.names = F, quote = F, sep = " ")
?GRAB.SimubVec
1:0
bVec.Related = data.table::data.table()
nSub=10
tau=1
bVec.Unrelated = data.table::data.table(IID = paste0("Subj-",1:nSub),
bVec = rnorm(nSub, sd = tau))
rbind(bVec.Related, bVec.Unrelated)
rbind(bVec.Unrelated, bVec.Unrelated)
GenoList$GenoMat[,1:10]
fam.mat
source("D:/Github/GRAB/R/GRAB_Simu.R", echo=TRUE)
nSub = 10
nFam = 1
FamMode = "10-members"
tau = 2
bVec = GRAB.SimubVec(nSub, nFam, FamMode, tau)
bVec
inputList = checkInput(nSub, nFam, FamMode)
nSubInEachFam = inputList$nSubInEachFam
nSub = inputList$nSub
nFam = inputList$nFam
FamMode = inputList$FamMode
fam.mat = inputList$fam.mat
n = nSub + nFam * nSubInEachFam
source("D:/Github/GRAB/R/GRAB_Simu.R", echo=TRUE)
bVec = GRAB.SimubVec(nSub, nFam, FamMode, tau)
inputList = checkInput(nSub, nFam, FamMode)
nSubInEachFam = inputList$nSubInEachFam
nSub = inputList$nSub
nFam = inputList$nFam
FamMode = inputList$FamMode
fam.mat = inputList$fam.mat
n = nSub + nFam * nSubInEachFam
if(n == 0){
stop("Please give at least one of 'nSub' and 'nFam'.")
}
cat("Number of unrelated subjects:\t", nSub, "\n")
cat("Number of families:\t", nFam, "\n")
cat("Number of subjects in each family:\t", nSubInEachFam, "\n")
cat("Number of all subjects:\t", n, "\n")
if(FamMode == "Unrelated"){
bVec.Related = data.table::data.table()
}else{
if(FamMode == "4-members")
fam.kin.file = system.file("extdata", "example_4-members.kin.txt", package = "GRAB")
if(FamMode == "10-members")
fam.kin.file = system.file("extdata", "example_10-members.kin.txt", package = "GRAB")
if(FamMode == "20-members")
fam.kin.file = system.file("extdata", "example_20-members.kin.txt", package = "GRAB")
fam.kin = data.table::fread(fam.kin.file)
fam.kin = as.matrix(fam.kin)
n = n.fam * nrow(fam.kin)
out.eigen = eigen(fam.kin)
factor = t(out.eigen$vectors) * sqrt(out.eigen$values)
kin.chol = diag(n.fam) %x% factor
b.true = t(kin.chol) %*% rnorm(n) * sqrt(tau)
bVec.Related = data.table::data.table(IID = fam.mat$IID,
bVec = b.true)
}
fam.kin.file
sessionInfo()
library(GRAB)
?GRAB.SimubVec
nSub = 10
nFam = 1
FamMode = "10-members"
tau = 2
bVec = GRAB.SimubVec(nSub, nFam, FamMode, tau)
library(GRAB)
nSub = 10
nFam = 1
FamMode = "10-members"
tau = 2
bVec = GRAB.SimubVec(nSub, nFam, FamMode, tau)
source("D:/Github/GRAB/R/GRAB_Simu.R", echo=TRUE)
inputList = checkInput(nSub, nFam, FamMode)
nSubInEachFam = inputList$nSubInEachFam
nSub = inputList$nSub
nFam = inputList$nFam
FamMode = inputList$FamMode
fam.mat = inputList$fam.mat
n = nSub + nFam * nSubInEachFam
if(n == 0){
stop("Please give at least one of 'nSub' and 'nFam'.")
}
cat("Number of unrelated subjects:\t", nSub, "\n")
cat("Number of families:\t", nFam, "\n")
cat("Number of subjects in each family:\t", nSubInEachFam, "\n")
cat("Number of all subjects:\t", n, "\n")
if(FamMode == "Unrelated"){
bVec.Related = data.table::data.table()
}else{
if(FamMode == "4-members")
fam.kin.file = system.file("extdata", "example_4-members.kin.txt", package = "GRAB")
if(FamMode == "10-members")
fam.kin.file = system.file("extdata", "example_10-members.kin.txt", package = "GRAB")
if(FamMode == "20-members")
fam.kin.file = system.file("extdata", "example_20-members.kin.txt", package = "GRAB")
fam.kin = data.table::fread(fam.kin.file)
fam.kin = as.matrix(fam.kin)
n = nFam * nrow(fam.kin)
out.eigen = eigen(fam.kin)
factor = t(out.eigen$vectors) * sqrt(out.eigen$values)
kin.chol = diag(nFam) %x% factor
b.true = t(kin.chol) %*% rnorm(n) * sqrt(tau)
bVec.Related = data.table::data.table(IID = fam.mat$IID,
bVec = b.true)
}
if(nSub != 0){
bVec.Unrelated = data.table::data.table(IID = paste0("Subj-",1:nSub),
bVec = rnorm(nSub, sd = tau))
}
bVec.Related
bVec.Unrelated
b.true
data.table::data.table(IID = fam.mat$IID,
bVec = b.true)
b.true
bVec.Related = data.table::data.table(IID = fam.mat$IID,
bVec = unlist(b.true))
bVec.Related
bVec.Related = data.table::data.table(IID = fam.mat$IID,
bVe = unlist(b.true))
bVec.Related
unlist(b.true)
bVec.Related = data.table::data.table(IID = fam.mat$IID,
bVec = as.numeric(b.true))
bVec.Related
nSub = 10
nFam = 1
FamMode = "10-members"
tau = 2
bVec = GRAB.SimubVec(nSub, nFam, FamMode, tau)
library(GRAB)
nSub = 10
nFam = 1
FamMode = "10-members"
tau = 2
bVec = GRAB.SimubVec(nSub, nFam, FamMode, tau)
source("D:/Github/GRAB/R/GRAB_Simu.R", echo=TRUE)
inputList = checkInput(nSub, nFam, FamMode)
nSubInEachFam = inputList$nSubInEachFam
nSub = inputList$nSub
nFam = inputList$nFam
FamMode = inputList$FamMode
fam.mat = inputList$fam.mat
n = nSub + nFam * nSubInEachFam
if(n == 0){
stop("Please give at least one of 'nSub' and 'nFam'.")
}
cat("Number of unrelated subjects:\t", nSub, "\n")
cat("Number of families:\t", nFam, "\n")
cat("Number of subjects in each family:\t", nSubInEachFam, "\n")
cat("Number of all subjects:\t", n, "\n")
if(FamMode == "Unrelated"){
bVec.Related = data.table::data.table()
}else{
if(FamMode == "4-members")
fam.kin.file = system.file("extdata", "example_4-members.kin.txt", package = "GRAB")
if(FamMode == "10-members")
fam.kin.file = system.file("extdata", "example_10-members.kin.txt", package = "GRAB")
if(FamMode == "20-members")
fam.kin.file = system.file("extdata", "example_20-members.kin.txt", package = "GRAB")
fam.kin = data.table::fread(fam.kin.file)
fam.kin = as.matrix(fam.kin)
n = nFam * nrow(fam.kin)
out.eigen = eigen(fam.kin)
factor = t(out.eigen$vectors) * sqrt(out.eigen$values)
kin.chol = diag(nFam) %x% factor
b.true = t(kin.chol) %*% rnorm(n) * sqrt(tau)
bVec.Related = data.table::data.table(IID = fam.mat$IID,
bVec = as.numeric(b.true))
}
if(nSub != 0){
bVec.Unrelated = data.table::data.table(IID = paste0("Subj-",1:nSub),
bVec = rnorm(nSub, sd = tau))
}
bVec = rbind(bVec.Related, bVec.Unrelated)
bVec
library(GRAB)
rm(list=ls())
?GRAB.SimuGMatFromGenoFile
library(GRAB)
```
nFam = 50
nSub = 500
FamMode = "10-members"
PLINKFile = system.file("extdata", "example_n1000_m240.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "example.IDsToIncludeFile.txt", package = "GRAB")
RangesToIncludeFile = system.file("extdata", "example.RangesToIncludeFile.txt", package = "GRAB")
data.table::fread(IDsToIncludeFile)
data.table::fread(IDsToIncludeFile, header = F)
BimFile = system.file("extdata", "example_n1000_m240.bim", package = "GRAB")
data.table::fread(BimFile)
BimData = data.table::fread(BimFile)
sample(BimData$V2, 200)
write.table(sample(BimData$V2, 200), system.file("extdata", "example.IDsToIncludeFile.txt", package = "GRAB"), col.names = F, row.names = F, quote = F)
system.file("extdata", "example.IDsToIncludeFile.txt"
)
system.file("extdata", "example.IDsToIncludeFile.txt", package = "GRAB")
write.table(sample(BimData$V2, 200), "C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/extdata/example_n1000_m240.IDsToInclude", col.names = F, row.names = F, quote = F)
library(GRAB)
library(GRAB)
nFam = 50
nSub = 500
FamMode = "10-members"
# PLINK data format
PLINKFile = system.file("extdata", "example_n1000_m240.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "example_n1000_m240.IDsToInclude", package = "GRAB")
GenoList = GRAB.SimuGMatFromGenoFile(nFam, nSub, FamMode, PLINKFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
PLINKFile
system.file("extdata", "example_n1000_m240.bed", package = "GRAB")
library(GRAB)
?GRAB.SimuGMat
?GRAB.SimuGMatFromGenoFile
nFam = 50
nSub = 500
FamMode = "10-members"
# PLINK data format
PLINKFile = system.file("extdata", "example_n1000_m240.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "example_n1000_m240.IDsToInclude", package = "GRAB")
PLINKFile
library(GRAB)
nFam = 50
nSub = 500
FamMode = "10-members"
# PLINK data format
PLINKFile = system.file("extdata", "example_n1000_m240.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "example_n1000_m240.IDsToInclude", package = "GRAB")
PLINKFile
GenoList = GRAB.SimuGMatFromGenoFile(nFam, nSub, FamMode, PLINKFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
GenoList$GenoMat
GenoList$GenoMat[995:1000,1:10]
GenoList$GenoMat[1:10,1:10]
GenoList$GenoMat[1:20,1:10]
table(GenoList$GenoMat[,10])
library(GRAB)
library(GRAB)
nFam = 50
nSub = 500
FamMode = "10-members"
# PLINK data format
PLINKFile = system.file("extdata", "example_n1000_m236.bed", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "example_n1000_m236.IDsToInclude", package = "GRAB")
GenoList = GRAB.SimuGMatFromGenoFile(nFam, nSub, FamMode, PLINKFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
GenoList$GenoMat
apply(GenoList$GenoMat, 2, mean)
BGENFile = system.file("extdata", "example_n1000_m240.bgen", package = "GRAB")
IDsToIncludeFile = system.file("extdata", "example_n1000_m240.IDsToInclude", package = "GRAB")
GenoList = GRAB.SimuGMatFromGenoFile(nFam, nSub, FamMode, BGENFile,
control = list(IDsToIncludeFile = IDsToIncludeFile))
