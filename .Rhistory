?GRAB.ReadGeno
?glm
?GRAB.ReadGeno
\code{system.file("extdata", "example_bgen_1.2_8bits.bgen.samples", package = "GRAB")
system.file("extdata", "example_bgen_1.2_8bits.bgen.samples", package = "GRAB")
data.table::fread(system.file("extdata", "example_bgen_1.2_8bits.bgen.samples", package = "GRAB"))
?checkIfSampleIDsExist
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
library(GRAB)
?GRAB.ReadGeno
?GRAB.control
library(GRAB)
?GRAB.ReadGeno
?glm
?GRAB.ReadGeno
?glm
?GRAB.ReadGeno
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
?stop
stop("ad","cd")
a=1:10
b=3:12
a[!a %in% b]
?data.table::fread
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
PLINKFile
a="C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/extdata/example.bim"
data.table::fread(a)
b=data.table::fread(a)
summary(b)
b=data.table::fread(a, colClasses = "character")
summary(b)
b=data.table::fread(a, colClasses = c("character","numeric"))
b=data.table::fread(a, colClasses = rep(c("character","numeric"),3))
b=data.table::fread(a, colClasses = rep(c("character"),6))
b=data.table::fread(a, colClasses = rep(c("numeric"),6))
b=data.table::fread(a, colClasses = "character")
head(b)
b[,1]
unlist(b)
length(unlist(b))
dim(b)
head(b)
head(unlist(b))
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
bgenFile = BGENFile
?getSampleIDsFromBGEN
?getSampleIDsFromBGEN
con = file(bgenFile, "rb")
seek(con, 4)
LH = readBin(con, n = 1, what = "integer", size = 4)
LH
seek(con, 4 + LH + 4)
getSampleIDsFromBGEN(bgenFile)
warnings()
close(con)
getSampleIDsFromBGEN(bgenFile)
warnings()
?drrk
?seek
?readChar
getSampleIDsFromBGEN = function(bgenFile)
{
if(!checkIfSampleIDsExist(bgenFile))
stop("The BGEN file does not include sample identifiers. Please refer to ?checkIfSampleIDsExist for more details")
con = file(bgenFile, "rb")
seek(con, 4)
LH = readBin(con, n = 1, what = "integer", size = 4)
seek(con, 4 + LH + 4)
N = readBin(con, n = 1, what = "integer", size = 4)  # number of samples
samplesInGeno = rep(0, N)
# cycle for all samples to extract IDs
for(i in 1:N){
LS = readBin(con, n = 1, what = "integer", size = 2)
sample = readChar(con, nchars = LS, useBytes = T)
samplesInGeno[i] = sample
}
# close connection
close(con)
return(samplesInGeno)
}
getSampleIDsFromBGEN(bgenFile)
?seek
con
bgenFile
con = file(bgenFile, "rb")
con = file(bgenFile, "rb")
seek(con, 4)
LH = readBin(con, n = 1, what = "integer", size = 4)
seek(con, 4 + LH - 4)
header = rawToBits(readBin(con, n = 4, what = "raw", size = 1, signed = FALSE))
header
?rawToBits
BitsToint
header[1]
header[2]
header[3:6]
header[6:3]
?rawToBits
?rawToBits
packBits(header[3:6])
packBits(header[3:6], type="double")
packBits(header[3:6], type="integer")
packBits(header[3:6], type="raw")
packBits(header[3:6], type="integer")
packBits(c(header[3:6],rep(00, 28)), type="integer")
rep(00, 28)
class(header[1])
as.raw(1)
as.raw(3)
header
header
header[3:6]
as.numeric(header[3:6])
library(devtools)  # author version: 2.3.0
install_github("WenjianBi/POLMM")
library(POLMM)
install.packages("seqminer")
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
?seqminer::readPlinkToMatrixByIndex
fileName = system.file("plink/all.anno.filtered.extract.bed", package = "seqminer")
fileName = sub(fileName, pattern = ".bed", replacement = "")
sampleIndex = seq(3)
markerIndex =c(14, 36)
cfh <- readPlinkToMatrixByIndex(fileName, sampleIndex, markerIndex)
library(seqminer)
fileName = system.file("plink/all.anno.filtered.extract.bed", package = "seqminer")
fileName = sub(fileName, pattern = ".bed", replacement = "")
sampleIndex = seq(3)
markerIndex =c(14, 36)
cfh <- readPlinkToMatrixByIndex(fileName, sampleIndex, markerIndex)
cfh
GRAB.ReadGeno(fileName)
fileName
fileName = system.file("plink/all.anno.filtered.extract.bed", package = "seqminer")
GRAB.ReadGeno(fileName)
fileName = system.file("plink/all.anno.filtered.extract.bed", package = "seqminer")
fileName = sub(fileName, pattern = ".bed", replacement = "")
sampleIndex = seq(3)
markerIndex =c(1, 2, 3)
cfh <- readPlinkToMatrixByIndex(fileName, sampleIndex, markerIndex)
cfh
?GRAB.ReadGeno
data.table::fread(sub(fileName, pattern = ".bed", replacement = ".bim"))
fileName
data.table::fread(sub(fileName, pattern = "$", replacement = ".bim"))
?GRAB.ReadGeno
?rawToBits
convert4BitsToNumber = function(leastSignificantBit)
{
leastSignificantBit = as.numeric(leastSignificantBit)
if(length(leastSignificantBit) != 4)
stop("Input should be 4 bits in which least-significant first.")
Number  = 0;
for(i in 1:4){
Number = Number + 2^(i-1) * leastSignificantBit[i];
}
return(Number)
}
convert4BitsToNumber(c(1,1,1,1))
convert4BitsToNumber(c(1,0,0,0))
convert4BitsToNumber(c(0,0,0,0))
library(GRAB)
?getVersionFromBGEN
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
getVersionFromBGEN(BGENFile)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is from PLINK input
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
markerInfo
head(markerInfo)
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
Q
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
markerInfo
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoFile = PLINKFile
GenoFileIndex
GenoFileIndex = c(gsub("bed$", "bim", GenoFile),
gsub("bed$", "fam", GenoFile))
bimFile = GenoFileIndex[1]
famFile = GenoFileIndex[2]
sampleInfo = data.table::fread(famFile, header = F, sep = "\t")
samplesInGeno = sampleInfo$V2
samplesInGeno
head(sampleInfo)
bimFile
markerInfo = data.table::fread(bimFile, header = F, sep = "\t")
markerInfo
sampleInfo = data.table::fread(famFile, header = F, sep = " ")
head(sampleInfo)
ncol(markerInfo)
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is from PLINK input
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
GenoList = GRAB.ReadGeno(BGENFile)
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat)
markerInfo
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
checkIfSampleIDsExist(BGENFile)
BGENFile = system.file("extdata", "example_bgen_1.2_8bits.bgen", package = "GRAB")
getVersionFromBGEN(BGENFile)
?GRAB.ReadGeno
stop("aa","bb")
stop("aa ","bb")
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
print("aaa")
cat("aaa")
cat("aaa","bb")
cat("aaa\t","bb")
cat("aaa\tbb")
bb="cc"
cat("aaa\tbb",bb)
?cat
?data.table::fread
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "example.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
head(GenoMat[,1:15])
## The below is from PLINK input
PLINKFile = system.file("extdata", "example.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile)
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarker = TRUE))
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
GenoMat = GenoList$GenoMat
dim(GenoMat)
head(GenoMat[,1:15])
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE, AlleleOrder = "ref-first"))
GenoMat = GenoList$GenoMat
head(GenoMat[,1:15])
head(GenoList$markerInfo)
69608*1.05
69608*1.06
8130/0.95
library(GRAB)
?GRAB.ReadGeno
library(SKAT)
?SKAT
?SKAT
?SKAT
SKAT
SKAT_With_NullModel
SKAT:::SKAT_With_NullModel
plot(2*seq(0.1,0.9,0.1))
rbind(2*seq(0.1,0.9,0.1),round(2*seq(0.1,0.9,0.1)))
rbind(seq(0.1,0.9,0.1),round(2*seq(0.1,0.9,0.1)))
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testRound.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testRound.cpp")
library(GRAB)
?GRAB.ReadGeno
library(GRAB)
?GRAB.ReadGeno
?GRAB::plink.make
n = 1000
m = 20
MAF = 0.3
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
rownames(Geno.mat) = paste0("subj-",1:n)
colnames(Geno.mat) = paste0("SNP-",1:m)
work.dir = system.file("results", package = "GRAB")
out.prefix = "test"
mCHRs = FALSE
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP)
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
dim(Geno.mat)
head(Geno.mat)
GRAB::plink.make()
?GRAB::plink.make
n = 1000
m = 20
MAF = 0.3
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
dim(Geno.mat)
head(Geno.mat)
length(Geno.mat)
random(length(Geno.mat), 0.1)
?sample
sample(length(Geno.mat), 0.1)
sample(1:length(Geno.mat), 0.1)
sample(1:length(Geno.mat), prob = 0.1)
sample(length(Geno.mat), prob = 0.1)
sample(length(Geno.mat), size = 0.1 * length(Geno.mat))
sample(length(Geno.mat), size = 0.1 * length(Geno.mat))
unique(Geno.mat)
unique(unlist(Geno.mat))
unique(as.numeric(Geno.mat))
class(Geno.mat)
Geno.mat
is.numeric(Geno.mat)
unique(as.numeric(Geno.mat))
any(!unique(as.numeric(Geno.mat)) %in% c(0, 1, 2, -9))
?matrix
matrix("0", 3,4)
library(GRAB)
?plink.make
n = 1000
m = 20
MAF = 0.3
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
rownames(Geno.mat) = paste0("Subj-",1:n)
colnames(Geno.mat) = paste0("SNP-",1:m)
indexMissing = sample(n*m, 0.1*n*m)
Geno.mat[indexMissing] = -9
head(Geno.mat)
work.dir = system.file("results", package = "GRAB")
out.prefix = "simuPLINK"
mCHRs = FALSE   # if FALSE, chromosomes of all markers are 1
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP)
library(GRAB)
?plink.make
n = 1000
m = 20
MAF = 0.3
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
rownames(Geno.mat) = paste0("Subj-",1:n)
colnames(Geno.mat) = paste0("SNP-",1:m)
indexMissing = sample(n*m, 0.1*n*m)
Geno.mat[indexMissing] = -9
work.dir = system.file("results", package = "GRAB")
out.prefix = "simuPLINK"
mCHRs = FALSE   # if FALSE, chromosomes of all markers are 1
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP)
head(Geno.mat)
library(GRAB)
?GRAB::plink.make
n = 1000
m = 20
MAF = 0.3
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
rownames(Geno.mat) = paste0("Subj-",1:n)
colnames(Geno.mat) = paste0("SNP-",1:m)
indexMissing = sample(n*m, 0.1*n*m)
Geno.mat[indexMissing] = -9
work.dir = system.file("results", package = "GRAB")
out.prefix = "simuPLINK"
mCHRs = FALSE   # if FALSE, chromosomes of all markers are 1
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP)
indexMissing = sample(n*m, 0.1*n*m)
Geno.mat[indexMissing] = -9
work.dir = system.file("results", package = "GRAB")
out.prefix = "simuPLINK"
mCHRs = FALSE   # if FALSE, chromosomes of all markers are 1
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP, Pheno = c(1,2))
indexMissing = sample(n*m, 0.1*n*m)
Geno.mat[indexMissing] = -9
work.dir = system.file("results", package = "GRAB")
out.prefix = "simuPLINK"
mCHRs = FALSE   # if FALSE, chromosomes of all markers are 1
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP, Pheno = rep(1,n))
library(GRAB)
?plink.make
n = 1000
m = 20
MAF = 0.3
Geno.mat = matrix(rbinom(n*m, 2, MAF), n, m)
rownames(Geno.mat) = paste0("Subj-",1:n)
colnames(Geno.mat) = paste0("SNP-",1:m)
indexMissing = sample(n*m, 0.1*n*m)
Geno.mat[indexMissing] = -9
work.dir = system.file("results", package = "GRAB")
out.prefix = "simuPLINK"
mCHRs = FALSE   # if FALSE, chromosomes of all markers are 1
BP = NULL
plink.make(Geno.mat, work.dir, out.prefix, mCHRs, BP)
?GRAB.ReadGeno
?GRAB.ReadGeno
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
PLINKFile
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
head(GenoList$markerInfo)
?plink.make
BP=NULL
m=10
ifelse(is.null(BP), 1:m, BP)
is.null(BP)
1:m
mCHRs=TRUE
ifelse(mCHRs, sample(1:22, m, replace=T)
）
ifelse(mCHRs, sample(1:22, m, replace=T), 1)
m
sample(1:22, m, replace=T)
?ifelse
ifelse(TRUE, 1,0)
ifelse(TRUE, c(1,2), 0)
ifelse(FALSE, c(1,2), c(0,0))
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE, ImputeMethod = "mean"))
head(GenoList$GenoMat)
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE, sparse = TRUE))
head(GenoList$GenoMat)
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE), sparse = TRUE)
head(GenoList$GenoMat)
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE, ImputeMethod = "s"))
head(GenoList$GenoMat)
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE, ImputeMethod = "mean"))
head(GenoList$GenoMat)
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE, ImputeMethod = "bestguess"))
head(GenoList$GenoMat)
library(GRAB)
?GRAB.ReadGeno
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE))
head(GenoList$GenoMat)
