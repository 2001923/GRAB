IsUltraRareVariants = 0,
Info = obj.mainRegion$infoVec,
AltFreq = obj.mainRegion$altFreqVec,
MAC = obj.mainRegion$MACVec,
MAF = obj.mainRegion$MAFVec,
MissingRate = obj.mainRegion$missingRateVec,
Beta = obj.mainRegion$BetaVec,
seBeta = obj.mainRegion$seBetaVec,
pval0 = obj.mainRegion$pval0Vec,
pval1 = obj.mainRegion$pval1Vec)
}
if(length(obj.mainRegion$markerURVVec) == 0){
info.MarkerURV.Region = NULL;
}else{
info.MarkerURV.Region = data.frame(Region = regionName,
Marker = obj.mainRegion$markerURVVec,
IsUltraRareVariants = 1,
Info = obj.mainRegion$infoURVVec,
AltFreq = obj.mainRegion$altFreqURVVec,
MAC = obj.mainRegion$MACURVVec,
MAF = obj.mainRegion$MAFURVVec,
MissingRate = obj.mainRegion$missingRateURVVec,
Beta = NA,
seBeta = NA,
pval0 = NA,
pval1 = NA)
}
### 2. Record marker-level annotation information
posMarker = match(obj.mainRegion$markerVec, SNP)
posMarkerURV = match(obj.mainRegion$markerURVVec, SNP)
regionData = regionMat[posMarker, ,drop=F]
regionDataURV = regionMat[posMarkerURV, ,drop=F]
genoIndexURV = genoIndex[posMarkerURV]
# annotation value <= 0 will be excluded from further analysis
regionData[regionData <= 0] = 0
regionDataURV[regionDataURV <= 0] = 0
info.Marker.Region = cbind.data.frame(info.Marker.Region, regionData)
info.MarkerURV.Region = cbind.data.frame(info.MarkerURV.Region, regionDataURV)
info.Region = rbind.data.frame(info.Marker.Region, info.MarkerURV.Region)
### 3. Adjust for saddlepoint approximation
StatVec = obj.mainRegion$StatVec
VarSVec = diag(obj.mainRegion$VarMat)
adjPVec = obj.mainRegion$pval1Vec;
adjVarSVec = StatVec^2 / qchisq(adjPVec, df = 1, lower.tail = F)
r0 = adjVarSVec / VarSVec
r0 = pmax(r0, 1)
weights = dbeta(obj.mainRegion$MAFVec,
control$weights.beta[1], control$weights.beta[2])
weightsURV = dbeta(obj.mainRegion$MAFURVVec,
control$weights.beta[1], control$weights.beta[2])
pval.Region = data.frame()
# for(j in 1:ncol(regionData)){  # cycle for annotation
j = 2
AnnoName = colnames(regionData)[j]
AnnoWeights = weights * regionData[,j]
AnnoWeightsURV = weightsURV * regionDataURV[,j]
wr0 = sqrt(r0) * AnnoWeights
wStatVec = StatVec * AnnoWeights
wadjVarSMat = t(obj.mainRegion$VarMat * wr0) * wr0
tempPosURV = which(regionDataURV[,j] > 0)
nMarkersURV = length(tempPosURV)
obj.mainRegionURV = mainRegionURV(NullModelClass, genoType, genoIndexURV[tempPosURV], n)
StatURV = obj.mainRegionURV$Stat;
adjPURV = obj.mainRegionURV$pval1;
adjVarSURV = StatURV^2 / qchisq(adjPURV, df = 1, lower.tail = F)
mAnnoWeightsURV = mean(AnnoWeightsURV[tempPosURV])
wStatURV = StatURV * mAnnoWeightsURV
wadjVarSURV = adjVarSURV * mAnnoWeightsURV^2
# for(tempMaxMAF in MaxMAFVec){  # cycle for max MAF cutoff
tempMaxMAF = MaxMAFVec[1]
tempPos = which(regionData[,j] > 0 & obj.mainRegion$MAFVec <= tempMaxMAF)
nMarkers = length(tempPos)
if(nMarkers < control$min_nMarker){
pval.Region = rbind.data.frame(pval.Region,
data.frame(Region = regionName,
nMarkers = nMarkers,
nMarkersURV = nMarkersURV,
Anno.Type = AnnoName,
MaxMAF.Cutoff = tempMaxMAF,
pval.SKATO = NA,
pval.SKAT = NA,
pval.Burden = NA))
}else{
out_SKAT_List = try(SKAT:::Met_SKAT_Get_Pvalue(Score = c(wStatVec[tempPos], wStatURV),
Phi = Matrix::bdiag(wadjVarSMat[tempPos, tempPos], wadjVarSURV)  # ignore the correlation between URV and non-URV
r.corr = control$r.corr,
method = "optimal.adj",
Score.Resampling = NULL),
silent = TRUE)
if(class(out_SKAT_List) == "try-error"){
Pvalue = c(NA, NA, NA)
error.code = 2
}else if(!any(c(0,1) %in% out_SKAT_List$param$rho)){
Pvalue = c(NA, NA, NA)
error.code = 3
}else{
pos0 = which(out_SKAT_List$param$rho == 0)
pos1 = which(out_SKAT_List$param$rho == 1)
Pvalue = c(out_SKAT_List$p.value,                  # SKAT-O
out_SKAT_List$param$p.val.each[pos0],   # SKAT
out_SKAT_List$param$p.val.each[pos1])   # Burden Test
error.code = 0
}
pval.Region = rbind.data.frame(pval.Region,
data.frame(Region = regionName,
nMarkers = nMarkers,
nMarkersURV = nMarkersURV,
Anno.Type = AnnoName,
MaxMAF.Cutoff = tempMaxMAF,
pval.SKATO = Pvalue[1],
pval.SKAT = Pvalue[2],
pval.Burden = Pvalue[3]))
}
rm(list = ls())
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
OutputFileIndex = NULL
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GenoFileIndex = NULL
RegionFile = system.file("extdata", "simuRegion.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1", "ANNO2")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
control = list(outputColumns = c("beta", "seBeta", "zScore","nSamplesInGroup","AltCountsInGroup","AltFreqInGroup"))
MaxMAFVec = c(0.01, 0.001)
########
NullModelClass = checkObjNull(objNull);  # Check "Util.R"
if(is.null(OutputFileIndex))
OutputFileIndex = paste0(OutputFile, ".index")
outList = checkOutputFile(OutputFile, OutputFileIndex, "Region", 1) # Check 'Util.R'
indexChunk = outList$indexChunk
Start = outList$Start
End = outList$End
if(End)
{
message = paste0("The analysis has been completed in earlier analysis. Results are saved in '", OutputFile, "'. ",
"If you want to change parameters and restart the analysis, please use another 'OutputFile'.")
return(message)
}
## Check "control.R": if the setting of control is not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
MaxMAF = max(MaxMAFVec)
if(MaxMAF > 0.05)
stop("Maximal value of 'MaxMAFVec' should be <= 0.05.")
control$max_maf_region = MaxMAF
subjData = as.character(objNull$subjData);
n = length(subjData)
Group = makeGroup(objNull$yVec)
ifOutGroup = any(c("AltFreqInGroup", "AltCountsInGroup") %in% control$outputColumns)
## set up an object for genotype data
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # Check 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
## annotation in region
RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(RegionList)
P1Mat = matrix(0, control$max_markers_region, n);
P2Mat = matrix(0, n, control$max_markers_region);
chrom1 = "FakeCHR";
print(indexChunk)
i = 1
region = RegionList[[i]]
regionName = names(RegionList)[i]
SNP = region$SNP
regionMat = region$regionMat  # annotation values
genoIndex = region$genoIndex
chrom = region$chrom
print(paste0("Analyzing Region of ", regionName, " (",i,"/",nRegions,")."))
print(paste(SNP, collapse = ", "))
if(chrom1 != chrom){
obj.setRegion = setRegion(NullModelClass, objNull, control, chrom, SparseGRMFile, Group, ifOutGroup)
chrom1 = chrom
}
# main function to calculate summary statistics for region-based analysis
obj.mainRegion = mainRegion(NullModelClass, genoType, genoIndex, OutputFile, n, P1Mat, P2Mat)
### 1. Record marker-level basic information
if(length(obj.mainRegion$markerVec) == 0){
info.Marker.Region = NULL;
}else{
info.Marker.Region = data.frame(Region = regionName,
Marker = obj.mainRegion$markerVec,
IsUltraRareVariants = 0,
Info = obj.mainRegion$infoVec,
AltFreq = obj.mainRegion$altFreqVec,
MAC = obj.mainRegion$MACVec,
MAF = obj.mainRegion$MAFVec,
MissingRate = obj.mainRegion$missingRateVec,
Beta = obj.mainRegion$BetaVec,
seBeta = obj.mainRegion$seBetaVec,
pval0 = obj.mainRegion$pval0Vec,
pval1 = obj.mainRegion$pval1Vec)
}
if(length(obj.mainRegion$markerURVVec) == 0){
info.MarkerURV.Region = NULL;
}else{
info.MarkerURV.Region = data.frame(Region = regionName,
Marker = obj.mainRegion$markerURVVec,
IsUltraRareVariants = 1,
Info = obj.mainRegion$infoURVVec,
AltFreq = obj.mainRegion$altFreqURVVec,
MAC = obj.mainRegion$MACURVVec,
MAF = obj.mainRegion$MAFURVVec,
MissingRate = obj.mainRegion$missingRateURVVec,
Beta = NA,
seBeta = NA,
pval0 = NA,
pval1 = NA)
}
### 2. Record marker-level annotation information
posMarker = match(obj.mainRegion$markerVec, SNP)
posMarkerURV = match(obj.mainRegion$markerURVVec, SNP)
regionData = regionMat[posMarker, ,drop=F]
regionDataURV = regionMat[posMarkerURV, ,drop=F]
genoIndexURV = genoIndex[posMarkerURV]
# annotation value <= 0 will be excluded from further analysis
regionData[regionData <= 0] = 0
regionDataURV[regionDataURV <= 0] = 0
info.Marker.Region = cbind.data.frame(info.Marker.Region, regionData)
info.MarkerURV.Region = cbind.data.frame(info.MarkerURV.Region, regionDataURV)
info.Region = rbind.data.frame(info.Marker.Region, info.MarkerURV.Region)
### 3. Adjust for saddlepoint approximation
StatVec = obj.mainRegion$StatVec
VarSVec = diag(obj.mainRegion$VarMat)
adjPVec = obj.mainRegion$pval1Vec;
adjVarSVec = StatVec^2 / qchisq(adjPVec, df = 1, lower.tail = F)
r0 = adjVarSVec / VarSVec
r0 = pmax(r0, 1)
weights = dbeta(obj.mainRegion$MAFVec,
control$weights.beta[1], control$weights.beta[2])
weightsURV = dbeta(obj.mainRegion$MAFURVVec,
control$weights.beta[1], control$weights.beta[2])
pval.Region = data.frame()
# for(j in 1:ncol(regionData)){  # cycle for annotation
j = 2
AnnoName = colnames(regionData)[j]
AnnoWeights = weights * regionData[,j]
AnnoWeightsURV = weightsURV * regionDataURV[,j]
wr0 = sqrt(r0) * AnnoWeights
wStatVec = StatVec * AnnoWeights
wadjVarSMat = t(obj.mainRegion$VarMat * wr0) * wr0
tempPosURV = which(regionDataURV[,j] > 0)
nMarkersURV = length(tempPosURV)
obj.mainRegionURV = mainRegionURV(NullModelClass, genoType, genoIndexURV[tempPosURV], n)
StatURV = obj.mainRegionURV$Stat;
adjPURV = obj.mainRegionURV$pval1;
adjVarSURV = StatURV^2 / qchisq(adjPURV, df = 1, lower.tail = F)
mAnnoWeightsURV = mean(AnnoWeightsURV[tempPosURV])
wStatURV = StatURV * mAnnoWeightsURV
wadjVarSURV = adjVarSURV * mAnnoWeightsURV^2
# for(tempMaxMAF in MaxMAFVec){  # cycle for max MAF cutoff
tempMaxMAF = MaxMAFVec[1]
tempPos = which(regionData[,j] > 0 & obj.mainRegion$MAFVec <= tempMaxMAF)
nMarkers = length(tempPos)
if(nMarkers < control$min_nMarker){
pval.Region = rbind.data.frame(pval.Region,
data.frame(Region = regionName,
nMarkers = nMarkers,
nMarkersURV = nMarkersURV,
Anno.Type = AnnoName,
MaxMAF.Cutoff = tempMaxMAF,
pval.SKATO = NA,
pval.SKAT = NA,
pval.Burden = NA))
}else{
out_SKAT_List = try(SKAT:::Met_SKAT_Get_Pvalue(Score = c(wStatVec[tempPos], wStatURV),
Phi = Matrix::bdiag(wadjVarSMat[tempPos, tempPos], wadjVarSURV),  # ignore the correlation between URV and non-URV
r.corr = control$r.corr,
method = "optimal.adj",
Score.Resampling = NULL),
silent = TRUE)
if(class(out_SKAT_List) == "try-error"){
Pvalue = c(NA, NA, NA)
error.code = 2
}else if(!any(c(0,1) %in% out_SKAT_List$param$rho)){
Pvalue = c(NA, NA, NA)
error.code = 3
}else{
pos0 = which(out_SKAT_List$param$rho == 0)
pos1 = which(out_SKAT_List$param$rho == 1)
Pvalue = c(out_SKAT_List$p.value,                  # SKAT-O
out_SKAT_List$param$p.val.each[pos0],   # SKAT
out_SKAT_List$param$p.val.each[pos1])   # Burden Test
error.code = 0
}
pval.Region = rbind.data.frame(pval.Region,
data.frame(Region = regionName,
nMarkers = nMarkers,
nMarkersURV = nMarkersURV,
Anno.Type = AnnoName,
MaxMAF.Cutoff = tempMaxMAF,
pval.SKATO = Pvalue[1],
pval.SKAT = Pvalue[2],
pval.Burden = Pvalue[3]))
}
pval.Region
error.code
out_SKAT_List
Matrix::bdiag(wadjVarSMat[tempPos, tempPos], wadjVarSURV)
out_SKAT_List = try(SKAT:::Met_SKAT_Get_Pvalue(Score = c(wStatVec[tempPos], wStatURV),
Phi = as.matrix(Matrix::bdiag(wadjVarSMat[tempPos, tempPos], wadjVarSURV)),  # ignore the correlation between URV and non-URV
r.corr = control$r.corr,
method = "optimal.adj",
Score.Resampling = NULL),
silent = TRUE)
out_SKAT_List
c(1:4,2.3)
c(1:4,NULL)
rm(list = ls())
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
OutputFileIndex = NULL
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
GenoFileIndex = NULL
RegionFile = system.file("extdata", "simuRegion.txt", package = "GRAB")
RegionAnnoHeader = c("ANNO1", "ANNO2")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
control = list(outputColumns = c("beta", "seBeta", "zScore","nSamplesInGroup","AltCountsInGroup","AltFreqInGroup"))
MaxMAFVec = c(0.01, 0.001)
########
NullModelClass = checkObjNull(objNull);  # Check "Util.R"
if(is.null(OutputFileIndex))
OutputFileIndex = paste0(OutputFile, ".index")
outList = checkOutputFile(OutputFile, OutputFileIndex, "Region", 1) # Check 'Util.R'
indexChunk = outList$indexChunk
Start = outList$Start
End = outList$End
if(End)
{
message = paste0("The analysis has been completed in earlier analysis. Results are saved in '", OutputFile, "'. ",
"If you want to change parameters and restart the analysis, please use another 'OutputFile'.")
return(message)
}
## Check "control.R": if the setting of control is not specified, the default setting will be used
control = checkControl.Region(control, NullModelClass)
MaxMAF = max(MaxMAFVec)
if(MaxMAF > 0.05)
stop("Maximal value of 'MaxMAFVec' should be <= 0.05.")
control$max_maf_region = MaxMAF
subjData = as.character(objNull$subjData);
n = length(subjData)
Group = makeGroup(objNull$yVec)
ifOutGroup = any(c("AltFreqInGroup", "AltCountsInGroup") %in% control$outputColumns)
## set up an object for genotype data
objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # Check 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
## annotation in region
RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(RegionList)
P1Mat = matrix(0, control$max_markers_region, n);
P2Mat = matrix(0, n, control$max_markers_region);
chrom1 = "FakeCHR";
print(indexChunk)
i = 1
region = RegionList[[i]]
regionName = names(RegionList)[i]
SNP = region$SNP
regionMat = region$regionMat  # annotation values
genoIndex = region$genoIndex
chrom = region$chrom
print(paste0("Analyzing Region of ", regionName, " (",i,"/",nRegions,")."))
print(paste(SNP, collapse = ", "))
if(chrom1 != chrom){
obj.setRegion = setRegion(NullModelClass, objNull, control, chrom, SparseGRMFile, Group, ifOutGroup)
chrom1 = chrom
}
# main function to calculate summary statistics for region-based analysis
obj.mainRegion = mainRegion(NullModelClass, genoType, genoIndex, OutputFile, n, P1Mat, P2Mat)
### 1. Record marker-level basic information
if(length(obj.mainRegion$markerVec) == 0){
info.Marker.Region = NULL;
}else{
info.Marker.Region = data.frame(Region = regionName,
Marker = obj.mainRegion$markerVec,
IsUltraRareVariants = 0,
Info = obj.mainRegion$infoVec,
AltFreq = obj.mainRegion$altFreqVec,
MAC = obj.mainRegion$MACVec,
MAF = obj.mainRegion$MAFVec,
MissingRate = obj.mainRegion$missingRateVec,
Beta = obj.mainRegion$BetaVec,
seBeta = obj.mainRegion$seBetaVec,
pval0 = obj.mainRegion$pval0Vec,
pval1 = obj.mainRegion$pval1Vec)
}
if(length(obj.mainRegion$markerURVVec) == 0){
info.MarkerURV.Region = NULL;
}else{
info.MarkerURV.Region = data.frame(Region = regionName,
Marker = obj.mainRegion$markerURVVec,
IsUltraRareVariants = 1,
Info = obj.mainRegion$infoURVVec,
AltFreq = obj.mainRegion$altFreqURVVec,
MAC = obj.mainRegion$MACURVVec,
MAF = obj.mainRegion$MAFURVVec,
MissingRate = obj.mainRegion$missingRateURVVec,
Beta = NA,
seBeta = NA,
pval0 = NA,
pval1 = NA)
}
### 2. Record marker-level annotation information
posMarker = match(obj.mainRegion$markerVec, SNP)
posMarkerURV = match(obj.mainRegion$markerURVVec, SNP)
regionData = regionMat[posMarker, ,drop=F]
regionDataURV = regionMat[posMarkerURV, ,drop=F]
genoIndexURV = genoIndex[posMarkerURV]
# annotation value <= 0 will be excluded from further analysis
regionData[regionData <= 0] = 0
regionDataURV[regionDataURV <= 0] = 0
info.Marker.Region = cbind.data.frame(info.Marker.Region, regionData)
info.MarkerURV.Region = cbind.data.frame(info.MarkerURV.Region, regionDataURV)
info.Region = rbind.data.frame(info.Marker.Region, info.MarkerURV.Region)
### 3. Adjust for saddlepoint approximation
StatVec = obj.mainRegion$StatVec
VarSVec = diag(obj.mainRegion$VarMat)
adjPVec = obj.mainRegion$pval1Vec;
adjVarSVec = StatVec^2 / qchisq(adjPVec, df = 1, lower.tail = F)
r0 = adjVarSVec / VarSVec
r0 = pmax(r0, 1)
weights = dbeta(obj.mainRegion$MAFVec,
control$weights.beta[1], control$weights.beta[2])
weightsURV = dbeta(obj.mainRegion$MAFURVVec,
control$weights.beta[1], control$weights.beta[2])
pval.Region = data.frame()
for(j in 1:ncol(regionData)){  # cycle for annotation
# j = 2
AnnoName = colnames(regionData)[j]
AnnoWeights = weights * regionData[,j]
AnnoWeightsURV = weightsURV * regionDataURV[,j]
wr0 = sqrt(r0) * AnnoWeights
wStatVec = StatVec * AnnoWeights
wadjVarSMat = t(obj.mainRegion$VarMat * wr0) * wr0
tempPosURV = which(regionDataURV[,j] > 0)
nMarkersURV = length(tempPosURV)
if(length(tempPosURV) <= 3){
wStatURV = wadjVarSURV = NULL
}else{
obj.mainRegionURV = mainRegionURV(NullModelClass, genoType, genoIndexURV[tempPosURV], n)
StatURV = obj.mainRegionURV$Stat;
adjPURV = obj.mainRegionURV$pval1;
adjVarSURV = StatURV^2 / qchisq(adjPURV, df = 1, lower.tail = F)
mAnnoWeightsURV = mean(AnnoWeightsURV[tempPosURV])
wStatURV = StatURV * mAnnoWeightsURV
wadjVarSURV = adjVarSURV * mAnnoWeightsURV^2
}
for(tempMaxMAF in MaxMAFVec){  # cycle for max MAF cutoff
# tempMaxMAF = MaxMAFVec[1]
tempPos = which(regionData[,j] > 0 & obj.mainRegion$MAFVec <= tempMaxMAF)
nMarkers = length(tempPos)
if(nMarkers < control$min_nMarker){
pval.Region = rbind.data.frame(pval.Region,
data.frame(Region = regionName,
nMarkers = nMarkers,
nMarkersURV = nMarkersURV,
Anno.Type = AnnoName,
MaxMAF.Cutoff = tempMaxMAF,
pval.SKATO = NA,
pval.SKAT = NA,
pval.Burden = NA))
}else{
out_SKAT_List = try(SKAT:::Met_SKAT_Get_Pvalue(Score = c(wStatVec[tempPos], wStatURV),
Phi = as.matrix(Matrix::bdiag(wadjVarSMat[tempPos, tempPos], wadjVarSURV)),  # ignore the correlation between URV and non-URV
r.corr = control$r.corr,
method = "optimal.adj",
Score.Resampling = NULL),
silent = TRUE)
if(class(out_SKAT_List) == "try-error"){
Pvalue = c(NA, NA, NA)
error.code = 2
}else if(!any(c(0,1) %in% out_SKAT_List$param$rho)){
Pvalue = c(NA, NA, NA)
error.code = 3
}else{
pos0 = which(out_SKAT_List$param$rho == 0)
pos1 = which(out_SKAT_List$param$rho == 1)
Pvalue = c(out_SKAT_List$p.value,                  # SKAT-O
out_SKAT_List$param$p.val.each[pos0],   # SKAT
out_SKAT_List$param$p.val.each[pos1])   # Burden Test
error.code = 0
}
pval.Region = rbind.data.frame(pval.Region,
data.frame(Region = regionName,
nMarkers = nMarkers,
nMarkersURV = nMarkersURV,
Anno.Type = AnnoName,
MaxMAF.Cutoff = tempMaxMAF,
pval.SKATO = Pvalue[1],
pval.SKAT = Pvalue[2],
pval.Burden = Pvalue[3]))
}
}
}
pval.Region
info.Region
pval.Region
info.Region
i
writeOutputFile(Output = list(pval.Region, info.Region),
OutputFile = list(OutputFile, paste0(OutputFile, ".markerInfo")),
OutputFileIndex = OutputFileIndex,
AnalysisType = "Region",
nEachChunk = 1,
indexChunk = i,
Start = (i==1),
End = (i==nRegions))
OutputFile
