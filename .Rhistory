LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
mf$formula = as.formula(paste(" ~", RightInFormula, "+", LeftInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(mf)
}
n = 10
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = rnorm(n),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.mf = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
mf$formula = as.formula(paste(" ~", RightInFormula, "+", LeftInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
mf$formula = as.formula(paste(" ~", RightInFormula, "+", LeftInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
mf$formula = as.formula(paste(" ~", RightInFormula, "+", LeftInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(paste0(pheno1,pheno2) ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
LeftInFormula
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
mf$formula = as.formula(paste(" ~", RightInFormula, "+", LeftInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
paste0(c("a","b"), collapse = ",")
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
NewLeftInFormla = paste0("paste(", gsub("+", ",", LeftInFormula), ", collapse = ',')")
mf$formula = as.formula(paste(NewLeftInFormla, "~", RightInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
NewLeftInFormla = paste0("paste(", gsub("+", ",", LeftInFormula), ", collapse = ',')")
print(LeftInFormula)
print(NewLeftInFormla)
mf$formula = as.formula(paste(NewLeftInFormla, "~", RightInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
NewLeftInFormla = paste0("paste(", gsub("\\+", ",", LeftInFormula), ", collapse = ',')")
print(LeftInFormula)
print(NewLeftInFormla)
mf$formula = as.formula(paste(NewLeftInFormla, "~", RightInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
test.function = function(formula,
data,
subset = NULL,
subjData)
{
Call = match.call()
mf <- match.call(expand.dots = FALSE)
LeftInFormula = deparse(formula[[2]])
LeftIncludesAdd = grepl("\\+", LeftInFormula)
if(LeftIncludesAdd){
cat("YES\n")
# only supports SPAmix
RightInFormula = deparse(formula[[3]])
# NewLeftInFormla = paste0("paste(", gsub("\\+", ",", LeftInFormula), ", collapse = ',')")
NewLeftInFormla = paste0("paste(", gsub("\\+", ",", LeftInFormula), ")")
print(LeftInFormula)
print(NewLeftInFormla)
mf$formula = as.formula(paste(NewLeftInFormla, "~", RightInFormula))
}
print(mf)
m <- match(x = c("formula", "data", "subset", "subjData"),
table = names(mf), nomatch = 0L)
mf <- mf[c(1L, m)]
mf$drop.unused.levels <- TRUE
mf[[1L]] <- quote(stats::model.frame)
mf <- eval(expr = mf, envir = parent.frame())
mt = attr(x = mf, which = "terms")
response = model.response(mf)
designMat = model.matrix(object = mt, data = mf)
subjData = model.extract(mf, "subjData")
obj.ls = list(response = response,
designMat = designMat,
subjData =  subjData)
return(obj.ls)
}
n = 5
test.df = data.frame(pheno1 = rnorm(n),
pheno2 = c(rnorm(n-1), NA),
cov1 = rnorm(n),
cov2 = rnorm(n),
subjData = paste0("subj-",1:n))
head(test.df)
obj.ls = test.function(pheno1 + pheno2 ~ cov1 + cov2, test.df, subjData = subjData)
obj.ls
?GRAB.SPAmix
test = "a + b"
strsplit(test, "+")
strsplit(test, "\\+")
strsplit(test, "\\+")[[1]]
length(strsplit(test, "\\+")[[1]])
paste(rep(NA, 2), collapse = " ")
a=matrix(rnorm(20),4,5)
a[1,]
a[1,,drop=F]
a[,1,drop=F]
cat("We remove ",length(posNoValue)," individuals without any phenotyeps in analysis.\n")
posNoValue=rep(1,2)
cat("We remove ",length(posNoValue)," individuals without any phenotyeps in analysis.\n")
cat("We remove",length(posNoValue),"individuals without any phenotyeps in analysis.\n")
a = matrix(20,4,5)
length(a)
class(a) = "dd"
length(a)
a=rnorm(5)
ncol(a)
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
head(PhenoData)
library(GRAB)
?GRAB.SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
library(GRAB)
?GRAB.SPAmix
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
PC = matrix(rnorm(20), 5, 4)
diag(solve(t(PC) %*% PC))
PC = matrix(rnorm(20), 50, 4)
diag(solve(t(PC) %*% PC))
PC = matrix(rnorm(200), 50, 4)
diag(solve(t(PC) %*% PC))
a=rnorm(10)
a
a[c(1,3,4)]^2
library(GRAB)
?GRAB.SPAmix
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add two PCs, which are required for SPAmix
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
obj.SPAmix
names(obj.SPAmix)
obj.SPAmix$outLierList
length(obj.SPAmix$outLierList)
names(obj.SPAmix$outLierList[1])
names(obj.SPAmix$outLierList[[1]])
names(objNull)
names(obj.SPAmix)
data.frame(a=1:2, b=1:10)
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
N = nrow(PhenoData)
PhenoData = PhenoData %>% mutate(PC1 = rnorm(N), PC2 = rnorm(N))  # add tw
obj.coxph = coxph(Surv(SurvTime, SurvEvent)~AGE+GENDER+PC1+PC2, data = PhenoData)
obj.lm = lm(QuantPheno ~ AGE+GENDER+PC1+PC2, data = PhenoData)
obj.SPAmix = GRAB.NullModel(obj.coxph$residuals + obj.lm$residuals ~ AGE + GENDER + PC1 + PC2,
data = PhenoData,
subjData = IID,
method = "SPAmix",
traitType = "Residual",
control = list(PC_columns = "PC1,PC2"))
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/Results_SPAmix.txt")
GRAB.Marker(obj.SPAmix, GenoFile = GenoFile, OutputFile = OutputFile, control = list(outputColumns = "zScore"))
data.table::fread(OutputFile)
