?GRAB.control
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.control
?GRAB.Marker
?GRAB.NullModel
?GRAB.SPACox
?GRAB.POLMM
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
SparseGRMFile
library(GRAB)
library(GRAB)
?GRAB.POLMM
?GRAB.NullModel
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.File", package = "GRAB")
SparseGRMFile
system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
library(GRAB)
?GRAB.NullModel
?GRAB.POLMM
SparseGRM = data.table::fread(SparseGRMFile)
SparseGRMFile
SparseGRMFile = system.file("SparseGRM","SparseGRM.txt",package="GRAB")
SparseGRM = data.table::fread(SparseGRMFile)
SparseGRM
SparseGRM = as.data.frame(SparseGRM)
head(SparseGRM)
subjData = c("f1_1","f1_2","f1_3")
subjData
colnames(SparseGRM) != c("ID1", "ID2", "VALUE")
toupper(colnames(SparseGRM)) != c("ID1", "ID2", "VALUE")
if(any(toupper(colnames(SparseGRM)) != c("ID1", "ID2", "VALUE")))
stop("The header in 'SparseGRMFile' should be c('ID1','ID2','Value')")
colnames(SparseGRM) = toupper(colnames(SparseGRM))
tempGRM1 = SparseGRM;
tempGRM2 = data.frame(ID1=tempGRM1$ID2,
ID2=tempGRM1$ID1,
value=tempGRM1$VALUE)
tempGRM = rbind(tempGRM1, tempGRM2)
tempGRM = tempGRM[-1*which(duplicated(tempGRM)),]
ID1 = tempGRM$ID1;
ID2 = tempGRM$ID2;
value = tempGRM$value;
if(any(!is.element(subjData, ID1)))
stop("At least one of subjects is not in SparseGRM.")
location1 = match(ID1, subjData);
location2 = match(ID2, subjData);
pos = which(!is.na(location1) & !is.na(location2))
locations = rbind(location1[pos]-1,  # -1 is to convert R to C++
location2[pos]-1)
value = value[pos];
nSubj = length(subjData);
KinMatListR = list(locations = locations,
values = value,
nSubj = nSubj)
colnames(SparseGRM) = toupper(colnames(SparseGRM))
tempGRM1 = SparseGRM;
tempGRM2 = data.frame(ID1=tempGRM1$ID2,
ID2=tempGRM1$ID1,
VALUE=tempGRM1$VALUE)
tempGRM = rbind(tempGRM1, tempGRM2)
tempGRM = tempGRM[-1*which(duplicated(tempGRM)),]
ID1 = tempGRM$ID1;
ID2 = tempGRM$ID2;
value = tempGRM$value;
if(any(!is.element(subjData, ID1)))
stop("At least one of subjects is not in SparseGRM.")
location1 = match(ID1, subjData);
location2 = match(ID2, subjData);
pos = which(!is.na(location1) & !is.na(location2))
locations = rbind(location1[pos]-1,  # -1 is to convert R to C++
location2[pos]-1)
value = value[pos];
nSubj = length(subjData);
KinMatListR = list(locations = locations,
values = value,
nSubj = nSubj)
return(KinMatListR)
KinMatListR
tempGRM1 = SparseGRM;
tempGRM2 = data.frame(ID1=tempGRM1$ID2,
ID2=tempGRM1$ID1,
VALUE=tempGRM1$VALUE)
tempGRM = rbind(tempGRM1, tempGRM2)
tempGRM = tempGRM[-1*which(duplicated(tempGRM)),]
ID1 = tempGRM$ID1;
ID2 = tempGRM$ID2;
value = tempGRM$VALUE;
if(any(!is.element(subjData, ID1)))
stop("At least one of subjects is not in SparseGRM.")
location1 = match(ID1, subjData);
location2 = match(ID2, subjData);
pos = which(!is.na(location1) & !is.na(location2))
locations = rbind(location1[pos]-1,  # -1 is to convert R to C++
location2[pos]-1)
value = value[pos];
nSubj = length(subjData);
KinMatListR = list(locations = locations,
values = value,
nSubj = nSubj)
KinMatListR
Rcpp::sourceCpp('src/POLMM.cpp')
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
rm(list=ls())
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.NullModel
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
?GRAB.POLMM
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.820102
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.870175
?devtools::document
library(devtools)
?build_manual
getwd()
build_manual()
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
?GRAB.POLMM
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.870175
objNull = obj.POLMM
NullModelClass = GRAB:::checkObjNull(objNull);  # this function is in "Util.R"
NullModelClass
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
OutputFile
GRAB:::checkOutputFile(OutputFile)              # this function is in 'Util.R'
?GRAB.POLMM
## check the setting of control, if not specified, the default setting will be used
control = GRAB:::checkControl.Region(control, NullModelClass)
control = NULL
## check the setting of control, if not specified, the default setting will be used
control = GRAB:::checkControl.Region(control, NullModelClass)
?GRAB.POLMM
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
GenoFile
RegionFile
head(read.table(RegionFile))
head(read.table(RegionFile, header = T))
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
library(GRAB)
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
library(GRAB)
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.870175
objNull = obj.POLMM
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GenoFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
#########
NullModelClass = GRAB:::checkObjNull(objNull);  # this function is in "Util.R"
GRAB:::checkOutputFile(OutputFile)              # this function is in 'Util.R'
## check the setting of control, if not specified, the default setting will be used
control = GRAB:::checkControl.Region(control, NullModelClass)
SampleIDs = as.character(objNull$SampleIDs);
## set up an object for genotype
objGeno = GRAB:::setGenoInput(GenoFile, GenoFileIndex, SampleIDs)  # this function is in 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
dim(markerInfo)
head(markerInfo)
genoType
regionList = GRAB:::getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(regionList)
head(read.table(RegionFile))
getRegionList = function(regionFile,
regionAnnoHeader,
markerInfo)
{
if(!file.exists(regionFile))
stop(paste("Cannot find 'regionFile' in", regionFile))
regionData = data.table::fread(regionFile, header = T, stringsAsFactors = F);
regionData = as.data.frame(regionData)
colnames(regionData) = toupper(colnames(regionData))
HeaderInRegionData = colnames(regionData)
if(any(HeaderInRegionData[1:2] != c("REGION", "MARKER")))
stop("The first two elements in the header of 'regionFile' should be c('REGION', 'SNP').")
if(!is.null(regionAnnoHeader)){
if(any(!regionAnnoHeader %in% HeaderInRegionData))
stop("At least one element in 'regionAnnoHeader' is not in the header of regionFile")
posAnno = which(regionAnnoHeader %in% HeaderInRegionData)
}else{
print("Since no 'regionAnnoHeader' is given, region-based testing will not incorporate any annotation information.")
posAnno = NULL
}
regionList = list()
uRegion = unique(regionData$REGION)
for(r in uRegion){
posSNP = which(regionData$REGION == r)
SNP = regionData$SNP[posSNP]
if(any(duplicated(SNP)))
stop(paste0("Please check AnnoFile: in region ", r,", duplicated SNPs exist."))
posMarker = match(SNP, markerInfo$ID, 0)
if(any(posMarker == 0))
stop(paste0("At least one marker in region ", r," are not in 'GenoFile' and 'GenoFileIndex'."))
regionMat = cbind(BASE=1, regionData[posSNP, posAnno, drop=F])
rownames(regionMat) = SNP
genoIndex = markerInfo$genoIndex[posMarker]
regionList[[r]] = list(SNP = SNP,
regionMat = regionMat,
genoIndex = genoIndex)
}
return(regionList)
}
## annotation
regionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
RegionAnnoHeader = "ANNO1"
## annotation
regionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(regionList)
nRegions
regionList
regionList$`GSET-1`
RegionData = data.table::fread(RegionFile, header = T, stringsAsFactors = F);
RegionData = as.data.frame(RegionData)
colnames(RegionData) = toupper(colnames(RegionData))
HeaderInRegionData = colnames(RegionData)
if(!is.null(RegionAnnoHeader)){
if(any(!RegionAnnoHeader %in% HeaderInRegionData))
stop("At least one element in 'RegionAnnoHeader' is not in the header of RegionFile")
posAnno = which(RegionAnnoHeader %in% HeaderInRegionData)
}else{
print("Since no 'RegionAnnoHeader' is given, region-based testing will not incorporate any annotation information.")
posAnno = NULL
}
posAnno
RegionAnnoHeader
HeaderInRegionData
which(HeaderInRegionData %in% RegionAnnoHeader)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.870175
objNull = obj.POLMM
### input arguments of GRAB
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GenoFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = "ANNO1"
#########
NullModelClass = GRAB:::checkObjNull(objNull);  # this function is in "Util.R"
GRAB:::checkOutputFile(OutputFile)              # this function is in 'Util.R'
## check the setting of control, if not specified, the default setting will be used
control = GRAB:::checkControl.Region(control, NullModelClass)
SampleIDs = as.character(objNull$SampleIDs);
## set up an object for genotype
objGeno = GRAB:::setGenoInput(GenoFile, GenoFileIndex, SampleIDs)  # this function is in 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
## annotation
RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(RegionList)
RegionList
RegionData = data.table::fread(RegionFile, header = T, stringsAsFactors = F);
RegionData = as.data.frame(RegionData)
colnames(RegionData) = toupper(colnames(RegionData))
HeaderInRegionData = colnames(RegionData)
if(!is.null(RegionAnnoHeader)){
if(any(!RegionAnnoHeader %in% HeaderInRegionData))
stop("At least one element in 'RegionAnnoHeader' is not in the header of 'RegionFile'.")
posAnno = which(HeaderInRegionData %in% RegionAnnoHeader)
}else{
print("Since no 'RegionAnnoHeader' is given, region-based testing will not incorporate any annotation information.")
posAnno = NULL
}
RegionList = list()
uRegion = unique(RegionData$REGION)
r = uRegion[1]
r
posSNP = which(RegionData$REGION == r)
SNP = RegionData$SNP[posSNP]
SNP
RegionData
head(markerInfo)
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
names(obj.POLMM)
obj.POLMM$tau    # 1.870175
objNull = obj.POLMM
### input arguments of GRAB
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/POLMM_Regions.txt")
control = NULL
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
GenoFileIndex = NULL
RegionFile = system.file("extdata", "example.RegionFile.txt", package = "GRAB")
RegionAnnoHeader = "ANNO1"
#########
NullModelClass = GRAB:::checkObjNull(objNull);  # this function is in "Util.R"
GRAB:::checkOutputFile(OutputFile)              # this function is in 'Util.R'
## check the setting of control, if not specified, the default setting will be used
control = GRAB:::checkControl.Region(control, NullModelClass)
SampleIDs = as.character(objNull$SampleIDs);
## set up an object for genotype
objGeno = GRAB:::setGenoInput(GenoFile, GenoFileIndex, SampleIDs)  # this function is in 'Geno.R'
genoType = objGeno$genoType
markerInfo = objGeno$markerInfo
## annotation
RegionList = getRegionList(RegionFile, RegionAnnoHeader, markerInfo)
nRegions = length(RegionList)
RegionList
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
# obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
#                            data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
#                            GenoFile = GenoFile,
#                            control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
#
library(GRAB)
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
remove.packages("GRAB", lib="~/R/win-library/4.0")
library(GRAB)
PhenoData = read.table(system.file("extdata", "example.pheno", package = "GRAB"), header = T)
GenoFile = system.file("extdata", "example.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
obj.POLMM = GRAB.NullModel(factor(Ordinal) ~ Cova1 + Cova2,
data = PhenoData, subjData = PhenoData$IID, method = "POLMM", traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile,
control = list(showInfo = FALSE, LOCO = FALSE, tolTau = 0.2, tolBeta = 0.1))
library(GRAB)
remove.packages("GRAB", lib="~/R/win-library/4.0")
