t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
objNull$resid
hist(objNull$resid)
quantile(objNull$resid)
quantile(objNull$resid, 0.25)
quantile(objNull$resid, 0.75)
round(quantile(objNull$resid, 0.75),2)
signif(quantile(objNull$resid, 0.75),2)
signif(quantile(objNull$resid, 0.75),3)
signif(quantile(objNull$resid, 0.75),2)
cutoff = c(q25 - r.outlier * IQR, q75 + r.outlier * IQR)
q25 = quantile(mresid, 0.25)
q75 = quantile(mresid, 0.75)
IQR = q75 - q25
r.outlier = 1.5    # put this to the control argument later
cutoff = c(q25 - r.outlier * IQR, q75 + r.outlier * IQR)
mresid = objNull$resid
q25 = quantile(mresid, 0.25)
q75 = quantile(mresid, 0.75)
IQR = q75 - q25
r.outlier = 1.5    # put this to the control argument later
cutoff = c(q25 - r.outlier * IQR, q75 + r.outlier * IQR)
cutoff
signif(cutoff,2)
cat("Cutoffs to define residuals: ", signif(cutoff,2))
cat("The outlier of residuals will be passed to SPA analysis.\n")
cat("Cutoffs to define residuals:\t", signif(cutoff,2),"\n")
cat("Totally, ", length(posOutlier),"/", length(outlier), " are defined as outliers.")
posOutlier = which(mresid < cutoff[1] | mresid > cutoff[2])
cat("The outlier of residuals will be passed to SPA analysis.\n")
cat("Cutoffs to define residuals:\t", signif(cutoff,2),"\n")
cat("Totally, ", length(posOutlier),"/", length(outlier), " are defined as outliers.")
cat("Totally, ", length(posOutlier),"/", length(mresid), " are defined as outliers.")
library(GRAB)
library(GRAB)
source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/test_bwj_2023-04-21.R", echo=TRUE)
results_before_partial_normal <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results_before_partial_normal.txt")
View(results_before_partial_normal)
results <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
View(results)
res1 = read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
res2 = read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results_before_partial_normal.txt")
head(res1)
res1 %>% filter(Pvalue < 1e-4)
res1 %>% filter(Pvalue < 1e-3)
res2 %>% filter(Pvalue < 1e-3)
library(GRAB)
library(GRAB)
source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/test_bwj_2023-04-21.R", echo=TRUE)
plot(-log10(res1$Pvalue), -log10(res2$Pvalue))
abline(0,1)
library(GRAB)
source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/test_bwj_2023-04-21.R", echo=TRUE)
library(GRAB)
source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/test_bwj_2023-04-21.R", echo=TRUE)
library(GRAB)
source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/test_bwj_2023-04-21.R", echo=TRUE)
log10(0.4)
log10(0.1)
install.packages("cowplot")
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
transition = function()
{
scales::trans_new('typeIerror',
transform = function(x) x^(1/5),
inverse = function(x) x^5)
}
power = data.table::fread("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/powerpval.txt")
power = power %>% rename(Method = method) %>%
filter(Method %in% c("EmpSPAGRM", "adjEmpSPAGRM", "TrajGWAS")) %>%
drop_na(pvalue) %>% filter(pvalue > 1e-100) %>% filter(pvalue < 0.05) %>%
mutate(chisq = qchisq(pvalue, 1, lower.tail = FALSE))
power$MAF = factor(power$MAF, levels = c("common", "rare"),
labels = c("Common Variants", "Rare Variants"))
power$Method = factor(power$Method, levels = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"))
power$type = factor(power$type,
levels = c("A", "B", "C"),
labels = c("A: Small-family-based Population", "B: Large-family-based Population", "C: Unrelated Population"))
pbeta = ggplot(power %>% filter(scenario == 2 & para == "beta"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + ggtitle(expression(paste("Testing for ", italic(beta[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition()) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
ptau = ggplot(power %>% filter(scenario == 2 & para == "tau"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + xlab("") + ggtitle(expression(paste("Testing for ", italic(tau[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition()) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
legend = get_legend(pbeta + guides(color = guide_legend(nrow = 1)) +
theme(legend.direction = "horizontal",
legend.justification="center",
legend.position = "bottom",
legend.box.just = "left",
legend.title.align = 1,
legend.text.align = 0.1))
p = plot_grid(pbeta + theme(legend.position = "none"), ptau + theme(legend.position = "none"),
ncol = 1, align = "hv", axis = "tblr",
labels = c("A", "B"), label_x = 0)
p = ggdraw(p) + draw_label("Chi-squared Values", size = 12, angle = 90, hjust = 0.5, x = -0.01, y = 0.5)
p = plot_grid(p, legend, ncol = 1, rel_heights = c(1, 0.03)) +
theme(plot.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
plot.margin = unit(c(0, 0, 0, 1), "lines"))
p
head(power)
# updated by BWJ on 2023-04-24
power = power %>% mutate(chisq = ifelse(chisq > 100, 100, chisq))
pbeta = ggplot(power %>% filter(scenario == 2 & para == "beta"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + ggtitle(expression(paste("Testing for ", italic(beta[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition()) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
ptau = ggplot(power %>% filter(scenario == 2 & para == "tau"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + xlab("") + ggtitle(expression(paste("Testing for ", italic(tau[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition()) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
legend = get_legend(pbeta + guides(color = guide_legend(nrow = 1)) +
theme(legend.direction = "horizontal",
legend.justification="center",
legend.position = "bottom",
legend.box.just = "left",
legend.title.align = 1,
legend.text.align = 0.1))
p = plot_grid(pbeta + theme(legend.position = "none"), ptau + theme(legend.position = "none"),
ncol = 1, align = "hv", axis = "tblr",
labels = c("A", "B"), label_x = 0)
p = ggdraw(p) + draw_label("Chi-squared Values", size = 12, angle = 90, hjust = 0.5, x = -0.01, y = 0.5)
p = plot_grid(p, legend, ncol = 1, rel_heights = c(1, 0.03)) +
theme(plot.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
plot.margin = unit(c(0, 0, 0, 1), "lines"))
p
qchisq(5e-5, 1, lower.tail = F)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
seq(10,100,10)^(1/5)
approx(c(5,10,30,100),c(0,10,90,100))
approx = approx(c(5,10,30,100),c(0,10,90,100))
approx(1)
approx(4)
approx(30)
?approx
approx = approxfun(c(5,10,30,100),c(0,10,90,100))
approx(30)
plot(seq(10,100,10),approx(seq(10,100,10)))
### power for scenario2.
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
transition = function()
{
scales::trans_new('typeIerror',
transform = function(x) x^(1/5),
inverse = function(x) x^5)
}
# updated on 2023-04-24
transition.BWJ = function(a, b)
{
scales::trans_new('typeIerror',
transform = approxfun(c(5,a,b,100),c(0,10,90,100)),
inverse = approxfun(c(0,10,90,100),c(5,a,b,100)))
}
power = data.table::fread("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/powerpval.txt")
power = power %>% rename(Method = method) %>%
filter(Method %in% c("EmpSPAGRM", "adjEmpSPAGRM", "TrajGWAS")) %>%
drop_na(pvalue) %>% filter(pvalue > 1e-100) %>% filter(pvalue < 0.05) %>%
mutate(chisq = qchisq(pvalue, 1, lower.tail = FALSE))
power$MAF = factor(power$MAF, levels = c("common", "rare"),
labels = c("Common Variants", "Rare Variants"))
power$Method = factor(power$Method, levels = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"))
power$type = factor(power$type,
levels = c("A", "B", "C"),
labels = c("A: Small-family-based Population", "B: Large-family-based Population", "C: Unrelated Population"))
# updated by BWJ on 2023-04-24
power = power %>% mutate(chisq = ifelse(chisq > 100, 100, chisq))
power = power %>% mutate(chisq = ifelse(chisq < 5, 5, chisq))
pbeta = ggplot(power %>% filter(scenario == 2 & para == "beta"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + ggtitle(expression(paste("Testing for ", italic(beta[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition.BWJ(20,70)) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
ptau = ggplot(power %>% filter(scenario == 2 & para == "tau"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + xlab("") + ggtitle(expression(paste("Testing for ", italic(tau[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition.BWJ(10,30)) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
legend = get_legend(pbeta + guides(color = guide_legend(nrow = 1)) +
theme(legend.direction = "horizontal",
legend.justification="center",
legend.position = "bottom",
legend.box.just = "left",
legend.title.align = 1,
legend.text.align = 0.1))
p = plot_grid(pbeta + theme(legend.position = "none"), ptau + theme(legend.position = "none"),
ncol = 1, align = "hv", axis = "tblr",
labels = c("A", "B"), label_x = 0)
p = ggdraw(p) + draw_label("Chi-squared Values", size = 12, angle = 90, hjust = 0.5, x = -0.01, y = 0.5)
p = plot_grid(p, legend, ncol = 1, rel_heights = c(1, 0.03)) +
theme(plot.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
plot.margin = unit(c(0, 0, 0, 1), "lines"))
p
# ggsave("/gdata01/user/xuhe/SPA-GRM/simulation-2023-03-22/outputs/power_scenario2-2023-04-12.png",
#        p, width = 10.5, height = 13.5)
### power for scenario2.
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
transition = function()
{
scales::trans_new('typeIerror',
transform = function(x) x^(1/5),
inverse = function(x) x^5)
}
# updated on 2023-04-24
transition.BWJ = function(a, b)
{
scales::trans_new('typeIerror',
transform = approxfun(c(5,a,b,100),c(0,10,90,100)),
inverse = approxfun(c(0,10,90,100),c(5,a,b,100)))
}
power = data.table::fread("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/powerpval.txt")
power = power %>% rename(Method = method) %>%
filter(Method %in% c("EmpSPAGRM", "adjEmpSPAGRM", "TrajGWAS")) %>%
drop_na(pvalue) %>% filter(pvalue > 1e-100) %>% filter(pvalue < 0.05) %>%
mutate(chisq = qchisq(pvalue, 1, lower.tail = FALSE))
power$MAF = factor(power$MAF, levels = c("common", "rare"),
labels = c("Common Variants", "Rare Variants"))
power$Method = factor(power$Method, levels = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"))
power$type = factor(power$type,
levels = c("A", "B", "C"),
labels = c("A: Small-family-based Population", "B: Large-family-based Population", "C: Unrelated Population"))
# updated by BWJ on 2023-04-24
power = power %>% mutate(chisq = ifelse(chisq > 100, 100, chisq))
power = power %>% mutate(chisq = ifelse(chisq < 5, 5, chisq))
pbeta = ggplot(power %>% filter(scenario == 2 & para == "beta"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + ggtitle(expression(paste("Testing for ", italic(beta[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition.BWJ(20,70)) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
ptau = ggplot(power %>% filter(scenario == 2 & para == "tau"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + xlab("") + ggtitle(expression(paste("Testing for ", italic(tau[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition.BWJ(10,30)) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
legend = get_legend(pbeta + guides(color = guide_legend(nrow = 1)) +
theme(legend.direction = "horizontal",
legend.justification="center",
legend.position = "bottom",
legend.box.just = "left",
legend.title.align = 1,
legend.text.align = 0.1))
ptau
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
### power for scenario2.
library(dplyr)
library(tidyr)
library(ggplot2)
library(cowplot)
transition = function()
{
scales::trans_new('typeIerror',
transform = function(x) x^(1/5),
inverse = function(x) x^5)
}
# updated on 2023-04-24
transition.BWJ = function(a, b)
{
scales::trans_new('typeIerror',
transform = approxfun(c(-100,5,a,b,100,1000),c(-100,0,10,90,100,1000)),
inverse = approxfun(c(-100,0,10,90,100,1000),c(-100,5,a,b,100,1000)))
}
power = data.table::fread("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/powerpval.txt")
power = power %>% rename(Method = method) %>%
filter(Method %in% c("EmpSPAGRM", "adjEmpSPAGRM", "TrajGWAS")) %>%
drop_na(pvalue) %>% filter(pvalue > 1e-100) %>% filter(pvalue < 0.05) %>%
mutate(chisq = qchisq(pvalue, 1, lower.tail = FALSE))
power$MAF = factor(power$MAF, levels = c("common", "rare"),
labels = c("Common Variants", "Rare Variants"))
power$Method = factor(power$Method, levels = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"))
power$type = factor(power$type,
levels = c("A", "B", "C"),
labels = c("A: Small-family-based Population", "B: Large-family-based Population", "C: Unrelated Population"))
# updated by BWJ on 2023-04-24
power = power %>% mutate(chisq = ifelse(chisq > 100, 100, chisq))
power = power %>% mutate(chisq = ifelse(chisq < 5, 5, chisq))
pbeta = ggplot(power %>% filter(scenario == 2 & para == "beta"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + ggtitle(expression(paste("Testing for ", italic(beta[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition.BWJ(20,70)) +
# scale_y_continuous(trans = transition.BWJ(20,70)) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
ptau = ggplot(power %>% filter(scenario == 2 & para == "tau"),
aes(x = Method, y = chisq, color = Method)) +
geom_boxplot(width = .15, alpha = 1, fatten = NULL, show.legend = FALSE, outlier.shape = NA) +
geom_violin(alpha = .6, width = .6) +
stat_summary(fun.data = "mean_se", geom = "pointrange", show.legend = F,
position = position_dodge(.175)) +
facet_grid(MAF ~ type, scales = "free") + theme_bw() + xlab("") + ggtitle(expression(paste("Testing for ", italic(tau[g]) == 0))) +
scale_y_continuous(breaks = c(5, 10, 15, 20, 30, 40, 50, 75, 100, 150, 200, 250), trans = transition.BWJ(10,30)) +
# scale_y_continuous(trans = transition.BWJ(10,30)) +
labs(x = NULL) + theme(axis.title.x = element_blank(), axis.title.y = element_blank()) +
scale_x_discrete(breaks = c("TrajGWAS", "EmpSPAGRM", "adjEmpSPAGRM"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)]))) +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73"),
labels = c("TrajGWAS", expression(SPA[GRM]), expression(SPA[GRM(adj)])))
legend = get_legend(pbeta + guides(color = guide_legend(nrow = 1)) +
theme(legend.direction = "horizontal",
legend.justification="center",
legend.position = "bottom",
legend.box.just = "left",
legend.title.align = 1,
legend.text.align = 0.1))
p = plot_grid(pbeta + theme(legend.position = "none"), ptau + theme(legend.position = "none"),
ncol = 1, align = "hv", axis = "tblr",
labels = c("A", "B"), label_x = 0)
p = ggdraw(p) + draw_label("Chi-squared Values", size = 12, angle = 90, hjust = 0.5, x = -0.01, y = 0.5)
p = plot_grid(p, legend, ncol = 1, rel_heights = c(1, 0.03)) +
theme(plot.background = element_rect(fill = "white", color = NA),
legend.background = element_rect(fill = "white", color = NA),
plot.margin = unit(c(0, 0, 0, 1), "lines"))
p
# ggsave("/gdata01/user/xuhe/SPA-GRM/simulation-2023-03-22/outputs/power_scenario2-2023-04-12.png",
#        p, width = 10.5, height = 13.5)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
source("C:/Users/wenjianb/Dropbox/SPAGRM/Code/Figure2-2023-04-24-BWJ/plot-for-power.R", echo=TRUE)
round(seq(0,2,0.1))
library(GRAB)
library(GRAB)
results_v3 <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results_v3.txt")
View(results_v3)
results_v3_old <- read.csv("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results_v3_old.txt")
View(results_v3_old)
results_v3 %>% filter(Marker == "1:1866934_CAT_C")
results_v3_old %>% filter(Marker == "1:1866934_CAT_C")
results_v3_old %>% filter(rsID == "1:1866934_CAT_C")
results_v3_old %>% filter(rsID == "rs115302220")
results_v3_old %>% filter(rsID == "rs4648725")
results_v3 %>% filter(Marker == "rs4648725")
ID = "rs186572183"; results_v3 %>% filter(Marker == ID); results_v3_old %>% filter(rsID == ID)
ID = "rs115302220"; results_v3 %>% filter(Marker == ID); results_v3_old %>% filter(rsID == ID)
ID = "rs530895959"; results_v3 %>% filter(Marker == ID); results_v3_old %>% filter(rsID == ID)
ID = "rs201817483"; results_v3 %>% filter(Marker == ID); results_v3_old %>% filter(rsID == ID)
