i=1
SNP.ID = rownames(power)[i]
(data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w"]
## score statistics
sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w"])
head(data.G.ds)
## score statistics
score.glm.w = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w"])
score.glm.w.new = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w.new"])
score.glm.w
score.glm.w.new
power$maf.case = power$maf.ctrl = power$score.glm.w = power$score.glm.w.new = NA
for(i in 1:nrow(power))
{
SNP.ID = rownames(power)[i]
maf.case = data.G.ds %>% filter(event == 1) %>% select(all_of(SNP.ID)) %>% unlist() %>% mean()
maf.ctrl = data.G.ds %>% filter(event == 0) %>% select(all_of(SNP.ID)) %>% unlist() %>% mean()
power$maf.case[i] = maf.case / 2
power$maf.ctrl[i] = maf.ctrl / 2
## score statistics
score.glm.w = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w"])
score.glm.w.new = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w.new"])
power$score.glm.w[i] = score.glm.w
power$score.glm.w.new[i] = score.glm.w.new
}
power = power %>% mutate(ratio = (maf.case - trueMAF) / (trueMAF - maf.ctrl))
power
power$maf.case = power$maf.ctrl = NA
power$score.glm.w = power$score.glm.w.new = NA
power$var.glm.w = power$var.glm.w.new = NA
for(i in 1:nrow(power))
{
SNP.ID = rownames(power)[i]
maf.case = data.G.ds %>% filter(event == 1) %>% select(all_of(SNP.ID)) %>% unlist() %>% mean()
maf.ctrl = data.G.ds %>% filter(event == 0) %>% select(all_of(SNP.ID)) %>% unlist() %>% mean()
power$maf.case[i] = maf.case / 2
power$maf.ctrl[i] = maf.ctrl / 2
## score statistics
score.glm.w = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w"])
score.glm.w.new = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w.new"])
power$score.glm.w[i] = score.glm.w
power$score.glm.w.new[i] = score.glm.w.new
## variance
var.glm.w = sum(data.G.ds[,"Resid.glm.w"]^2);
var.glm.w.new = sum(data.G.ds[,"Resid.glm.w.new"]^2);
power$var.glm.w[i] = var.glm.w;
power$var.glm.w.new[i] = var.glm.w;
}
power = power %>% mutate(ratio = (maf.case - trueMAF) / (trueMAF - maf.ctrl))
power
head(data.G.ds)
power$maf.case = power$maf.ctrl = NA
power$score.glm.w = power$score.glm.w.new = NA
power$var.glm.w = power$var.glm.w.new = NA
for(i in 1:nrow(power))
{
SNP.ID = rownames(power)[i]
maf.case = data.G.ds %>% filter(event == 1) %>% select(all_of(SNP.ID)) %>% unlist() %>% mean()
maf.ctrl = data.G.ds %>% filter(event == 0) %>% select(all_of(SNP.ID)) %>% unlist() %>% mean()
power$maf.case[i] = maf.case / 2
power$maf.ctrl[i] = maf.ctrl / 2
## score statistics
score.glm.w = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w"])
score.glm.w.new = sum((data.G.ds[,SNP.ID] - 2*power$trueMAF[i]) * data.G.ds[,"Resid.glm.w.new"])
power$score.glm.w[i] = score.glm.w
power$score.glm.w.new[i] = score.glm.w.new
## variance
var.glm.w = sum(data.G.ds[,"Resid.glm.w"]^2);
var.glm.w.new = sum(data.G.ds[,"Resid.glm.w.new"]^2);
power$var.glm.w[i] = var.glm.w;
power$var.glm.w.new[i] = var.glm.w.new;
}
power = power %>% mutate(ratio = (maf.case - trueMAF) / (trueMAF - maf.ctrl))
power
rm(list=ls())
setwd("C:/Users/wenjianb/Dropbox/Wenjian-Liying/code/debug-2023-01-13")
load("test.RData")
power
head(data.ds)
library(ggplot2)
library(patchwork)
library(dplyr)
library(tidyr)
with(data.ds, sum(Resid.glm.w))
with(data.ds, sum(Resid.glm))
sumResid = with(data.ds, sum(Resid.glm.w))
sumWeight = with(data.ds, sum(weight1))
data.ds = data.ds %>% mutate(Resid.glm.w.diff = weight1 / sumWeight * sumResid,
Resid.glm.w.new = Resid.glm.w - Resid.glm.w.diff)
p1 = ggplot(data.ds, aes(event, Resid.glm)) + geom_point()
p2 = ggplot(data.ds, aes(event, Resid.glm.w)) + geom_point()
p3 = ggplot(data.ds, aes(event, Resid.glm.w.diff)) + geom_point()
p4 = ggplot(data.ds, aes(event, Resid.glm.w.new)) + geom_point()
(p1 | p2) / (p3 | p4)
data.ds
head(data.ds)
p1 = ggplot(data.ds, aes(event, Resid.glm, color=as.factor(event))) + geom_point()
p2 = ggplot(data.ds, aes(event, Resid.glm.w, color=as.factor(event))) + geom_point()
p3 = ggplot(data.ds, aes(event, Resid.glm.w.diff, color=as.factor(event))) + geom_point()
p4 = ggplot(data.ds, aes(event, Resid.glm.w.new, color=as.factor(event))) + geom_point()
(p1 | p2) / (p3 | p4)
dim(data.ds)
head(data.ds)
10000 * 1^2
10000 * 1^2 + 20000 * 0.5^2
763+4245
(763+4245) / 2
jobs.table = c()
pos = 1
for(CHR in 1:22)
{
for(phenoName in c("mdd_p_t1", "mdd_c_t1", "mdd_pc_t1", "DS_p_t1","DS_y_t1","DS_t1"))
{
for(envName in c("ctq_binaSum", "ctq_sum", "ctq_sum_norm", "ctq_bina", "phyabu", "emoabu", "sexabu", "phyneg", "emoneg"))
{
jobs.table = rbind(jobs.table,
c(CHR, phenoName, envName, pos))
pos = pos + 1
}
}
}
jobs.table = data.table::data.table(jobs.table)
colnames(jobs.table) = c("CHR", "phenoName", "envName", "pos")
jobs.table$pos = as.numeric(jobs.table$pos)
n.cpu=1
CHR = jobs.table$CHR[jobs.table$pos==n.cpu]
phenoName = jobs.table$phenoName[jobs.table$pos==n.cpu]
envName = jobs.table$envName[jobs.table$pos==n.cpu]
CHR
phenoName
envName
jobs.table
jobs.table[1082,]
jobs.table[1080,]
jobs.table[1081,]
jobs.table[c(1085,1086,1087),]
5317 * 1644288 * 8 / 1024^3
5317 * 1e5 * 8 / 1024^3
5317 * 5e4 * 8 / 1024^3
jobs.table = c()
pos = 1
for(CHR in 1:22)
{
for(phenoName in c("mdd_p_t1", "mdd_c_t1", "mdd_pc_t1", "DS_p_t1","DS_y_t1","DS_t1"))
{
for(envName in c("ctq_binaSum", "ctq_sum", "ctq_sum_norm", "ctq_bina", "phyabu", "emoabu", "sexabu", "phyneg", "emoneg"))
{
jobs.table = rbind(jobs.table,
c(CHR, phenoName, envName, pos))
pos = pos + 1
}
}
}
jobs.table = data.table::data.table(jobs.table)
colnames(jobs.table) = c("CHR", "phenoName", "envName", "pos")
jobs.table$pos = as.numeric(jobs.table$pos)
dim(jobs.table)
head(jobs.table)
25000001 / 5000
25000091 / 5000
5001 / 5000
ceiling(5001 / 5000)
nSNP=5001
nSNPinEachRep = 5000
nReps = ceiling(nSNP / nSNPinEachRep)
nReps
iRep=1
posStart = (iRep-1)*nSNPinEachRep + 1
posEnd = min(iRep*nSNPinEachRep, nSNP)
posTempSNPs = posStart:posEnd
posTempSNPs
posStart
posEnd
iRep=2
posStart = (iRep-1)*nSNPinEachRep + 1
posEnd = min(iRep*nSNPinEachRep, nSNP)
pritn(c(posStart, posEnd))
print(c(posStart, posEnd))
posTempSNPs = unique(posTempSNPs)
posTempSNPs
posTempSNPs = posStart:posEnd
posTempSNPs = unique(posTempSNPs)
posTempSNPs = posStart:posEnd
posTempSNPs
library(SPAGE)
library(GRAB)
?GRAB.makePlink
?CCT
?error
?stop
sessionInfo()
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
a=data.frame(a1=1:100)
a
cbind("aa",a)
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
library(GRAB)
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
PhenoData = data.table::fread(PhenoFile, header = T)
PhenoData = PhenoData %>% mutate(OrdinalPheno = factor(OrdinalPheno,
levels = c(0, 1, 2)))
SparseGRMFile =  system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
obj.POLMM = GRAB.NullModel(formula = OrdinalPheno ~ AGE + GENDER,
data = PhenoData,
subjData = PhenoData$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile =  SparseGRMFile,
control = list(showInfo = FALSE,
LOCO = FALSE,
tolTau = 0.2,
tolBeta = 0.1))
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
save(obj.POLMM, file = objPOLMMFile)
objPOLMMFile = system.file("results", "objPOLMMFile.RData", package = "GRAB")
load(objPOLMMFile)   # read in an R object of "obj.POLMM"
GenoFile = system.file("extdata", "simuPLINK_RV.bed", package = "GRAB")
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuRegionOutput.txt")
GroupFile = system.file("extdata", "simuPLINK_RV.group", package = "GRAB")
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".markerInfo"))
file.remove(paste0(OutputFile, ".index"))
GRAB.Region(objNull = obj.POLMM,
GenoFile = GenoFile,
GenoFileIndex = NULL,
OutputFile = OutputFile,
OutputFileIndex = NULL,
GroupFile = GroupFile,
SparseGRMFile = SparseGRMFile,
MaxMAFVec = "0.01,0.005")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/test.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/test.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/test.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/test.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/test.cpp")
library(GRAB)
