# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
printTimeDiffSPAmixInCPP()
system.time()
Sys.time()
t1 = Sys.time()
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
# simuGENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.csv")
#
# simuGENO = as.matrix(simuGENO)
# rownames(simuGENO) = paste0("Subj-", 1:10000)
#
# GRAB.makePlink(simuGENO, "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO")
# system("/gdata02/master_data/apps/PLINK-1.90/plink --file /gdata01/user/wenjianb/plink-example/simuGENO --make-bed --out /gdata01/user/wenjianb/plink-example/simuGENO")
# summary(objNull)
#
# GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed"
# OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"
# control = list(AllMarkers = TRUE,
#                outputColumns = c("AltFreqInGroup", "AltCountsInGroup"))
#
# GenoFileIndex = NULL
# OutputFileIndex = NULL
#
# # res.SPAmix = SPAmix_cpp(Geno.mtx = as.matrix(simuGENO), obj.null = obj.null.SPAmix, PCs = top4PCs)
#
# # The below is from "GRAB_Marker.R"
#
# NullModelClass = checkObjNull(objNull);         # this function is in 'Util.R'
#
# if(is.null(OutputFileIndex))
#   OutputFileIndex = paste0(OutputFile, ".index")
#
# # check the setting of control, if not specified, the default setting will be used
# # The following functions are in 'control.R'
# checkControl.ReadGeno(control)
# control = checkControl.Marker(control, NullModelClass)  # this function is in 'control.R'
# nMarkersEachChunk = control$nMarkersEachChunk;
# outList = checkOutputFile(OutputFile, OutputFileIndex, "Marker", format(nMarkersEachChunk, scientific=F))    # this function is in 'Util.R'
#
# indexChunk = outList$indexChunk
# Start = outList$Start
# End = outList$End
#
# if(End)
# {
#   message = paste0("The analysis has been completed in earlier analysis. Results have been saved in '", OutputFile, "'. ",
#                    "If you want to change parameters and restart the analysis, please use another 'OutputFile'.")
#   return(message)
# }
#
# if(!Start){
#   message = paste0("We detected that parts of analysis have been conducted from file:\t",
#                    OutputFileIndex,"\n",
#                    "We restart the analysis from chunk:\t",indexChunk+1,"\n");
#   cat(message)
# }
#
# subjData = as.character(objNull$subjData);
#
# Group = makeGroup(objNull$yVec)  # this function is in Util.R: categorize subjects into multiple groups and check AltFreq/AltCoutns in each group.
# ifOutGroup = any(c("AltFreqInGroup", "AltCountsInGroup") %in% control$outputColumns)
#
# ## set up an object for genotype
# objGeno = setGenoInput(GenoFile, GenoFileIndex, subjData, control)  # this function is in 'Geno.R'
# genoType = objGeno$genoType
# markerInfo = objGeno$markerInfo
# CHROM = markerInfo$CHROM
# genoIndex = markerInfo$genoIndex
#
# # all markers were split into multiple chunks,
# # 1. SNPs in the same CHROM will be grouped into the chunk
# # 2. the chunks will be ordered based on CHROM
# genoIndexList = splitMarker(genoIndex, nMarkersEachChunk, CHROM);
#
# nChunks = length(genoIndexList)
#
# cat("Number of all markers to test:\t", nrow(markerInfo), "\n")
# cat("Number of markers in each chunk:\t", nMarkersEachChunk, "\n")
# cat("Number of chunks for all markers:\t", nChunks, "\n")
#
# chrom = "InitialChunk"
# # for(i in (indexChunk+1):nChunks)
# # {
# i = 1
# tempList = genoIndexList[[i]]
# genoIndex = tempList$genoIndex
# tempChrom = tempList$chrom
#
# # set up objects that do not change for different variants
# if(tempChrom != chrom){
#   setMarker(NullModelClass, objNull, control, chrom, Group, ifOutGroup)
#   chrom = tempChrom
# }
#
# cat(paste0("(",Sys.time(),") ---- Analyzing Chunk ", i, "/", nChunks, ": chrom ", chrom," ---- \n"))
#
# # main function to calculate summary statistics for markers in one chunk
# resMarker = mainMarker(NullModelClass, genoType, genoIndex, control$outputColumns)
#
# writeOutputFile(Output = list(resMarker),
#                 OutputFile = list(OutputFile),
#                 OutputFileIndex = OutputFileIndex,
#                 AnalysisType = "Marker",
#                 nEachChunk = format(nMarkersEachChunk, scientific=F),
#                 indexChunk = i,
#                 Start = (i==1),
#                 End = (i==nChunks))
# # }
#
# results <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
# res_SPAmix <- read.csv("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/res_SPAmix.csv")
#
# hist(results$Pvalue)
# # hist(res_SPAmix$p.value.spamix)
#
# tail(res_SPAmix)
#
# plot(-log10(res_SPAmix$p.value.spamix), -log10(results$Pvalue))
# abline(0,1)
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE,
#                            outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE,
#                            outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
## step 1
library(GRAB)
# library(data.table)
# library(survival)
# source("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/SPAmix-functions-cpp-2023-03-13.R")
# source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/SPAmix-functions-cpp-2023-03-13.R")
# --------------------------------------------------------------------------------
# N = 10000  # sample size
# simuPHENO = data.table::fread("C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
simuPHENO = data.table::fread("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuPHENO.csv")
#### calculate martingale residuals
# obj.null.SPAmix = SPA_G_Null_Model(Surv(Time,Event)~PC1+PC2+PC3+PC4+AGE+GENDER,
#                                    data=simuPHENO,
#                                    pIDs=simuPHENO$IID,
#                                    gIDs=simuPHENO$IID)
# save(obj.null.SPAmix, file = "C:/Users/10309/Dropbox/EmpSPA/code/2023-04-20/exampleData/obj.null.SPAmix.RData")
objNull = GRAB.NullModel(Surv(Time,Event) ~ PC1 + PC2 + PC3 + PC4 + AGE + GENDER,
data = simuPHENO,
subjData = IID,
method = "SPAmix",
traitType = "time-to-event",
control = list(PC_columns = c('PC1,PC2,PC3,PC4')))
t1 = Sys.time()
if(file.exists("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt"))
file.remove("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
GRAB.Marker(objNull,
GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
control = list(AllMarkers = TRUE,
outputColumns = c("AltFreqInGroup", "AltCountsInGroup")))
# GRAB.Marker(objNull,
#             GenoFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/simuGENO.bed",
#             OutputFile = "C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt",
#             control = list(AllMarkers = TRUE))
t2 = Sys.time()
t2 - t1
printTimeDiffSPAmixInCPP()  # run this function after successfully runing GRAB.Marker()
objNull$resid
hist(objNull$resid)
quantile(objNull$resid)
quantile(objNull$resid, 0.25)
quantile(objNull$resid, 0.75)
round(quantile(objNull$resid, 0.75),2)
signif(quantile(objNull$resid, 0.75),2)
signif(quantile(objNull$resid, 0.75),3)
signif(quantile(objNull$resid, 0.75),2)
cutoff = c(q25 - r.outlier * IQR, q75 + r.outlier * IQR)
q25 = quantile(mresid, 0.25)
q75 = quantile(mresid, 0.75)
IQR = q75 - q25
r.outlier = 1.5    # put this to the control argument later
cutoff = c(q25 - r.outlier * IQR, q75 + r.outlier * IQR)
mresid = objNull$resid
q25 = quantile(mresid, 0.25)
q75 = quantile(mresid, 0.75)
IQR = q75 - q25
r.outlier = 1.5    # put this to the control argument later
cutoff = c(q25 - r.outlier * IQR, q75 + r.outlier * IQR)
cutoff
signif(cutoff,2)
cat("Cutoffs to define residuals: ", signif(cutoff,2))
cat("The outlier of residuals will be passed to SPA analysis.\n")
cat("Cutoffs to define residuals:\t", signif(cutoff,2),"\n")
cat("Totally, ", length(posOutlier),"/", length(outlier), " are defined as outliers.")
posOutlier = which(mresid < cutoff[1] | mresid > cutoff[2])
cat("The outlier of residuals will be passed to SPA analysis.\n")
cat("Cutoffs to define residuals:\t", signif(cutoff,2),"\n")
cat("Totally, ", length(posOutlier),"/", length(outlier), " are defined as outliers.")
cat("Totally, ", length(posOutlier),"/", length(mresid), " are defined as outliers.")
library(GRAB)
library(GRAB)
source("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/code/test_bwj_2023-04-21.R", echo=TRUE)
results_before_partial_normal <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results_before_partial_normal.txt")
View(results_before_partial_normal)
results <- read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
View(results)
res1 = read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results.txt")
res2 = read.delim("C:/Users/wenjianb/Dropbox/EmpSPA/code/2023-04-20/exampleData/results_before_partial_normal.txt")
head(res1)
res1 %>% filter(Pvalue < 1e-4)
res1 %>% filter(Pvalue < 1e-3)
res2 %>% filter(Pvalue < 1e-3)
library(GRAB)
