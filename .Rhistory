GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
file.remove(OutputFile)
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
data.table::fread(OutputFile)
?GRAB.Marker
?GRAB.Marker
OutputFile$Missing
Output = data.table::fread(OutputFile)
summary(Output$MissingRate)
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(nMarkersEachChunk = 1000,
ImputeMethod = "mean",
MissingRateCutoff = 0.05,
MinMAFCutoff = 0.1))
file.remove(OutputFile)
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(nMarkersEachChunk = 1000,
ImputeMethod = "mean",
MissingRateCutoff = 0.05,
MinMAFCutoff = 0.1))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(nMarkersEachChunk = 1000,
ImputeMethod = "mean",
MissingRateCutoff = 0.05,
MinMAFCutoff = 0.1))
data.table::fread(OutputFileIndex)
d=1
data.table::fread(OutputFile)
data.table::fread(OutputFile)
data.table::fread(OutputFile)
data.table::fread(OutputFileIndex)
OutputFile
data.table::fread(paste0(OutputFile,".index"))
?GRAB.Marker
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
class(objNull)    # "POLMM_NULL_Model", that indicates an object from POLMM method.
OutputDir = system.file("results", package = "GRAB")
OutputFile = paste0(OutputDir, "/simuOUTPUT.txt")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
data.table::fread(OutputFile)
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(outputColumns = c("beta", "seBeta", "zScore","nSamplesInGroup","AltCountsInGroup","AltFreqInGroup")))
data.table::fread(OutputFile)
?GRAB.Marker
?GRAB.ReadGeno
library(GRAB)
set.seed(12345)
OutList = GRAB.SimuGMat(nSub = 500,       # 500 unrelated subjects
nFam = 50,        # 50 families
FamMode = "10-members",   # each family includes 10 members
nSNP = 10000,     # 10000 SNPs
MaxMAF = 0.5, MinMAF = 0.05)  # MAFs follow a uniform distribuiton U(0.05, 0.5)
summary(OutList)
markerInfo = OutList$markerInfo
markerInfo
GenoMat = OutList$GenoMat
dim(GenoMat)
GenoMat[,1:10]
rownames(GenoMat)[1:5]
rownames(GenoMat)[996:1000]
MissingRate = 0.05
indexMissing = sample(length(GenoMat), MissingRate * length(GenoMat))
GenoMat[indexMissing] = -9
GenoMat[,1:10]
indexMissing
GenoMat[,1:10]
GenoMat[1:6,1:10]
GenoMat
GenoMat[,1:10]
as.matrix(GenoMat)[1:10,1:10]
rownames(GenoMat)
rownames(as.matrix(GenoMat))
rownames(as.matrix(GenoMat, row.names=T))
GenoMat
GenoMat[,1:10]
library(GRAB)
set.seed(12345)
OutList = GRAB.SimuGMat(nSub = 500,       # 500 unrelated subjects
nFam = 50,        # 50 families
FamMode = "10-members",   # each family includes 10 members
nSNP = 10000,     # 10000 SNPs
MaxMAF = 0.5, MinMAF = 0.05)  # MAFs follow a uniform distribuiton U(0.05, 0.5)
summary(OutList)
markerInfo = OutList$markerInfo
markerInfo
GenoMat = OutList$GenoMat
dim(GenoMat)
class(GenoMat)
GenoMat[c(1:5,996:1000),1:10]
MissingRate = 0.05
indexMissing = sample(length(GenoMat), MissingRate * length(GenoMat))
GenoMat[indexMissing] = -9
GenoMat[c(1:5,996:1000),1:10]
extDir = system.file("extdata", package = "GRAB")
extPrefix = paste0(extDir, "/simuPLINK")
extPrefix
GRAB.makePlink(GenoMat, extPrefix)
setwd(extDir)
list.files()
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = data.table::fread(FamFile)
FamData
set.seed(678910)
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = data.table::fread(FamFile)
IID = FamData$V2  # Individual ID
n = length(IID)   # su
Pheno = data.frame(IID = IID,
AGE = rnorm(n, 60),
GENDER = rbinom(n, 1, 0.5))
PhenoFile = system.file("extdata", "simuCovar.txt", package = "GRAB")
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
PhenoFile
PhenoFile = "D:/Github/GRAB/inst/extdata/simuCovar.txt"
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
library(GRAB)
set.seed(678910)
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = data.table::fread(FamFile)
IID = FamData$V2  # Individual ID
n = length(IID)   # su
Pheno = data.frame(IID = IID,
AGE = rnorm(n, 60),
GENDER = rbinom(n, 1, 0.5))
PhenoFile = system.file("extdata", "simuCovar.txt", package = "GRAB")
PhenoFile
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
set.seed(13579)
CovarFile = system.file("extdata", "simuCovar.txt", package = "GRAB")
Covar = read.table(CovarFile)
Covar
head(Covar)
Covar = read.table(CovarFile, header=T)
Covar
head(Covar)
Covar = data.table::fread(CovarFile, header=T)
Covar
set.seed(678910)
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = data.table::fread(FamFile)
IID = FamData$V2  # Individual ID
n = length(IID)   # sample size
Covar = data.table(IID = IID,
AGE = rnorm(n, 60),
GENDER = rbinom(n, 1, 0.5))
Covar = data.table::data.table(IID = IID,
AGE = rnorm(n, 60),
GENDER = rbinom(n, 1, 0.5))
Covar
Covar
?GRAB.NullModel
?glm
?%in%
"a" %in% c("a","b")
"a" %notin% c("a","b")
?set.seed
sample(1e9)
sample(1e9,1)
sample(1e10,1)
sample(1e11,1)
seed = sample(1e11,1)
cat("Random number seed:\t", seed, "\n")
?rnorm
?uniroot
source("C:/Users/wenjianb/Dropbox/GRAB_toolbox/GRAB.SimuPheno.R")
source("C:/Users/wenjianb/Dropbox/GRAB_toolbox/GRAB.SimuPheno.R")
eta = rnorm(1000)
pheno = GRAB.SimuPheno(eta, "binary", 0.1)
pheno = GRAB.SimuPheno(eta, "binary", control = list(pCase=0.1))
source("C:/Users/wenjianb/Dropbox/GRAB_toolbox/GRAB.SimuPheno.R")
seed = 88526569326
set.seed(seed)
seed = 8852656932
set.seed(seed)
seed = 8852656932
seed = 885265693
set.seed(seed)
#' Simulate phenotype using linear predictor
#'
#' \code{GRAB} package can help simulate a wide variaty of phenotypes
#'
#' @param eta linear predictors, usually covar \times beta.cova + genotype \times beta.genotype
#' @param traitType "quantitative", "binary", "ordinal", or "time-to-event"
#' @param control a list of parameters for controlling the simulation process
#' @export
GRAB.SimuPheno = function(eta,
traitType = "binary",
control = list(pCase = 0.1,
sdError = 1,
pEachGroup = c(1,1,1)))
{
if(!traitType %in% c("quantitative", "binary", "ordinal", "time-to-event"))
stop('traitType is limited to "quantitative", "binary", "ordinal", and "time-to-event".')
if(traitType == "binary")
if(!"pCase" %in% names(control))
stop("For binary phenotype, argument 'control' should include 'pCase' which is the proportion of cases.")
if(traitType == "quantitative")
if(!"sdError" %in% names(control))
cat("For quantitative phenotype, argument 'control' should include 'sdError' which is the stardard derivation of the error term.")
if(traitType == "ordinal")
if(!"pEachGroup" %in% names(control))
cat("For quantitative phenotype, argument 'control' should include 'pEachGroup' which is ratio of sample size in each group.")
n = length(eta)
seed = sample(1e9,1)
cat("Random number seed:\t", seed, "\n")
### quantitative trait
if(traitType == "quantitative"){
sdError = control$sdError
set.seed(seed)
error = rnorm(n, sd = sdError)
pheno = eta + error
return(pheno)
}
### binary trait
if(traitType == "binary"){
pCase = control$pCase
eta0 = uniroot(f.binary, c(-100,100), eta = eta, pCase = pCase,seed = seed)
eta0 = eta0$root
set.seed(seed)
eta.new = eta0 + eta
mu = exp(eta.new) / (1 + exp(eta.new))   # The probability being a case given the covariates, genotypes, and addition effect
pheno = rbinom(n, 1, mu)                     # Case-control status
return(pheno)
}
### quantitative trait
if(traitType == "ordinal"){
pEachGroup = control$pEachGroup
Eps = getEps(pEachGroup, eta, seed)
set.seed(seed)
pheno.latent = runif(N)
pheno = rep(0, N)
for(g in 1:length(Eps)){
mu = exp(Eps[g]-eta)/(1+exp(Eps[g]-eta))
pheno[pheno.latent > mu] = g
}
return(pheno)
}
}
#### lower function to estimate eta0 given a prevalence. Will be used in data.simu.binary().
f.binary = function(eta,               # Sample size
pCase,             # Prevalence
eta0,              # Intercept
seed)
{
set.seed(seed)
n = length(eta)
eta.new = eta0 + eta
mu = exp(eta.new) / (1 + exp(eta.new))   # The probability being a case given the covariates, genotypes, and addition effect
Y = rbinom(n, 1, mu)                     # Case-control status
re = mean(Y) - pCase
return(re)
}
#### lower function to estimate epsilons given a ratio(phenotypic distribution). Will be used in data.simu.categorical().
getProb = function(eps,
eta.true,
prob,
seed)
{
set.seed(seed)
n = length(eta.true)
mu = exp(eps-eta.true) / (1+exp(eps-eta.true))
Y.latent = runif(n)
diffprob = mean(Y.latent < mu) - prob
return(diffprob)
}
getEps = function(ratios,
eta.true,
seed)
{
sumR = sum(ratios)
cumR = 0
J = length(ratios)
Eps = c()
for(i in 1:(J-1)){
cumR = cumR + ratios[i]
eps = uniroot(getProb, c(-100,100), eta.true = eta.true, prob = cumR/sumR, seed = seed)
Eps = c(Eps, eps$root)
}
return(Eps)
}
eta = rnorm(1000)
pheno = GRAB.SimuPheno(eta, "binary", control = list(pCase=0.1))
table(pheno)
pheno = GRAB.SimuPheno(eta, "quantitative", control = list(sdError=1))
table(pheno)
pheno = GRAB.SimuPheno(eta, "ordinal", control = list(pEachGroup=c(10, 1, 1)))
#' Simulate phenotype using linear predictor
#'
#' \code{GRAB} package can help simulate a wide variaty of phenotypes
#'
#' @param eta linear predictors, usually covar \times beta.cova + genotype \times beta.genotype
#' @param traitType "quantitative", "binary", "ordinal", or "time-to-event"
#' @param control a list of parameters for controlling the simulation process
#' @export
GRAB.SimuPheno = function(eta,
traitType = "binary",
control = list(pCase = 0.1,
sdError = 1,
pEachGroup = c(1,1,1)))
{
if(!traitType %in% c("quantitative", "binary", "ordinal", "time-to-event"))
stop('traitType is limited to "quantitative", "binary", "ordinal", and "time-to-event".')
if(traitType == "binary")
if(!"pCase" %in% names(control))
stop("For binary phenotype, argument 'control' should include 'pCase' which is the proportion of cases.")
if(traitType == "quantitative")
if(!"sdError" %in% names(control))
cat("For quantitative phenotype, argument 'control' should include 'sdError' which is the stardard derivation of the error term.")
if(traitType == "ordinal")
if(!"pEachGroup" %in% names(control))
cat("For quantitative phenotype, argument 'control' should include 'pEachGroup' which is ratio of sample size in each group.")
n = length(eta)
seed = sample(1e9,1)
cat("Random number seed:\t", seed, "\n")
### quantitative trait
if(traitType == "quantitative"){
sdError = control$sdError
set.seed(seed)
error = rnorm(n, sd = sdError)
pheno = eta + error
return(pheno)
}
### binary trait
if(traitType == "binary"){
pCase = control$pCase
eta0 = uniroot(f.binary, c(-100,100), eta = eta, pCase = pCase,seed = seed)
eta0 = eta0$root
set.seed(seed)
eta.new = eta0 + eta
mu = exp(eta.new) / (1 + exp(eta.new))   # The probability being a case given the covariates, genotypes, and addition effect
pheno = rbinom(n, 1, mu)                     # Case-control status
return(pheno)
}
### quantitative trait
if(traitType == "ordinal"){
pEachGroup = control$pEachGroup
Eps = getEps(pEachGroup, eta, seed)
set.seed(seed)
pheno.latent = runif(n)
pheno = rep(0, n)
for(g in 1:length(Eps)){
mu = exp(Eps[g]-eta)/(1+exp(Eps[g]-eta))
pheno[pheno.latent > mu] = g
}
return(pheno)
}
}
#### lower function to estimate eta0 given a prevalence. Will be used in data.simu.binary().
f.binary = function(eta,               # Sample size
pCase,             # Prevalence
eta0,              # Intercept
seed)
{
set.seed(seed)
n = length(eta)
eta.new = eta0 + eta
mu = exp(eta.new) / (1 + exp(eta.new))   # The probability being a case given the covariates, genotypes, and addition effect
Y = rbinom(n, 1, mu)                     # Case-control status
re = mean(Y) - pCase
return(re)
}
#### lower function to estimate epsilons given a ratio(phenotypic distribution). Will be used in data.simu.categorical().
getProb = function(eps,
eta.true,
prob,
seed)
{
set.seed(seed)
n = length(eta.true)
mu = exp(eps-eta.true) / (1+exp(eps-eta.true))
Y.latent = runif(n)
diffprob = mean(Y.latent < mu) - prob
return(diffprob)
}
getEps = function(ratios,
eta.true,
seed)
{
sumR = sum(ratios)
cumR = 0
J = length(ratios)
Eps = c()
for(i in 1:(J-1)){
cumR = cumR + ratios[i]
eps = uniroot(getProb, c(-100,100), eta.true = eta.true, prob = cumR/sumR, seed = seed)
Eps = c(Eps, eps$root)
}
return(Eps)
}
eta = rnorm(1000)
pheno = GRAB.SimuPheno(eta, "binary", control = list(pCase=0.1))
pheno = GRAB.SimuPheno(eta, "quantitative", control = list(sdError=1))
pheno = GRAB.SimuPheno(eta, "ordinal", control = list(pEachGroup=c(10, 1, 1)))
table(pheno)
pheno = GRAB.SimuPheno(eta, "ordinal", control = list(pEachGroup=c(8, 1, 1)))
table(pheno)
library(GRAB)
?GRAB.SimuPheno
eta = rnorm(1000)
pheno = GRAB.SimuPheno(eta, "binary", control = list(pCase=0.1))
pheno = GRAB.SimuPheno(eta, "quantitative", control = list(sdError=1))
pheno = GRAB.SimuPheno(eta, "ordinal", control = list(pEachGroup=c(8, 1, 1)))
table(pheno)
setwd("C:/Users/wenjianb/Dropbox/GRAB_toolbox")
library(tidyr)
library(dplyr)
set.seed(13579)
CovarFile = system.file("extdata", "simuCovar.txt", package = "GRAB")
Covar = data.table::fread(CovarFile, header=T)
beta.AGE = 0.5
beta.GENDER = 0.5
eta = with(Covar, beta.AGE * AGE + beta.GENDER * GENDER)
phenoB = GRAB.SimuPheno(eta, traitType = "binary",
control = list(pCase=0.1))
table(phenoB)
set.seed(1)
phenoB = GRAB.SimuPheno(eta, traitType = "binary",
control = list(pCase=0.1))
set.seed(1)
phenoB = GRAB.SimuPheno(eta, traitType = "binary",
control = list(pCase=0.1))
set.seed(1)
phenoQ = GRAB.SimuPheno(eta, traitType = "quantitative",
control = list(sdError=1))
set.seed(1)
phenoO = GRAB.SimuPheno(eta, traitType = "ordinal",
control = list(pEachGroup = c(8,1,1)))
table(phenoB)
table(phenoO)
Data1 = data.table::data.table(eta = eta,
phenoB = phenoB,
phenoQ = phenoQ,
phenoO = phenoO)
Data1
library(ggplot2)
ggplot(Data1, aes(phenoO, eta)) + geom_boxplot()
Data1 = data.table::data.table(eta = eta,
`binary phenotype` = as.factor(phenoB),
`quantitative phneotype` = phenoQ,
`ordinal categorical phenotype` = as.factor(phenoO))
Data1
Data1 = data.table::data.table(`linear predicator (eta)` = eta,
`binary phenotype` = as.factor(phenoB),
`quantitative phneotype` = phenoQ,
`ordinal categorical phenotype` = as.factor(phenoO))
Data1
ggplot(Data1, aes(`ordinal categorical phenotype`, `linear predicator (eta)`)) + geom_boxplot()
ggplot(Data1, aes(`binary phenotype`, `linear predicator (eta)`)) + geom_boxplot()
Data1 = data.table::data.table(`linear predicator (eta)` = eta,
`binary phenotype` = as.factor(phenoB),
`quantitative phenotype` = phenoQ,
`ordinal categorical phenotype` = as.factor(phenoO))
library(ggplot2)
p1 = ggplot(Data1, aes(`ordinal categorical phenotype`, `linear predicator (eta)`)) + geom_boxplot()
p2 = ggplot(Data1, aes(`binary phenotype`, `linear predicator (eta)`)) + geom_boxplot()
p3 = ggplot(Data1, aes(`linear predicator (eta)`, `quantitative phenotype`)) + geom_point()
gridExtra::grid.arrange(p1, p2, p3, nrow=1)
ggsave("SimuPheno.jpeg", p, width = 10, height = 5)
p1 = ggplot(Data1, aes(`ordinal categorical phenotype`, `linear predicator (eta)`)) + geom_boxplot()
p2 = ggplot(Data1, aes(`binary phenotype`, `linear predicator (eta)`)) + geom_boxplot()
p3 = ggplot(Data1, aes(`linear predicator (eta)`, `quantitative phenotype`)) + geom_point()
p = gridExtra::grid.arrange(p1, p2, p3, nrow=1)
ggsave("SimuPheno.jpeg", p, width = 10, height = 5)
ggsave("SimuPheno.jpeg", p, width = 10, height = 4)
ggsave("SimuPheno.jpeg", p, width = 10, height = 3.5)
p = gridExtra::grid.arrange(p3, p2, p1, nrow=1)
ggsave("SimuPheno.jpeg", p, width = 10, height = 3.5)
dev.off()
p = gridExtra::grid.arrange(p3, p2, p1, nrow=2)
ggsave("SimuPheno.jpeg", p, width = 8, height = 8)
Data1
system.file("extdata", "simuCovar.txt", package = "GRAB")
SimuPheno = data.table::data.table(Covar,
BinaryPheno = phenoB,
OrdinalPheno = phenoO,
QuantPheno = phenoQ)
SimuPheno
write.table(SimuPheno, "D:/Github/GRAB/inst/extdata/SimuPheno.txt",
row.names = F, col.names = T, quote = F, sep = "\t")
sessionInfo()
library(GRAB)
?GRAB.SimuPheno
library(GRAB)
?GRAB.SimuPheno
?GRAB.SimuGMat
?GRAB.SimuPheno
library(GRAB)
?GRAB.SimuPheno
library(GRAB)
?GRAB.SimuPheno
library(GRAB)
