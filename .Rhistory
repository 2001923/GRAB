head(markerInfo)
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[2500+1:10, 2500+1:10];
GRM1
GRM2
GRM2 = GRM[250+1:10, 250+1:10];
GRM2
nSNP = 5000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
## The following is to calculate GRM
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[250+1:10, 250+1:10]
GRM1
GRM2
dim(GenoMat)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 100
nFam = 10
FamMode = "10-members"
nSNP = 10000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
## The following is to calculate GRM
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[100+1:10, 100+1:10];
GRM1
GRM2
example.fam.10.members = function(n.fam)           # family numbers
{
m = 10  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",4),
rep("Offspring",6))
Source1 = c(paste0("haplo-",c.h+1:4),
IID[c(1,1,3,3,4,4)])
Source2 = c(paste0("haplo-",c.h+5:8),
IID[c(2,2,5,5,6,6)])
c.h = c.h+8
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.10.members(1)
example.fam.10.members = function(n.fam)           # family numbers
{
m = 4  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",2),
rep("Offspring",2))
Source1 = c(paste0("haplo-",c.h+1:2),
IID[c(1,1)])
Source2 = c(paste0("haplo-",c.h+3:4),
IID[c(2,2)])
c.h = c.h+4
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.4.members = function(n.fam)           # family numbers
{
m = 4  # family members in each family
fam.mat=c()
c.h = 0 # count of haplotype
for(i in 1:n.fam){
FID = paste0("f",i)
IID = paste0(FID,"_",1:m)
Role = c(rep("Founder",2),
rep("Offspring",2))
Source1 = c(paste0("haplo-",c.h+1:2),
IID[c(1,1)])
Source2 = c(paste0("haplo-",c.h+3:4),
IID[c(2,2)])
c.h = c.h+4
fam.mat = rbind(fam.mat,
cbind(FID,IID,Role,Source1,Source2))
}
fam.mat = data.frame(fam.mat,stringsAsFactors = F)
return(fam.mat)  # five columns of FID, IID, Role, Source1, and Source2
}
example.fam.4.members(1)
example.fam.4.members(2)
example.fam.4.members(1)
example.fam.10.members(1)
example.fam.20.members(1)
example.fam.10.members(1)
source("D:/Github/GRAB/R/GRAB_Simu.R")
example.fam.10.members(1)
example.fam.20.members(1)
library(GRAB)
?GRAB.SimuGMatCommon
nSub = 100
nFam = 10
FamMode = "10-members"
nSNP = 10000
OutList = GRAB.SimuGMatCommon(nSub, nFam, FamMode, nSNP)
GenoMat = OutList$GenoMat
markerInfo = OutList$markerInfo
GenoMat[1:10,1:10]
head(markerInfo)
## The following is to calculate GRM
MAF = apply(GenoMat, 2, mean)/2
GenoMatSD = t(t(GenoMat) - 2*MAF)/sqrt(2*MAF*(1-MAF))
GRM = GenoMatSD %*% t(GenoMatSD) / ncol(GenoMat)
GRM1 = GRM[1:10, 1:10];
GRM2 = GRM[100+1:10, 100+1:10];
GRM1
GRM2
library(GRAB)
?GRAB.SimuGMatCommon
?makePlink
library(GRAB)
?GRAB.SimuGMatCommon
?glm
library(GRAB)
?GRAB.SimuGMatCommon
?GRAB.SimuGMatCommon
?GRAB.SimuGMatCommon
?GRAB.ReadGeno
?GRAB.ReadGeno
?makePlink
?makePlink
library(GRAB)
?GRAB.ReadGeno
RawFile = system.file("extdata", "simuRAW", package = "GRAB")
RawFile
system.file("extdata", package = "GRAB")
RawFile = system.file("extdata", "simuRAW.raw", package = "GRAB")
GenoMat = data.table::fread(RawFile)
dim(GenoMat)
GenoMat[1:10,1:10]
PLINKFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GenoList = GRAB.ReadGeno(PLINKFile, control = list(AllMarkers = TRUE)) # If include/exclude files are not specified, then control$AllMarker should be TRUE
GenoMat = GenoList$GenoMat
markerInfo = GenoList$markerInfo
head(GenoMat[,1:6])
head(markerInfo)
benchmark = read.table("D:/DepNet/ew12.PubMed.gene_bcscore_noNA.tsv")
rm(list=ls())
benchmark = read.table("D:/DepNet/ew12.PubMed.gene_bcscore_noNA.tsv")
HotNet2Mentha = read.table("D:/DepNet/HotNet2/mentha")
HotNet2Mentha
head(HotNet2Mentha)
plot(HotNet2Mentha$V2)
range(HotNet2Mentha$V2)
head(benchmark)
colnames(benchmark) = c("GENE", "ID", "ORDER", "Score.benchmark", "Pvalue.benchmark")
colnames(HotNet2Mentha) = c("GENE", "Score.HotNet2Mentha")
merged = merge(benchmark, HotNet2Mentha)
head(merged)
layout(matrix(1:4,2,2))
plot(merged$Score.benchmark, merged$Score.HotNet2Mentha)
plot(merged$Pvalue.benchmark, merged$Score.HotNet2Mentha)
merged$zScore.benchmark = qnorm(pValues$Pvalue.benchmark / 2) * (-1) / 100
plot(merged$Score.benchmark, merged$zScore.benchmark)
merged$zScore.benchmark = qnorm(merged$Pvalue.benchmark / 2) * (-1) / 100
layout(matrix(1:4,2,2))
plot(merged$Score.benchmark, merged$Score.HotNet2Mentha)
plot(merged$Score.benchmark, merged$zScore.benchmark)
plot(merged$Score.benchmark, merged$Score.HotNet2Mentha)
plot(merged$zScore.benchmark, merged$Score.HotNet2Mentha)
plot(merged$Pvalue.benchmark, merged$Score.HotNet2Mentha)
head(merged)
merged = merged[order(merged$ORDER),]
head(merged)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1)
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1)
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep="\t ")
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep="[\t ]")
?fread
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep=" ")
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 1, sep2=" ")
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 2, sep=" ")
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 3, sep=" ")
head(network)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 3, sep=" ", header = F)
network
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv", nrows = 1, skip = 2, sep=" ", header = F)
network
network = gsub("\t", "", network)
network
head(merged)
merged1 = subset(merged, GENE %in% network)
plot(merged1$Score.benchmark, merged1$Pvalue.benchmark)
plot(merged1$Score.benchmark, -log10(merged1$Pvalue.benchmark))
library(ggplot2)
ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark)))
ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark))) + geom_point()
library(ggrepel)
ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
setwd("D:/DepNet/HotNet2/figures")
for(i in 1:500){
print(i)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv",
nrows = 1, skip = i+1, sep=" ", header = F)
network = gsub("\t", "", network)
merged1 = subset(merged, GENE %in% network)
p = ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
ggsave(paste0("network-",i), p, width = 5, height = 5)
}
for(i in 1:500){
print(i)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv",
nrows = 1, skip = i+1, sep=" ", header = F)
network = gsub("\t", "", network)
merged1 = subset(merged, GENE %in% network)
p = ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
ggsave(paste0("network-",i,".jpeg"), p, width = 5, height = 5)
}
setwd("D:/DepNet/HotNet2/figures")
for(i in 1:500){
print(i)
network = data.table::fread("D:/DepNet/HotNet2/consensus/subnetworks.tsv",
nrows = 1, skip = i+1, sep=" ", header = F)
network = gsub("\t", "", network)
merged1 = subset(merged, GENE %in% network)
p = ggplot(merged1, aes(Score.benchmark, -log10(Pvalue.benchmark), label=GENE)) + geom_point() + geom_label_repel()
# ggsave(paste0("network-",i,".jpeg"), p, width = 5, height = 5)
if(length(network) > 5)
ggsave(paste0("../figures-more-than-5/network-",i,".jpeg"), p, width = 5, height = 5)
}
head(benchmark)
plot(benchmark$Score.benchmark, -log10(benchmark$Pvalue.benchmark))
dev.off()
plot(benchmark$Score.benchmark, -log10(benchmark$Pvalue.benchmark))
table(benchmark$Score.benchmark > 0)
# FALSE  TRUE
# 6472 11596
subset(benchmark, GENE %in% c("TP53","PIK3CA","NOTCH"))
head(benchmark)
HotNet2Mentha = read.table("D:/DepNet/HotNet2/mentha")
dim(HotNet2Mentha)
head(HotNet2Mentha)
plot(merged$zScore.benchmark, merged$Score.HotNet2Mentha)
merged = merged[order(merged$ORDER),]
write.csv(merged, "merged.csv", row.names = F)
getwd()
library(devtools)  # author version: 0.0.9
install_github("YZ-Ma/EmpSPA")
sessionInfo()
library(EmpSPA)
?EmpSPA  # manual of EmpSPA package
?EmpSPA::EmpSPA_R_Null_Model
library(GRAB)
?GRAB.control
?getSparseGRM
SparseGRMFile = gsub("temp", "SparseGRM.txt", tempDir)
tempDir = system.file("SparseGRM", "temp", package = "GRAB")
SparseGRMFile = gsub("temp", "SparseGRM.txt", tempDir)
SparseGRMFile
data.table::fread(SparseGRMFile)
?GRAB.NullModel
?getSparseGRM
?GRAB.NullModel
?getSparseGRM
?GRAB.NullModel
library(GRAB)
?GRAB.NullModel
?GRAB.NullModel
n=10
rbinom(n, 3, 0.3)
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = read.table(FamFile)
IID = FamData$V2  # Individual ID
n = length(IID)
set.seed(678910)
## The below is just to demonstrate the functions of GRAB package
Pheno = data.frame(IID = IID, Cova1 = rnorm(n), Cova2 = rbinom(n, 1, 0.5),
binary = rbinom(n, 1, 0.5),
ordinal = rbinom(n, 3, 0.3),
quantitative = rnorm(n),
time = runif(n),
event = rbinom(n, 1, 0.2))
dim(Pheno)
head(Pheno)
PhenoFile = "C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/extdata/simuPHENO.txt"
### Replicate the phenotype simulation in the package
```{r}
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = read.table(FamFile)
IID = FamData$V2  # Individual ID
n = length(IID)
set.seed(678910)
## The below is just to demonstrate the functions of GRAB package
Pheno = data.frame(IID = IID, Cova1 = rnorm(n), Cova2 = rbinom(n, 1, 0.5),
binary = rbinom(n, 1, 0.5),
ordinal = rbinom(n, 3, 0.3),
quantitative = rnorm(n),
time = runif(n),
event = rbinom(n, 1, 0.2))
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
```
head(Pheno)
?write.ftable
?write.table
PhenoFile
PhenoFile = "C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/extdata/simuPHENO.txt"
### Replicate the phenotype simulation in the package
```{r}
FamFile = system.file("extdata", "simuPLINK.fam", package = "GRAB")
FamData = read.table(FamFile)
IID = FamData$V2  # Individual ID
n = length(IID)
set.seed(678910)
## The below is just to demonstrate the functions of GRAB package
Pheno = data.frame(IID = IID, Cova1 = rnorm(n), Cova2 = rbinom(n, 1, 0.5),
binary = rbinom(n, 1, 0.5),
ordinal = rbinom(n, 3, 0.3),
quantitative = rnorm(n),
time = runif(n),
event = rbinom(n, 1, 0.2))
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
```
PhenoFile = "C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/extdata/simuPHENO.txt"
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
head(Pheno)
?glm
PhenoFile = "D:/Github/GRAB/inst/extdata/simuPHENO.txt"
write.table(Pheno, PhenoFile, row.names = F, quote = F, sep = "\t")
?GRAB.Marker
?GRAB.NullModel
?save
?load
library(GRAB)
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
PhenoFile = system.file("extdata", "simuPHENO.txt", package = "GRAB")
Pheno = read.table(PhenoFile, header = T)
SparseGRMFile = system.file("SparseGRM", "SparseGRM.txt", package = "GRAB")
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
objNull = GRAB.NullModel(as.factor(ordinal) ~ Cova1 + Cova2,
data = Pheno,
subset = (event==0),
subjData = Pheno$IID,
method = "POLMM",
traitType = "ordinal",
GenoFile = GenoFile,
SparseGRMFile = SparseGRMFile)
objNull$tau
save(objNull, file="D:/Github/GRAB/inst/results/objNull.RData")
35*50
### Step 2: Perform a genome-wide analysis for marker-level and region-level
```{r}
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNull)
### Step 2: Perform a genome-wide analysis for marker-level and region-level
```{r}
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
objNullFile
?GRAB.makePlink
?GRAB.NullModel
library(GRAB)
?GRAB.Marker
?GRAB.Region
?GRAB.Marker
?GRAB.Region
?GRAB.Marker
library(GRAB)
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
OutputFile = system.file("results", "simuOUTPUT.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
?GRAB.Marker
library(GRAB)
a=c(1/3)
a
a=c(1/3,1/300000)
a
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
Rcpp::sourceCpp("C:/Users/wenjianb/Desktop/testNaN.cpp")
intersect
a=c("a")
b=c("b")
intersect(a,b)
sdfsd=intersect(a,b)
for(i in sdfsd) print(i)
a=data.frame(a=1:3,b=4:6)
a
cbind.data.frame(a, d=7:9)
cbind.data.frame(a, 7:9)
library(GRAB)
?GRAB.Marker
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
OutputFile = system.file("results", "simuOUTPUT.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
library(GRAB)
?GRAB.Marker
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
OutputFile = system.file("results", "simuOUTPUT.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
## make sure the output file does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
data.table::fread("C:/Users/wenjianb/Documents/R/win-library/4.1/GRAB/results/simuOUTPUT.txt")
library(GRAB)
?GRAB.Marker
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
OutputFile = system.file("results", "simuOUTPUT.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
cat("sdfs","sfsd")
library(GRAB)
?GRAB.Marker
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
OutputFile = system.file("results", "simuOUTPUT.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
data.table::fread(OutputFile)
a1=data.frame()
a2=1:10
cbind.data.frame(a1, a2)
a = list(a1=1:10, a2=2:11)
a
a = list(a1=1:10, a2=2:11, a3=3:12)
a
a[[c("a1","a2")]]
a[[c("a1")]]
a[[c("a1","a2")]]
a[[c("a2")]]
as.data.frame(a)
as.data.frame(a[c("a1","a2")])
as.data.frame(a[c("a1")])
library(GRAB)
?GRAB.Marker
objNullFile = system.file("results", "objNull.RData", package = "GRAB")
load(objNullFile)
OutputFile = system.file("results", "simuOUTPUT.txt", package = "GRAB")
GenoFile = system.file("extdata", "simuPLINK.bed", package = "GRAB")
## make sure the output files does not exist at first
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile)
data.table::fread(OutputFile)
file.remove(OutputFile)
file.remove(paste0(OutputFile, ".index"))
GRAB.Marker(objNull,
GenoFile = GenoFile,
OutputFile = OutputFile,
control = list(outputColumns = c("beta", "seBeta","zScore")))
data.table::fread(OutputFile)
